function ArrayEquals(e, t) {
    if (!t) return !1;
    if (e.length !== t.length) return !1;
    for (var i = 0, a = e.length; i < a; i++)
        if (e[i] !== t[i]) return !1;
    return !0
}

function makeString(e) {
    for (var t = [], i = 1; i < arguments.length; i++) t[i - 1] = arguments[i];
    var a = messages[e];
    if (t)
        for (var n = 0; n < t.length; n++) a = a.replace("_" + n + "_", t[n]);
    return a
}

function fullDamageType(e) {
    var t = "";
    return Object.keys(DamageType).map(function(e) {
        return parseInt(e, 10)
    }).filter(function(t) {
        return !isNaN(t) && (e & t) === t
    }).forEach(function(e) {
        return t += messages[damageTypeToMessage[e]] + ", "
    }), t.slice(0, -2)
}

function addDefaultBind(e, t, i, a) {
    void 0 === i && (i = BindType.Keyboard), void 0 === a && (a = !0), defaultBinds[e] = {
        value: t,
        type: i
    }, void 0 !== t && a && keybindOrder.push(e)
}

function removeDefaultKeybind(e) {
    keybindOrder.splice(keybindOrder.indexOf(e), 1), delete defaultBinds[e]
}

function rotateTileType90Deg(e, t) {
    return e >= TileType.CenterTopLeft ? (e - TileType.CenterTopLeft + t) % 4 + TileType.CenterTopLeft : e >= TileType.InnerTopLeft ? (e - TileType.InnerTopLeft + t) % 4 + TileType.InnerTopLeft : (e + 2 * t) % 8
}

function getTileLoc(e, t, i) {
    switch (e) {
        case TileType.CenterTopLeft:
            return t.getCenterTopLeft(i);
        case TileType.CenterTopRight:
            return t.getCenterTopRight(i);
        case TileType.CenterBottomLeft:
            return t.getCenterBottomLeft(i);
        case TileType.CenterBottomRight:
            return t.getCenterBottomRight(i);
        case TileType.Top:
            return t.getTop(i);
        case TileType.Left:
            return t.getLeft(i);
        case TileType.Right:
            return t.getRight(i);
        case TileType.Bottom:
            return t.getBottom(i);
        case TileType.TopLeft:
            return t.topLeft;
        case TileType.TopRight:
            return t.topRight;
        case TileType.BottomLeft:
            return t.bottomLeft;
        case TileType.BottomRight:
            return t.bottomRight;
        case TileType.InnerTopLeft:
            return t.innerTopLeft;
        case TileType.InnerTopRight:
            return t.innerTopRight;
        case TileType.InnerBottomLeft:
            return t.innerBottomLeft;
        case TileType.InnerBottomRight:
            return t.innerBottomRight
    }
    throw new Error("invalid tileType")
}

function skillSet() {
    var e, t = Array();
    for (e in SkillType) isNaN(e) || (t[e] = new SkillLevel);
    return t
}

function skillChance(e) {
    switch (e) {
        case RecipeLevel.Simple:
            return 0;
        case RecipeLevel.Intermediate:
            return 25;
        case RecipeLevel.Advanced:
            return 50;
        case RecipeLevel.Expert:
            return 75
    }
    return 0
}
Math.clamp255 = function(e) {
    return e > 255 ? 255 : e < 0 ? 0 : e
}, Math.clamp01 = function(e) {
    return e > 1 ? 1 : e < 0 ? 0 : e
};
var Utilities;
! function(Utilities) {
    function roundNumber(e, t) {
        return Math.round(Math.round(e * Math.pow(10, t + 1)) / Math.pow(10, 1)) / Math.pow(10, t)
    }

    function loadImage(e, t) {
        var i = new Image;
        i.onload = function() {
            t(i), game.updateRender = !0
        }, i.crossOrigin = "anonymous", i.src = "images/" + e + "?" + (new Date).getTime().toString()
    }

    function getTileVariation(e, t) {
        var i = 43758.5453 * Math.sin(12.9898 * e + 78.233 * t);
        return i - Math.floor(i)
    }

    function lerp(e, t, i) {
        return (1 - i) * e + i * t
    }

    function easeInQuad(e, t, i, a) {
        return e /= a, i * e * e + t
    }

    function easeInCubic(e, t, i, a) {
        return e /= a, i * e * e * e + t
    }

    function isInBound2Wrapped(e, t, i) {
        return e.max.x > game.mapSize && t < e.min.x ? t += game.mapSize : e.min.x < game.mapSize && t > e.max.x && (t -= game.mapSize), e.max.y > game.mapSize && i < e.min.y ? i += game.mapSize : e.min.y < game.mapSize && i > e.max.y && (i -= game.mapSize), t >= e.min.x && t <= e.max.x && i >= e.min.y && i <= e.max.y
    }

    function shuffle(e) {
        for (var t = e.length - 1; t > 0; t--) {
            var i = Math.floor(this.Random.nextFloat() * (t + 1)),
                a = e[t];
            e[t] = e[i], e[i] = a
        }
        return e
    }

    function debounce(e, t, i) {
        void 0 !== debounces[e] && clearTimeout(debounces[e]), debounces[e] = setTimeout(t, i)
    }

    function windowKeysToObject(e) {
        for (var t = window, i = 0; i < e.length; i++) t = t[e[i]];
        return t
    }

    function windowKeysToParentObject(e) {
        for (var t = window, i = 0; i < e.length - 1; i++) t = t[e[i]];
        return t
    }
    var Console;
    ! function(e) {
        function t(e, t) {
            t.unshift("color:black"), t.unshift("color:blue"), t.unshift("%c[" + Source[e] + "]%c")
        }

        function i(e) {
            for (var i = [], a = 1; a < arguments.length; a++) i[a - 1] = arguments[a];
            t(e, i), console.log.apply(console, i)
        }

        function a(e) {
            for (var i = [], a = 1; a < arguments.length; a++) i[a - 1] = arguments[a];
            t(e, i), console.info.apply(console, i)
        }

        function n(e) {
            for (var i = [], a = 1; a < arguments.length; a++) i[a - 1] = arguments[a];
            t(e, i), console.debug.apply(console, i)
        }

        function o(e) {
            for (var i = [], a = 1; a < arguments.length; a++) i[a - 1] = arguments[a];
            t(e, i), console.warn.apply(console, i)
        }

        function r(e) {
            for (var i = [], a = 1; a < arguments.length; a++) i[a - 1] = arguments[a];
            t(e, i), console.error.apply(console, i)
        }
        e.log = i, e.info = a, e.debug = n, e.warn = o, e.error = r
    }(Console = Utilities.Console || (Utilities.Console = {}));
    var Random;
    ! function(Random) {
        function randomFromInterval(e, t) {
            return Math.floor(nextFloat() * (t - e + 1)) + Math.ceil(e)
        }

        function nextFloat() {
            return Random.seed = (9301 * Random.seed + 49297) % 233280, Random.seed / 233280
        }

        function nextInt(e) {
            return Math.floor(nextFloat() * e)
        }

        function getSeed() {
            return Random.seed
        }

        function setSeed(e) {
            Random.seed = e
        }
        eval(""), Random.seed = (new Date).getTime(), Random.randomFromInterval = randomFromInterval, Random.nextFloat = nextFloat, Random.nextInt = nextInt, Random.getSeed = getSeed, Random.setSeed = setSeed
    }(Random = Utilities.Random || (Utilities.Random = {}));
    var TileHelpers;
    ! function(TileHelpers) {
        function getGfx(e) {
            return getGfxRaw(e.data)
        }

        function getGfxRaw(e) {
            return e & TileHelpers.maskGfx
        }

        function setGfx(e, t) {
            e.data = setGfxRaw(e.data, t)
        }

        function setGfxRaw(e, t) {
            return e & ~TileHelpers.maskGfx | t & TileHelpers.maskGfx
        }

        function getType(e) {
            return getTypeRaw(e.data)
        }

        function getTypeRaw(e) {
            return (e & TileHelpers.maskType) >> 2
        }

        function setType(e, t) {
            e.data = setTypeRaw(e.data, t)
        }

        function setTypeRaw(e, t) {
            return e & ~TileHelpers.maskType | (t & TileHelpers.maskType >> 2) << 2
        }
        eval(""), TileHelpers.maskGfx = 3, TileHelpers.maskType = 252, TileHelpers.getGfx = getGfx, TileHelpers.getGfxRaw = getGfxRaw, TileHelpers.setGfx = setGfx, TileHelpers.setGfxRaw = setGfxRaw, TileHelpers.getType = getType, TileHelpers.getTypeRaw = getTypeRaw, TileHelpers.setType = setType, TileHelpers.setTypeRaw = setTypeRaw
    }(TileHelpers = Utilities.TileHelpers || (Utilities.TileHelpers = {}));
    var WebWorkerHelpers;
    ! function(e) {
        function t(e, t) {
            var n = e.toString(),
                o = URL.createObjectURL(new Blob([i("Source", Source, !0), i("TerrainType", TerrainType), i("TileTemplateType", TileTemplateType), a("Utilities", "Random", Random), a("Utilities", "TileHelpers", TileHelpers), "var workerFunction2 = " + n + ";\n", "var workerFunction = function(evt) { workerFunction2(evt.data); close(); };\n", '(function () { this.addEventListener("message", workerFunction, false); })()\n'], {
                    type: "application/javascript"
                })),
                r = new Worker(o);
            return r.addEventListener("message", function(e) {
                URL.revokeObjectURL(o), t(e)
            }, !1), r
        }

        function i(e, t, i) {
            void 0 === i && (i = !1);
            for (var a = "var " + e + " = {}\n", n = Object.keys(t), o = 0; o < n.length; o++) {
                var r = n[o],
                    s = t[r];
                "number" == typeof s ? a += e + "." + r + " = " + s + ";\n" : i && (a += e + "[" + r + '] = "' + s + '";\n')
            }
            return a
        }

        function a(e, t, i, a) {
            var n, o = "var " + e + " = " + e + " || {};\n";
            if (o += "(function (" + t + ") {\n", a) {
                for (o += "/* Global variables */\n", n = 0; n < a.length; n++) o += "var ${globalVariables[i]};\n";
                o += "\n"
            }
            var r = Object.keys(i);
            for (n = 0; n < r.length; n++) {
                var s = r[n],
                    l = i[s];
                o += "function" == typeof l ? l.toString() + " " + t + "." + s + " = " + l.name : t + "." + s + " = " + l, o += ";\n\n"
            }
            return o += "})(" + t + " = " + e + "." + t + " || (" + e + "." + t + " = {}));\n\n"
        }
        e.create = t, e.enumToString = i, e.moduleToString = a
    }(WebWorkerHelpers = Utilities.WebWorkerHelpers || (Utilities.WebWorkerHelpers = {}));
    var ItemImageCache;
    ! function(e) {
        function t() {
            p[ItemImage.Default] = {
                r: 0,
                g: 0,
                b: 0,
                a: 255
            }, p[ItemImage.Exceptional] = {
                r: 137,
                g: 0,
                b: 254,
                a: 255
            }, p[ItemImage.Remarkable] = {
                r: 0,
                g: 180,
                b: 255,
                a: 255
            }, p[ItemImage.Legendary] = {
                r: 255,
                g: 150,
                b: 0,
                a: 255
            }, p[ItemImage.Selected] = {
                r: 255,
                g: 255,
                b: 255,
                a: 255
            }, p[ItemImage.Damaged] = {
                r: 255,
                g: 0,
                b: 0,
                a: 255
            }, p[ItemImage.Highlighted] = {
                r: 255,
                g: 255,
                b: 0,
                a: 255
            }
        }

        function i(e, t) {
            return t === ItemImage.Default ? ResourceLoader.getPath(ResourceLoader.PathType.Item, e) + ".png" : l[r(e, t)]
        }

        function a(e, t) {
            g.push({
                itemType: t,
                image: e
            })
        }

        function n() {
            for (var e = 0; e < g.length; e++) {
                var t = g[e];
                t.image && (o(t.image, t.itemType), t.image = null)
            }
            g = []
        }

        function o(e, t) {
            var i;
            for (i in ItemImage)
                if (!isNaN(i)) {
                    if (i = parseInt(i, 10), l[r(t, i)]) return;
                    l[r(t, i)] = s(e, [p[ItemQuality.None], p[i]])
                }
        }

        function r(e, t) {
            return e.toString() + "_" + e + "_" + t
        }

        function s(e, t) {
            var i = 2 * e.width,
                a = 2 * e.height;
            d.width = i, d.height = a, u.imageSmoothingEnabled = !1, u.drawImage(e, 0, 0, i, a);
            for (var n = u.getImageData(0, 0, i, a), o = n.data, r = 0; r < t.length; r++) {
                var s = t[r],
                    l = [],
                    p = void 0;
                for (p = 0; p < o.length; p += 4)
                    if (0 === o[p + 3])
                        for (var g = p / 4 % i, m = Math.floor(p / 4 / i), y = [
                            [g + 1, m + 1],
                            [g + 1, m],
                            [g + 1, m - 1],
                            [g, m + 1],
                            [g, m],
                            [g, m - 1],
                            [g - 1, m + 1],
                            [g - 1, m],
                            [g - 1, m - 1]
                        ], c = 0; c < y.length; c++) {
                            var h = y[c];
                            if (h[0] >= 0 && h[0] < i && h[1] >= 0 && h[1] < a && o[h[1] * i * 4 + 4 * h[0] + 3] > 0) {
                                l.push(p);
                                break
                            }
                        }
                    for (p = 0; p < l.length; p++) {
                        var T = l[p];
                        o[T] = s.r, o[T + 1] = s.g, o[T + 2] = s.b, o[T + 3] = s.a
                    }
            }
            return u.putImageData(n, 0, 0), d.toDataURL()
        }
        var l = {},
            p = [],
            d = document.createElement("canvas"),
            u = d.getContext("2d"),
            g = [];
        e.initialize = t, e.getItemImageUrl = i, e.queueCreateItemImageOutlines = a, e.cacheAllItemImageOutlines = n
    }(ItemImageCache = Utilities.ItemImageCache || (Utilities.ItemImageCache = {}));
    var Enums;
    ! function(e) {
        function t() {
            e.allocatedEnums = {}
        }

        function i(e, t, i) {
            e[e.OfficialMax = Object.keys(e).length / 2] = "OfficialMax", e[e.ModStart = t] = "ModStart", e[e.Max = i] = "Max"
        }

        function a(e, t) {
            var i = e[t];
            return !(!i || "OfficialMax" === i || "ModStart" === i || "Max" === i) && (t !== e.OfficialMax && t !== e.ModStart && t !== e.Max)
        }

        function n(e) {
            return e.Max ? e.Max : Object.keys(e).length / 2
        }

        function o(e) {
            return e.OfficialMax ? e.OfficialMax : Object.keys(e).length / 2
        }

        function r(e) {
            return !!e.OfficialMax
        }

        function s() {
            Utilities.Console.log(Source.Utilities, "Restoring enums");
            for (var t in e.allocatedEnums) {
                var i = e.allocatedEnums[t],
                    a = window[i.enumName];
                if (!a[i.enumNumber] && (d(t, a, i.enumNumber, i.name), i.windowKeys)) {
                    var n = windowKeysToObject(i.windowKeys);
                    n && (n[i.enumNumber] = i.objectValue)
                }
            }
        }

        function l() {
            Utilities.Console.log(Source.Utilities, "Resetting enums");
            for (var t in e.allocatedEnums) {
                var i = e.allocatedEnums[t],
                    a = window[i.enumName];
                a[i.enumNumber] && (i.windowKeys && (i.object = windowKeysToObject(i.windowKeys)), u(i), i.object = null)
            }
            e.allocatedEnums = {}
        }

        function p(t, i, a, n, o, r) {
            void 0 === a && (a = null), void 0 === n && (n = null), void 0 === o && (o = null), void 0 === r && (r = null);
            var s = window[t];
            if (!Utilities.Enums.isModdable(s)) return Utilities.Console.error(Source.Utilities, "Enumeration is not moddable", t, i), null;
            var l = s.ModStart,
                p = s.Max,
                u = null,
                g = null;
            a && (g = windowKeysToObject(a));
            var m = t + "," + i,
                y = e.allocatedEnums[m];
            if (y) u = y.enumNumber;
            else
                for (var c = l + 1; c < p; c++)
                    if (g) {
                        if (void 0 === g[c]) {
                            u = c;
                            break
                        }
                    } else if (void 0 === s[c]) {
                u = c;
                break
            }
            return null === u || u > p ? (Utilities.Console.error(Source.Utilities, "No free enum slots available", t, s, u, p), null) : (y = {
                enumName: t,
                name: i,
                enumNumber: u,
                windowKeys: a,
                onUnallocate: null
            }, d(m, s, u, i), g && n && (g[u] = n(u), y.objectValue = g[u]), o && o(u), e.allocatedEnums[m] = y, {
                enumName: t,
                name: i,
                enumNumber: u,
                object: g,
                onUnallocate: r
            })
        }

        function d(e, t, i, a) {
            var n = a.replace(/\W/g, "");
            t[i] = n, t[n] = i, Utilities.Console.log(Source.Utilities, "allocateEnum " + e + ": " + i)
        }

        function u(e) {
            var t = e.enumName,
                i = e.name,
                a = e.enumNumber,
                n = window[e.enumName];
            Utilities.Console.log(Source.Utilities, "unallocateEnum " + t + "," + i + ": " + a);
            var o = i.replace(/\W/g, "");
            delete n[a], delete n[o], e.onUnallocate && e.onUnallocate(a), e.object && a in e.object && delete e.object[a]
        }
        e.initializeGameState = t, e.setup = i, e.isValid = a, e.getMax = n, e.getOfficialMax = o, e.isModdable = r, e.restore = s, e.reset = l, e.allocate = p, e.unallocate = u
    }(Enums = Utilities.Enums || (Utilities.Enums = {}));
    var String;
    ! function(e) {
        function t(e, t, i) {
            for (var a = e.split(t), n = 0; n < a.length; n++) {
                var o = a[n];
                if (0 !== o.trim().length) {
                    for (var r = 0, s = 0; s < o.length; s++) {
                        var l = o.charAt(s);
                        if (0 !== l.trim().length) {
                            r = s;
                            break
                        }
                    }
                    var p = "";
                    p = o.substring(0, r), p += o.charAt(r).toLocaleUpperCase();
                    var d = o.substring(r + 1);
                    i && (d = d.toLocaleLowerCase()), p += d, a[n] = p
                }
            }
            return a.join(t)
        }

        function i(e, i) {
            if (!e || e.length < 2) return e;
            switch (i) {
                case TextCase.Title:
                    return e.replace(/\w\S*/g, function(e) {
                        return e.length > 1 ? e.charAt(0).toLocaleUpperCase() + e.substr(1).toLocaleLowerCase() : e.charAt(0).toLocaleUpperCase()
                    });
                case TextCase.Sentence:
                    e = t(e, ".", !0), e = t(e, "!", !1), e = t(e, "?", !1)
            }
            return e
        }
        e.formatCase = i
    }(String = Utilities.String || (Utilities.String = {})), Utilities.roundNumber = roundNumber, Utilities.loadImage = loadImage, Utilities.getTileVariation = getTileVariation, Utilities.lerp = lerp, Utilities.easeInQuad = easeInQuad, Utilities.easeInCubic = easeInCubic, Utilities.isInBound2Wrapped = isInBound2Wrapped, Utilities.shuffle = shuffle;
    var Queue = function() {
        function e() {
            this.queue = new Array, this.offset = 0
        }
        return e.prototype.getLength = function() {
            return this.queue.length - this.offset
        }, e.prototype.isEmpty = function() {
            return 0 === this.queue.length
        }, e.prototype.enqueue = function(e) {
            this.queue.push(e)
        }, e.prototype.dequeue = function() {
            if (0 === this.queue.length) return null;
            var e = this.queue[this.offset];
            return 2 * ++this.offset >= this.queue.length && (this.queue = this.queue.slice(this.offset), this.offset = 0), e
        }, e
    }();
    Utilities.Queue = Queue;
    var debounces = {};
    Utilities.debounce = debounce, Utilities.windowKeysToObject = windowKeysToObject, Utilities.windowKeysToParentObject = windowKeysToParentObject
}(Utilities || (Utilities = {})), $.fn.filterByData = function(e, t) {
    return this.filter(function() {
        return $(this).data(e) === t
    })
}, $.fn.isSorting = function() {
    return this.hasClass("ui-sortable-helper")
}, $.fn.isVisible = function() {
    return this.is(":visible")
}, $.fn.quickShow = function() {
    this.hasClass("fade") ? this.addClass("fade-in").removeClass("fade-out").removeClass("hidden") : this.hasClass("loading") ? (this.addClass("show").removeClass("hide"), $(this).children("span").hide().height(), $(this).children("span").show()) : this.addClass("show").removeClass("hide")
}, $.fn.quickHide = function() {
    var e = this;
    this.hasClass("fade") ? (setTimeout(function() {
        e.addClass("hidden").removeClass("disabled")
    }, 250), this.addClass("fade-out").removeClass("fade-in").addClass("disabled")) : this.addClass("hide").removeClass("show")
}, $.fn.preload = function() {
    this.each(function() {
        $("<img/>").attr("src", this)
    })
}, $.fn.getItemType = function() {
    return parseInt(this.attr("data-item-type"), 10)
}, $.fn.getQuickSlot = function() {
    return parseInt(this.attr("data-quick-slot"), 10)
}, $.fn.getEquipSlot = function() {
    return this.attr("data-equip-slot")
}, $.ui.menu.prototype._activate = function(e) {
    var t = $.ui.menu.prototype._activate;
    return function() {
        this.active && t.apply(this, arguments)
    }
}(this), $.ui.menu.prototype._keydown = function(e) {
    var t = $.ui.menu.prototype._keydown;
    return function() {
        this.active && t.apply(this, arguments)
    }
}(this), $.ui.sortable.prototype._clear = function(e, t) {
    function i(e, t, i) {
        return function(a) {
            i._trigger(e, a, t._uiHash(t))
        }
    }
    this.reverting = !1;
    var a, n = [];
    if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {
        for (a in this._storedCSS) "auto" !== this._storedCSS[a] && "static" !== this._storedCSS[a] || (this._storedCSS[a] = "");
        this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
    } else this.currentItem.show();
    for (this.fromOutside && !t && n.push(function(e) {
        this._trigger("receive", e, this._uiHash(this.fromOutside))
    }), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || t || n.push(function(e) {
        this._trigger("update", e, this._uiHash())
    }), this !== this.currentContainer && (t || (n.push(function(e) {
        this._trigger("remove", e, this._uiHash())
    }), n.push(function(e) {
        return function(t) {
            e._trigger("receive", t, this._uiHash(this))
        }
    }.call(this, this.currentContainer)), n.push(function(e) {
        return function(t) {
            e._trigger("update", t, this._uiHash(this))
        }
    }.call(this, this.currentContainer)))), a = this.containers.length - 1; a >= 0; a--) t || n.push(i("deactivate", this, this.containers[a])), this.containers[a].containerCache.over && (n.push(i("out", this, this.containers[a])), this.containers[a].containerCache.over = 0);
    if (this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), this.storedStylesheet.remove()), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex), this.dragging = !1, t || this._trigger("beforeStop", e, this._uiHash()), this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.cancelHelperRemoval || (this.helper[0] !== this.currentItem[0] && this.helper.remove(), this.helper = null), !t) {
        for (a = 0; a < n.length; a++) n[a].call(this, e);
        this._trigger("stop", e, this._uiHash())
    }
    return this.fromOutside = !1, !this.cancelHelperRemoval
};
var messages = [],
    MessageType;
! function(e) {
    e[e.None = 0] = "None", e[e.Bad = 1] = "Bad", e[e.Good = 2] = "Good", e[e.Miss = 3] = "Miss", e[e.Attack = 4] = "Attack", e[e.Stat = 5] = "Stat", e[e.Skill = 6] = "Skill"
}(MessageType || (MessageType = {}));
var Message;
! function(e) {
    e[e.None = 0] = "None", e[e.AberrantCreatureDroppedItem = 1] = "AberrantCreatureDroppedItem", e[e.AboutHours = 2] = "AboutHours", e[e.AddedFuelToFire = 3] = "AddedFuelToFire", e[e.AddedFuelToTorch = 4] = "AddedFuelToTorch", e[e.AddFuel = 5] = "AddFuel", e[e.AddToQuickslot = 6] = "AddToQuickslot", e[e.Advanced = 7] = "Advanced", e[e.AlreadyFullyRepaired = 8] = "AlreadyFullyRepaired", e[e.AlreadyWaterInStill = 9] = "AlreadyWaterInStill", e[e.AppearsToBeDawn = 10] = "AppearsToBeDawn", e[e.AppearsToBeDusk = 11] = "AppearsToBeDusk", e[e.AppearsToBeMidDay = 12] = "AppearsToBeMidDay", e[e.AppearsToBeNight = 13] = "AppearsToBeNight", e[e.AreYouSureYouWantToSail = 14] = "AreYouSureYouWantToSail", e[e.ArmorAppearedResistant = 15] = "ArmorAppearedResistant", e[e.ArmorAppearedVulnerable = 16] = "ArmorAppearedVulnerable", e[e.ArmorProtectedFromInjuryAgainst = 17] = "ArmorProtectedFromInjuryAgainst", e[e.Attack = 18] = "Attack", e[e.AttemptedToDropAllIntoFire = 19] = "AttemptedToDropAllIntoFire", e[e.AttemptToPlaceAllOnGround = 20] = "AttemptToPlaceAllOnGround", e[e.AutomaticallySavingGame = 21] = "AutomaticallySavingGame", e[e.AwakeToFindYourself = 22] = "AwakeToFindYourself", e[e.Back = 23] = "Back", e[e.BadlyBurnedLostHealth = 24] = "BadlyBurnedLostHealth", e[e.BeenPoisoned = 25] = "BeenPoisoned", e[e.BeginSleeping = 26] = "BeginSleeping", e[e.BeginUsingRaft = 27] = "BeginUsingRaft", e[e.Belt = 28] = "Belt", e[e.BleedingHasStopped = 29] = "BleedingHasStopped", e[e.BleedingProfusely = 30] = "BleedingProfusely", e[e.BleedingToDeathLostHealth = 31] = "BleedingToDeathLostHealth", e[e.Blunt = 32] = "Blunt", e[e.BrokeIntoPieces = 33] = "BrokeIntoPieces", e[e.BrokenOnImpact = 34] = "BrokenOnImpact", e[e.BrokenWhileFiring = 35] = "BrokenWhileFiring", e[e.Build = 36] = "Build", e[e.Burned = 37] = "Burned", e[e.By = 38] = "By", e[e.ByBleedingOut = 39] = "ByBleedingOut", e[e.ByBurnInjuries = 40] = "ByBurnInjuries", e[e.ByEatingSomethingBad = 41] = "ByEatingSomethingBad", e[e.ByPoisoning = 42] = "ByPoisoning", e[e.BySteppingOnA = 43] = "BySteppingOnA", e[e.BySteppingOnTrap = 44] = "BySteppingOnTrap", e[e.ByWorkingYourselfIntoExhaustion = 45] = "ByWorkingYourselfIntoExhaustion", e[e.Cancel = 46] = "Cancel", e[e.CannotAddAnyMoreFuel = 47] = "CannotAddAnyMoreFuel", e[e.CannotBePerformedOverWater = 48] = "CannotBePerformedOverWater", e[e.CannotBePreserved = 49] = "CannotBePreserved", e[e.CannotBeReinforced = 50] = "CannotBeReinforced", e[e.CannotBeRepaired = 51] = "CannotBeRepaired", e[e.CannotBeTransmogrified = 52] = "CannotBeTransmogrified", e[e.CannotBuildHere = 53] = "CannotBuildHere", e[e.CannotDigHere = 54] = "CannotDigHere", e[e.CannotDropHere = 55] = "CannotDropHere", e[e.CannotEquipThatThere = 56] = "CannotEquipThatThere", e[e.CannotFishFor = 57] = "CannotFishFor", e[e.CannotGatherFromWhileOnFire = 58] = "CannotGatherFromWhileOnFire", e[e.CannotGatherHere = 59] = "CannotGatherHere", e[e.CannotImproveGrowingSpeed = 60] = "CannotImproveGrowingSpeed", e[e.CannotInWater = 61] = "CannotInWater", e[e.CannotPickupWhenFull = 62] = "CannotPickupWhenFull", e[e.CannotPickUpWhileLit = 63] = "CannotPickUpWhileLit", e[e.CannotPickUpWithItemsInside = 64] = "CannotPickUpWithItemsInside", e[e.CannotPlaceContainerInItself = 65] = "CannotPlaceContainerInItself", e[e.CannotPlaceHere = 66] = "CannotPlaceHere", e[e.CannotPlaceThatFromHere = 67] = "CannotPlaceThatFromHere", e[e.CannotPlaceThatHere = 68] = "CannotPlaceThatHere", e[e.CannotPlantHere = 69] = "CannotPlantHere", e[e.CannotRepairWhileLit = 70] = "CannotRepairWhileLit", e[e.CannotRestHere = 71] = "CannotRestHere", e[e.CannotSeeHere = 72] = "CannotSeeHere", e[e.CannotSleepHere = 73] = "CannotSleepHere", e[e.CannotStartFireHere = 74] = "CannotStartFireHere", e[e.CannotToTellTime = 75] = "CannotToTellTime", e[e.CarryingTooMuchWeight = 76] = "CarryingTooMuchWeight", e[e.CarvedUpCorpse = 77] = "CarvedUpCorpse", e[e.CastYourLine = 78] = "CastYourLine", e[e.Category = 79] = "Category", e[e.CaughtFish = 80] = "CaughtFish", e[e.Chest = 81] = "Chest", e[e.ClearMessages = 82] = "ClearMessages", e[e.CloseDoor = 83] = "CloseDoor", e[e.CollectObject = 84] = "CollectObject", e[e.Consumed = 85] = "Consumed", e[e.Container = 86] = "Container", e[e.Cook = 87] = "Cook", e[e.Cooked = 88] = "Cooked", e[e.Corpse = 89] = "Corpse", e[e.CorruptSaveDetected = 90] = "CorruptSaveDetected", e[e.CouldNotDecipher = 91] = "CouldNotDecipher", e[e.Craft = 92] = "Craft", e[e.Crafted = 93] = "Crafted", e[e.Crafts = 94] = "Crafts", e[e.CreatureAppears = 95] = "CreatureAppears", e[e.CreatureAppearsHealthy = 96] = "CreatureAppearsHealthy", e[e.CreatureAppearsUnhealthy = 97] = "CreatureAppearsUnhealthy", e[e.CreatureIsAtPercentHealth = 98] = "CreatureIsAtPercentHealth", e[e.CreatureLooksBarelyHurt = 99] = "CreatureLooksBarelyHurt", e[e.CreatureLooksHealthyAndUndamaged = 100] = "CreatureLooksHealthyAndUndamaged", e[e.CreatureLooksInjured = 101] = "CreatureLooksInjured", e[e.CreatureLooksSeverelyDamaged = 102] = "CreatureLooksSeverelyDamaged", e[e.CreatureSeemsHurt = 103] = "CreatureSeemsHurt", e[e.CreatureSeemsInjured = 104] = "CreatureSeemsInjured", e[e.CreatureSeemsUnimpaired = 105] = "CreatureSeemsUnimpaired", e[e.CuredYourPoison = 106] = "CuredYourPoison", e[e.Cut = 107] = "Cut", e[e.DailyChallengeMode = 108] = "DailyChallengeMode", e[e.DamageAppearedEffective = 109] = "DamageAppearedEffective", e[e.DamageAppearedIneffective = 110] = "DamageAppearedIneffective", e[e.DamagedByPouringWater = 111] = "DamagedByPouringWater", e[e.DealtNoDamageToYou = 112] = "DealtNoDamageToYou", e[e.Decay = 113] = "Decay", e[e.DefaultGameName = 114] = "DefaultGameName", e[e.DependencyIssue = 115] = "DependencyIssue", e[e.DestroyedFromUse = 116] = "DestroyedFromUse", e[e.DestroyedGrowingByPickingItUp = 117] = "DestroyedGrowingByPickingItUp", e[e.DexterityIncreasing = 118] = "DexterityIncreasing", e[e.DidNotSeemToBeHurting = 119] = "DidNotSeemToBeHurting", e[e.Disassemble = 120] = "Disassemble", e[e.DisassembleAction = 121] = "DisassembleAction", e[e.DiscoveredCaveEntrance = 122] = "DiscoveredCaveEntrance", e[e.DiscoveredInTheBottle = 123] = "DiscoveredInTheBottle", e[e.Dismantle = 124] = "Dismantle", e[e.DismantleAction = 125] = "DismantleAction", e[e.DismantleLabel = 126] = "DismantleLabel", e[e.DismantlingRequires = 127] = "DismantlingRequires", e[e.DoNotForgetToAddRequiredModsOnWorkshop = 128] = "DoNotForgetToAddRequiredModsOnWorkshop", e[e.DoNotHaveTreasureMaps = 129] = "DoNotHaveTreasureMaps", e[e.DoodadAppearsDamaged = 130] = "DoodadAppearsDamaged", e[e.DoodadAppearsOnVergeOfBreaking = 131] = "DoodadAppearsOnVergeOfBreaking", e[e.DoodadAppearsUnscathed = 132] = "DoodadAppearsUnscathed", e[e.DoodadCauseStatus = 133] = "DoodadCauseStatus", e[e.DoodadShowsSignsOfWear = 134] = "DoodadShowsSignsOfWear", e[e.DrewSurroundings = 135] = "DrewSurroundings", e[e.Drink = 136] = "Drink", e[e.Drop = 137] = "Drop", e[e.DropAll = 138] = "DropAll", e[e.DropAllOfSameQuality = 139] = "DropAllOfSameQuality", e[e.DroppedAllIntoDepths = 140] = "DroppedAllIntoDepths", e[e.DroppedIntoDepths = 141] = "DroppedIntoDepths", e[e.DroppedIntoFire = 142] = "DroppedIntoFire", e[e.DueToDehydration = 143] = "DueToDehydration", e[e.DueToStarvation = 144] = "DueToStarvation", e[e.DugTreasureOut = 145] = "DugTreasureOut", e[e.DumpContentsOfContainerInInventory = 146] = "DumpContentsOfContainerInInventory", e[e.Durability = 147] = "Durability", e[e.DyingOfDehydration = 148] = "DyingOfDehydration", e[e.EarnedMilestone = 149] = "EarnedMilestone", e[e.EquipTo = 150] = "EquipTo", e[e.ErrorHasOccured = 151] = "ErrorHasOccured", e[e.Expert = 152] = "Expert", e[e.ExtinguishedFire = 153] = "ExtinguishedFire", e[e.ExtinguishedTorch = 154] = "ExtinguishedTorch", e[e.FailedToAddFuelToTorch = 155] = "FailedToAddFuelToTorch", e[e.FailedToCatchFish = 156] = "FailedToCatchFish", e[e.FailedToCauseDamage = 157] = "FailedToCauseDamage", e[e.FailedToDrawMap = 158] = "FailedToDrawMap", e[e.FailedToPickLock = 159] = "FailedToPickLock", e[e.FailedToPlant = 160] = "FailedToPlant", e[e.FailedToPreserve = 161] = "FailedToPreserve", e[e.FailedToReinforce = 162] = "FailedToReinforce", e[e.FailedToRepair = 163] = "FailedToRepair", e[e.FailedToStartFire = 164] = "FailedToStartFire", e[e.FailedToTransmogrify = 165] = "FailedToTransmogrify", e[e.FarAwayFromTreasure = 166] = "FarAwayFromTreasure", e[e.Feet = 167] = "Feet", e[e.FeltBurningPainLostHealth = 168] = "FeltBurningPainLostHealth", e[e.FewMinutes = 169] = "FewMinutes", e[e.Filled = 170] = "Filled", e[e.FilledFrom = 171] = "FilledFrom", e[e.FinalizingWorld = 172] = "FinalizingWorld", e[e.Fire = 173] = "Fire", e[e.FireAlmostExtinguished = 174] = "FireAlmostExtinguished", e[e.FiredIntoObstacle = 175] = "FiredIntoObstacle", e[e.FireFacingYouIsWarm = 176] = "FireFacingYouIsWarm", e[e.FireIsHealthy = 177] = "FireIsHealthy", e[e.FireIsRaging = 178] = "FireIsRaging", e[e.FireIsStruggling = 179] = "FireIsStruggling", e[e.FireSource = 180] = "FireSource", e[e.FirstQuarterOfDay = 181] = "FirstQuarterOfDay", e[e.FirstQuarterOfNight = 182] = "FirstQuarterOfNight", e[e.Food = 183] = "Food", e[e.FoodAlreadyPreserved = 184] = "FoodAlreadyPreserved", e[e.FourthQuarterOfDay = 185] = "FourthQuarterOfDay", e[e.FourthQuarterOfNight = 186] = "FourthQuarterOfNight", e[e.FullyDecodedMap = 187] = "FullyDecodedMap", e[e.GainedHealth = 188] = "GainedHealth", e[e.GainedHunger = 189] = "GainedHunger", e[e.GainedStamina = 190] = "GainedStamina", e[e.GainedThirst = 191] = "GainedThirst", e[e.GameHasBeenSavedIsTakingUpMB = 192] = "GameHasBeenSavedIsTakingUpMB", e[e.Gather = 193] = "Gather", e[e.GeneratingWorld = 194] = "GeneratingWorld", e[e.GrabAll = 195] = "GrabAll", e[e.Group = 196] = "Group", e[e.Hands = 197] = "Hands", e[e.HasBeenHurtByATrap = 198] = "HasBeenHurtByATrap", e[e.HasBeenHurtByYourTrap = 199] = "HasBeenHurtByYourTrap", e[e.HasDecayed = 200] = "HasDecayed", e[e.HasHitYouForDamage = 201] = "HasHitYouForDamage", e[e.HasSplit = 202] = "HasSplit", e[e.Head = 203] = "Head", e[e.Held = 204] = "Held", e[e.Help = 205] = "Help", e[e.Hints = 206] = "Hints", e[e.HintsDisabled = 207] = "HintsDisabled", e[e.HintsEnabled = 208] = "HintsEnabled", e[e.HitForDamage = 209] = "HitForDamage", e[e.Hour = 210] = "Hour", e[e.Hours = 211] = "Hours", e[e.HowDoYouWantToExportSave = 212] = "HowDoYouWantToExportSave", e[e.HurtHandsByGatheringWithNoTool = 213] = "HurtHandsByGatheringWithNoTool", e[e.HurtHandsHittingWithoutWeapons = 214] = "HurtHandsHittingWithoutWeapons", e[e.IncompatibleVersion = 215] = "IncompatibleVersion", e[e.InExactLocationOfTreasure = 216] = "InExactLocationOfTreasure", e[e.InjuredFromTrap = 217] = "InjuredFromTrap", e[e.InNeedOfRepair = 218] = "InNeedOfRepair", e[e.Inspect = 219] = "Inspect", e[e.Intermediate = 220] = "Intermediate", e[e.Inventory = 221] = "Inventory", e[e.ItContains = 222] = "ItContains", e[e.ItsWeightCapacity = 223] = "ItsWeightCapacity", e[e.Jump = 224] = "Jump", e[e.Killed = 225] = "Killed", e[e.LabelAttackFromTactics = 226] = "LabelAttackFromTactics", e[e.LabelAuthor = 227] = "LabelAuthor", e[e.LabelBase = 228] = "LabelBase", e[e.LabelBaseAttack = 229] = "LabelBaseAttack", e[e.LabelBaseDefense = 230] = "LabelBaseDefense", e[e.LabelBluntResist = 231] = "LabelBluntResist", e[e.LabelDecay = 232] = "LabelDecay", e[e.LabelDefense = 233] = "LabelDefense", e[e.LabelDefenseFromParrying = 234] = "LabelDefenseFromParrying", e[e.LabelDoodadRequired = 235] = "LabelDoodadRequired", e[e.LabelDurability = 236] = "LabelDurability", e[e.LabelEquip = 237] = "LabelEquip", e[e.LabelFireResist = 238] = "LabelFireResist", e[e.LabelGrouping = 239] = "LabelGrouping", e[e.LabelHave = 240] = "LabelHave", e[e.LabelHp = 241] = "LabelHp", e[e.LabelLastUpdated = 242] = "LabelLastUpdated", e[e.LabelLeftHandAttack = 243] = "LabelLeftHandAttack", e[e.LabelLevel = 244] = "LabelLevel", e[e.LabelMalignityNegative = 245] = "LabelMalignityNegative", e[e.LabelMalignityPlus = 246] = "LabelMalignityPlus", e[e.LabelOnEquip = 247] = "LabelOnEquip", e[e.LabelPiercingResist = 248] = "LabelPiercingResist", e[e.LabelRange = 249] = "LabelRange", e[e.LabelRanged = 250] = "LabelRanged", e[e.LabelRangedAttack = 251] = "LabelRangedAttack", e[e.LabelRangedDamage = 252] = "LabelRangedDamage", e[e.LabelRequiredMods = 253] = "LabelRequiredMods", e[e.LabelRequires = 254] = "LabelRequires", e[e.LabelResists = 255] = "LabelResists", e[e.LabelRightHandAttack = 256] = "LabelRightHandAttack", e[e.LabelScore = 257] = "LabelScore", e[e.LabelSkill = 258] = "LabelSkill", e[e.LabelSlashingResist = 259] = "LabelSlashingResist", e[e.LabelStokeFireStrength = 260] = "LabelStokeFireStrength", e[e.LabelUse = 261] = "LabelUse", e[e.LabelUses = 262] = "LabelUses", e[e.LabelVersion = 263] = "LabelVersion", e[e.LabelVulnerabilities = 264] = "LabelVulnerabilities", e[e.LabelWeight = 265] = "LabelWeight", e[e.LabelWeightCapacity = 266] = "LabelWeightCapacity", e[e.LabelWeightReduction = 267] = "LabelWeightReduction", e[e.LastPlaceYouLeftOff = 268] = "LastPlaceYouLeftOff", e[e.LearnedHowToCreate = 269] = "LearnedHowToCreate", e[e.LeftHand = 270] = "LeftHand", e[e.Legs = 271] = "Legs", e[e.LikelyFailures = 272] = "LikelyFailures", e[e.LoadingMods = 273] = "LoadingMods", e[e.LoadingSprites = 274] = "LoadingSprites", e[e.LoadingWorld = 275] = "LoadingWorld", e[e.LocalFile = 276] = "LocalFile", e[e.LocalVersionOfModDetected = 277] = "LocalVersionOfModDetected", e[e.LoseBonesLayBleaching = 278] = "LoseBonesLayBleaching", e[e.LoseEndIsBeginning = 279] = "LoseEndIsBeginning", e[e.LoseSadlyNoTrace = 280] = "LoseSadlyNoTrace", e[e.LostHealth = 281] = "LostHealth", e[e.LostHunger = 282] = "LostHunger", e[e.LostStamina = 283] = "LostStamina", e[e.LostThirst = 284] = "LostThirst", e[e.MapNotOfThisArea = 285] = "MapNotOfThisArea", e[e.MaterialsDestroyedDisassembly = 286] = "MaterialsDestroyedDisassembly", e[e.MaterialsDestroyedDismantle = 287] = "MaterialsDestroyedDismantle", e[e.MetabolismSlowed = 288] = "MetabolismSlowed", e[e.MilestoneIsHidden = 289] = "MilestoneIsHidden", e[e.MilestoneIsInvisible = 290] = "MilestoneIsInvisible", e[e.MissedWith = 291] = "MissedWith", e[e.MissingRequiredMods = 292] = "MissingRequiredMods", e[e.ModImportedSaveGame = 293] = "ModImportedSaveGame", e[e.ModLoadError = 294] = "ModLoadError", e[e.ModRequiresItself = 295] = "ModRequiresItself", e[e.ModWithNameAlreadyExists = 296] = "ModWithNameAlreadyExists", e[e.MonsterIdolAttractedCreature = 297] = "MonsterIdolAttractedCreature", e[e.MouseButton = 298] = "MouseButton", e[e.MoveAllOfSameQualityToInventory = 299] = "MoveAllOfSameQualityToInventory", e[e.MoveAllOfSameQualityToOpenedContainer = 300] = "MoveAllOfSameQualityToOpenedContainer", e[e.MoveAllToInventory = 301] = "MoveAllToInventory", e[e.MoveAllToOpenedContainer = 302] = "MoveAllToOpenedContainer", e[e.MoveOverTrapButDoNotSetOff = 303] = "MoveOverTrapButDoNotSetOff", e[e.MoveToInventory = 304] = "MoveToInventory", e[e.MoveToOpenedContainer = 305] = "MoveToOpenedContainer", e[e.MustCastIntoWater = 306] = "MustCastIntoWater", e[e.Mysteriously = 307] = "Mysteriously", e[e.Name = 308] = "Name", e[e.NearlyBurnedEquipmentProtectedYou = 309] = "NearlyBurnedEquipmentProtectedYou", e[e.Neck = 310] = "Neck", e[e.NeedAShovelToDigTreasure = 311] = "NeedAShovelToDigTreasure", e[e.NeedDeepWaterForRaft = 312] = "NeedDeepWaterForRaft", e[e.NeedFishingNetForTreasure = 313] = "NeedFishingNetForTreasure", e[e.NeedToBuildUpLandAround = 314] = "NeedToBuildUpLandAround", e[e.NeedToEquipToShoot = 315] = "NeedToEquipToShoot", e[e.NeedToStartTravelsOutside = 316] = "NeedToStartTravelsOutside", e[e.No = 317] = "No", e[e.NoAmmunitionForThatWeapon = 318] = "NoAmmunitionForThatWeapon", e[e.NoBlackPowderToFireWeapon = 319] = "NoBlackPowderToFireWeapon", e[e.NoFireToStokeWith = 320] = "NoFireToStokeWith", e[e.NoFishAtLocation = 321] = "NoFishAtLocation", e[e.NoFuelItemsToStartFire = 322] = "NoFuelItemsToStartFire", e[e.NoInkToDrawMap = 323] = "NoInkToDrawMap", e[e.NoKindlingToStartFire = 324] = "NoKindlingToStartFire", e[e.NoLongerFeelPainOBeingfBurned = 325] = "NoLongerFeelPainOBeingfBurned", e[e.NoMoreRoomInContainer = 326] = "NoMoreRoomInContainer", e[e.NoNeedToStokeFire = 327] = "NoNeedToStokeFire", e[e.NoRoomToDrop = 328] = "NoRoomToDrop", e[e.NotAvailable = 329] = "NotAvailable", e[e.NotEnoughFoodToTravel = 330] = "NotEnoughFoodToTravel", e[e.NotEnoughPurifiedWaterYet = 331] = "NotEnoughPurifiedWaterYet", e[e.NotEnoughStrengthToThrow = 332] = "NotEnoughStrengthToThrow", e[e.NotEnoughTreasureToReturn = 333] = "NotEnoughTreasureToReturn", e[e.NotFacingLockedObject = 334] = "NotFacingLockedObject", e[e.NotFacingValidFoodForPreservation = 335] = "NotFacingValidFoodForPreservation", e[e.NotFacingValidItemForReinforcement = 336] = "NotFacingValidItemForReinforcement", e[e.NotFacingValidItemForRepair = 337] = "NotFacingValidItemForRepair", e[e.NotFacingValidItemToTransmogrify = 338] = "NotFacingValidItemToTransmogrify", e[e.NothingHereToCarve = 339] = "NothingHereToCarve", e[e.NothingHereToFill = 340] = "NothingHereToFill", e[e.NothingHereToGardenWith = 341] = "NothingHereToGardenWith", e[e.NoTinderToStartFire = 342] = "NoTinderToStartFire", e[e.NotInRangeOfTreasure = 343] = "NotInRangeOfTreasure", e[e.NoWaterInStill = 344] = "NoWaterInStill", e[e.NoWhereNearTreasure = 345] = "NoWhereNearTreasure", e[e.NumberEight = 346] = "NumberEight", e[e.NumberFive = 347] = "NumberFive", e[e.NumberFour = 348] = "NumberFour",
        e[e.NumberNine = 349] = "NumberNine", e[e.NumberOne = 350] = "NumberOne", e[e.NumberSeven = 351] = "NumberSeven", e[e.NumberSix = 352] = "NumberSix", e[e.NumberTen = 353] = "NumberTen", e[e.NumberThree = 354] = "NumberThree", e[e.NumberTwo = 355] = "NumberTwo", e[e.ObjectIsLocked = 356] = "ObjectIsLocked", e[e.Ok = 357] = "Ok", e[e.OpenDoor = 358] = "OpenDoor", e[e.OpenFolderFailed = 359] = "OpenFolderFailed", e[e.OverEatingLostStamina = 360] = "OverEatingLostStamina", e[e.OverHydratingLostStamina = 361] = "OverHydratingLostStamina", e[e.PaperTurnedToMush = 362] = "PaperTurnedToMush", e[e.PartiallyDecodedMap = 363] = "PartiallyDecodedMap", e[e.PastExperiencesProvideBenefits = 364] = "PastExperiencesProvideBenefits", e[e.PenultimateAnd = 365] = "PenultimateAnd", e[e.PickupItem = 366] = "PickupItem", e[e.Piercing = 367] = "Piercing", e[e.Place = 368] = "Place", e[e.PlacedOnGround = 369] = "PlacedOnGround", e[e.Plant = 370] = "Plant", e[e.PlantedInGround = 371] = "PlantedInGround", e[e.PlantIsFertile = 372] = "PlantIsFertile", e[e.PlantIsNotFertile = 373] = "PlantIsNotFertile", e[e.PlantVeryHealthy = 374] = "PlantVeryHealthy", e[e.Poisoned = 375] = "Poisoned", e[e.PoisonedLostHealth = 376] = "PoisonedLostHealth", e[e.PoisonWorkedItsCourse = 377] = "PoisonWorkedItsCourse", e[e.PouredOutWater = 378] = "PouredOutWater", e[e.PouredOutWaterOnYourself = 379] = "PouredOutWaterOnYourself", e[e.PouredWaterIntoStill = 380] = "PouredWaterIntoStill", e[e.PreservedFood = 381] = "PreservedFood", e[e.PublishingMod = 382] = "PublishingMod", e[e.PurifiedWaterInStill = 383] = "PurifiedWaterInStill", e[e.Quality = 384] = "Quality", e[e.Recent = 385] = "Recent", e[e.RefreshingMods = 386] = "RefreshingMods", e[e.Reinforce = 387] = "Reinforce", e[e.RemovedBlood = 388] = "RemovedBlood", e[e.RemoveFromQuickslot = 389] = "RemoveFromQuickslot", e[e.Repair = 390] = "Repair", e[e.RequiredForDisassembly = 391] = "RequiredForDisassembly", e[e.RequiredModsMissingWantToContinue = 392] = "RequiredModsMissingWantToContinue", e[e.RequiredModsNotLoaded = 393] = "RequiredModsNotLoaded", e[e.RequiresFacingFireSource = 394] = "RequiresFacingFireSource", e[e.RequiresFireToBeLit = 395] = "RequiresFireToBeLit", e[e.RequiresYouToBeFacingTo = 396] = "RequiresYouToBeFacingTo", e[e.Rest = 397] = "Rest", e[e.Rested = 398] = "Rested", e[e.Resting = 399] = "Resting", e[e.RestInterrupted = 400] = "RestInterrupted", e[e.ReturnedToCivilization = 401] = "ReturnedToCivilization", e[e.ReturningToCivilizationSetOffAgain = 402] = "ReturningToCivilizationSetOffAgain", e[e.ReturnsToLife = 403] = "ReturnsToLife", e[e.ReturnToTitleScreenNoSaveInDailyChallenge = 404] = "ReturnToTitleScreenNoSaveInDailyChallenge", e[e.ReturnToTitleScreenProgressWillBeSaved = 405] = "ReturnToTitleScreenProgressWillBeSaved", e[e.RightHand = 406] = "RightHand", e[e.SailedToCivilization = 407] = "SailedToCivilization", e[e.SavingGame = 408] = "SavingGame", e[e.Score = 409] = "Score", e[e.ScrollProvidedNoUsefulInsight = 410] = "ScrollProvidedNoUsefulInsight", e[e.SeaweedFromWater = 411] = "SeaweedFromWater", e[e.SecondQuarterOfDay = 412] = "SecondQuarterOfDay", e[e.SecondQuarterOfNight = 413] = "SecondQuarterOfNight", e[e.SeeGrowing = 414] = "SeeGrowing", e[e.SeemsToHaveDrawnEnergy = 415] = "SeemsToHaveDrawnEnergy", e[e.SetTrapOffButNoDamage = 416] = "SetTrapOffButNoDamage", e[e.SetUp = 417] = "SetUp", e[e.ShadowInTheWater = 418] = "ShadowInTheWater", e[e.Simple = 419] = "Simple", e[e.Skill = 420] = "Skill", e[e.SkillHasRaised = 421] = "SkillHasRaised", e[e.Slashing = 422] = "Slashing", e[e.Sleeping = 423] = "Sleeping", e[e.SleepInterrupted = 424] = "SleepInterrupted", e[e.Slept = 425] = "Slept", e[e.Soil = 426] = "Soil", e[e.SoilWouldHaveNoEffect = 427] = "SoilWouldHaveNoEffect", e[e.SomethingInTheWayOfCarving = 428] = "SomethingInTheWayOfCarving", e[e.SomethingInTheWayOfDigging = 429] = "SomethingInTheWayOfDigging", e[e.SomethingInTheWayOfDiggingCarveFirst = 430] = "SomethingInTheWayOfDiggingCarveFirst", e[e.SomethingInTheWayOfFishing = 431] = "SomethingInTheWayOfFishing", e[e.SomethingInTheWayOfGatheringCarveFirst = 432] = "SomethingInTheWayOfGatheringCarveFirst", e[e.SomethingInTheWayOfPerforming = 433] = "SomethingInTheWayOfPerforming", e[e.SomethingInTheWayOfPlacing = 434] = "SomethingInTheWayOfPlacing", e[e.SomethingInWayOfClosingDoor = 435] = "SomethingInWayOfClosingDoor", e[e.SoothedYourBurnInjuries = 436] = "SoothedYourBurnInjuries", e[e.Sort = 437] = "Sort", e[e.SortedByCategory = 438] = "SortedByCategory", e[e.SortedByDecay = 439] = "SortedByDecay", e[e.SortedByDurability = 440] = "SortedByDurability", e[e.SortedByGroup = 441] = "SortedByGroup", e[e.SortedByName = 442] = "SortedByName", e[e.SortedByQuality = 443] = "SortedByQuality", e[e.SortedByRecent = 444] = "SortedByRecent", e[e.SortedBySkill = 445] = "SortedBySkill", e[e.SortedByWeight = 446] = "SortedByWeight", e[e.StaminaIsFull = 447] = "StaminaIsFull", e[e.StartedFire = 448] = "StartedFire", e[e.StartTravelInWater = 449] = "StartTravelInWater", e[e.StarvingToDeath = 450] = "StarvingToDeath", e[e.SteamWorkshop = 451] = "SteamWorkshop", e[e.SteppingOnHasInjuredYouForDamage = 452] = "SteppingOnHasInjuredYouForDamage", e[e.StillHasNoWaterToPurify = 453] = "StillHasNoWaterToPurify", e[e.StirredUpClawWorm = 454] = "StirredUpClawWorm", e[e.StirredUpCreature = 455] = "StirredUpCreature", e[e.StoppedYourBleeding = 456] = "StoppedYourBleeding", e[e.StopUsingRaft = 457] = "StopUsingRaft", e[e.StrengthIncreasing = 458] = "StrengthIncreasing", e[e.SummonedGuardiansByDiggingTreasure = 459] = "SummonedGuardiansByDiggingTreasure", e[e.SunIsRising = 460] = "SunIsRising", e[e.SunIsSetting = 461] = "SunIsSetting", e[e.SunNotBrightEnoughToStartFire = 462] = "SunNotBrightEnoughToStartFire", e[e.TeleportBlocked = 463] = "TeleportBlocked", e[e.Teleported = 464] = "Teleported", e[e.ThereIsNoSunToStartFire = 465] = "ThereIsNoSunToStartFire", e[e.ThirdQuarterOfDay = 466] = "ThirdQuarterOfDay", e[e.ThirdQuarterOfNight = 467] = "ThirdQuarterOfNight", e[e.Throw = 468] = "Throw", e[e.ThrownIntoDepths = 469] = "ThrownIntoDepths", e[e.ThrownIntoObstacle = 470] = "ThrownIntoObstacle", e[e.TooDamaged = 471] = "TooDamaged", e[e.TooExhaustedToJump = 472] = "TooExhaustedToJump", e[e.ToolAppearedEffectiveForGathering = 473] = "ToolAppearedEffectiveForGathering", e[e.TrampledFire = 474] = "TrampledFire", e[e.TrampledIntoGround = 475] = "TrampledIntoGround", e[e.TrampleIntoGround = 476] = "TrampleIntoGround", e[e.Trampling = 477] = "Trampling", e[e.Transmogrified = 478] = "Transmogrified", e[e.TravelAway = 479] = "TravelAway", e[e.TravelToFarOffLands = 480] = "TravelToFarOffLands", e[e.TreasureIsBlocked = 481] = "TreasureIsBlocked", e[e.True = 482] = "True", e[e.UnableToImportSave = 483] = "UnableToImportSave", e[e.UnableToLoadRequiredMods = 484] = "UnableToLoadRequiredMods", e[e.UnEquip = 485] = "UnEquip", e[e.Unknown = 486] = "Unknown", e[e.UnknownItem = 487] = "UnknownItem", e[e.UnlockedChest = 488] = "UnlockedChest", e[e.UnpurifiedWaterInStill = 489] = "UnpurifiedWaterInStill", e[e.UpdatingMod = 490] = "UpdatingMod", e[e.URLHasOpenedInWebBrowser = 491] = "URLHasOpenedInWebBrowser", e[e.UsedSoilToIncreaseFertility = 492] = "UsedSoilToIncreaseFertility", e[e.UsedToSpeedUpGrowing = 493] = "UsedToSpeedUpGrowing", e[e.UsingBareFistsToFight = 494] = "UsingBareFistsToFight", e[e.UsingBareHandsToGather = 495] = "UsingBareHandsToGather", e[e.WaitUntilFireCooledToGetWater = 496] = "WaitUntilFireCooledToGetWater", e[e.WalkingDistanceOfTreasure = 497] = "WalkingDistanceOfTreasure", e[e.WantToDeleteAllSavedData = 498] = "WantToDeleteAllSavedData", e[e.WantToDeleteThisGame = 499] = "WantToDeleteThisGame", e[e.WantToPublishThisMod = 500] = "WantToPublishThisMod", e[e.WantToPublishUpdateToMod = 501] = "WantToPublishUpdateToMod", e[e.WantToUninstallThisMod = 502] = "WantToUninstallThisMod", e[e.Water = 503] = "Water", e[e.WaterDoesNotNeedDesalination = 504] = "WaterDoesNotNeedDesalination", e[e.WaterIncreaseFertilityOfPlant = 505] = "WaterIncreaseFertilityOfPlant", e[e.WaterPutOutFire = 506] = "WaterPutOutFire", e[e.WaterWouldHaveNoEffect = 507] = "WaterWouldHaveNoEffect", e[e.Weight = 508] = "Weight", e[e.WeightCapacity = 509] = "WeightCapacity", e[e.WelcomeToWayward21 = 510] = "WelcomeToWayward21", e[e.WinFindWayBackToCivilization = 511] = "WinFindWayBackToCivilization", e[e.WinSailBackWithRiches = 512] = "WinSailBackWithRiches", e[e.WinTravelledBackToCivilization = 513] = "WinTravelledBackToCivilization", e[e.With = 514] = "With", e[e.WorkingYourselfIntoExhaustion = 515] = "WorkingYourselfIntoExhaustion", e[e.WorkshopHasBeenOpenedPressOkAfter = 516] = "WorkshopHasBeenOpenedPressOkAfter", e[e.Yes = 517] = "Yes", e[e.YouAte = 518] = "YouAte", e[e.YouBeginResting = 519] = "YouBeginResting", e[e.YouCollected = 520] = "YouCollected", e[e.YouCrafted = 521] = "YouCrafted", e[e.YouDied = 522] = "YouDied", e[e.YouDisassembled = 523] = "YouDisassembled", e[e.YouDismantled = 524] = "YouDismantled", e[e.YouDrank = 525] = "YouDrank", e[e.YouEquip = 526] = "YouEquip", e[e.YouFailedTo = 527] = "YouFailedTo", e[e.YouFailedToHeal = 528] = "YouFailedToHeal", e[e.YouFire = 529] = "YouFire", e[e.YouGathered = 530] = "YouGathered", e[e.YouHaveKilled = 531] = "YouHaveKilled", e[e.YouOpen = 532] = "YouOpen", e[e.YouPickedUp = 533] = "YouPickedUp", e[e.YouRepair = 534] = "YouRepair", e[e.YourFist = 535] = "YourFist", e[e.YouSalvaged = 536] = "YouSalvaged", e[e.YouSee = 537] = "YouSee", e[e.YouSeparate = 538] = "YouSeparate", e[e.YouThrew = 539] = "YouThrew", e[e.YouUnequip = 540] = "YouUnequip", e[e.YouUsed = 541] = "YouUsed"
}(Message || (Message = {})), Utilities.Enums.setup(Message, 800, 1200), messages[Message.None] = "";
var Z_MIN = 0,
    Z_CAVE = 0,
    Z_NORMAL = 1,
    Z_MAX = 1,
    Source;
! function(e) {
    e[e.Actions = 0] = "Actions", e[e.Audio = 1] = "Audio", e[e.Game = 2] = "Game", e[e.Item = 3] = "Item", e[e.Languages = 4] = "Languages", e[e.MapGen = 5] = "MapGen", e[e.Mods = 6] = "Mods", e[e.ResourceLoader = 7] = "ResourceLoader", e[e.SaveLoad = 8] = "SaveLoad", e[e.Shaders = 9] = "Shaders", e[e.Steamworks = 10] = "Steamworks", e[e.Ui = 11] = "Ui", e[e.Utilities = 12] = "Utilities"
}(Source || (Source = {}));
var AttackType;
! function(e) {
    e[e.Melee = 0] = "Melee", e[e.HandToHand = 1] = "HandToHand", e[e.Shoot = 2] = "Shoot", e[e.Sling = 3] = "Sling", e[e.Fire = 4] = "Fire", e[e.ThrowItem = 5] = "ThrowItem"
}(AttackType || (AttackType = {}));
var InspectType;
! function(e) {
    e[e.None = 0] = "None", e[e.Tile = 1] = "Tile", e[e.Doodad = 2] = "Doodad", e[e.Monster = 3] = "Monster", e[e.Items = 4] = "Items"
}(InspectType || (InspectType = {}));
var DamageType;
! function(e) {
    e[e.Blunt = 1] = "Blunt", e[e.Slashing = 2] = "Slashing", e[e.Piercing = 4] = "Piercing", e[e.Fire = 8] = "Fire", e[e.True = 16] = "True", e[e.Last = 32] = "Last"
}(DamageType || (DamageType = {}));
var Resistances = function() {
        function e() {
            for (var e = [], t = 0; t < arguments.length; t++) e[t - 0] = arguments[t];
            for (var i = 0; i < e.length; i += 2) this[e[i]] = e[i + 1]
        }
        return e
    }(),
    Vulnerabilities = function() {
        function e() {
            for (var e = [], t = 0; t < arguments.length; t++) e[t - 0] = arguments[t];
            for (var i = 0; i < e.length; i += 2) this[e[i]] = e[i + 1]
        }
        return e
    }(),
    Defense = function() {
        function e(e, t, i) {
            this.base = e, this.resist = t, this.vulnerable = i
        }
        return e
    }(),
    DoorOrientation;
! function(e) {
    e[e.Default = 0] = "Default", e[e.Vertical = 1] = "Vertical"
}(DoorOrientation || (DoorOrientation = {}));
var FacingDirection;
! function(e) {
    e[e.None = -1] = "None", e[e.East = 0] = "East", e[e.North = 1] = "North", e[e.West = 2] = "West", e[e.South = 3] = "South"
}(FacingDirection || (FacingDirection = {}));
var Gender;
! function(e) {
    e[e.Male = 0] = "Male", e[e.Female = 1] = "Female"
}(Gender || (Gender = {}));
var SaveType;
! function(e) {
    e[e.InGame = 0] = "InGame", e[e.Quit = 1] = "Quit", e[e.BackToMainMenu = 2] = "BackToMainMenu"
}(SaveType || (SaveType = {}));
var LootGroupType;
! function(e) {
    e[e.Low = 0] = "Low", e[e.High = 1] = "High", e[e.Treasure = 2] = "Treasure", e[e.SeaTreasure = 3] = "SeaTreasure", e[e.CaveChest = 4] = "CaveChest"
}(LootGroupType || (LootGroupType = {}));
var EquipType;
! function(e) {
    e[e.None = 0] = "None", e[e.Held = 1] = "Held", e[e.Legs = 2] = "Legs", e[e.Chest = 3] = "Chest", e[e.Head = 4] = "Head", e[e.Belt = 5] = "Belt", e[e.Feet = 6] = "Feet", e[e.Neck = 7] = "Neck", e[e.Hands = 8] = "Hands", e[e.Back = 9] = "Back", e[e.LeftHand = 10] = "LeftHand", e[e.RightHand = 11] = "RightHand"
}(EquipType || (EquipType = {}));
var RecipeLevel;
! function(e) {
    e[e.Advanced = 0] = "Advanced", e[e.Simple = 1] = "Simple", e[e.Intermediate = 2] = "Intermediate", e[e.Expert = 3] = "Expert"
}(RecipeLevel || (RecipeLevel = {}));
var ActionType;
! function(e) {
    e[e.Disassemble = 0] = "Disassemble", e[e.Pickup = 1] = "Pickup", e[e.Throw = 2] = "Throw", e[e.Attack = 3] = "Attack", e[e.StartFire = 4] = "StartFire", e[e.Carve = 5] = "Carve", e[e.SetDown = 6] = "SetDown", e[e.Eat = 7] = "Eat", e[e.Drink = 8] = "Drink", e[e.Rest = 9] = "Rest", e[e.Sleep = 10] = "Sleep", e[e.Heal = 11] = "Heal", e[e.Dig = 12] = "Dig", e[e.Paddle = 13] = "Paddle", e[e.GatherWater = 14] = "GatherWater", e[e.Shoot = 15] = "Shoot", e[e.Cast = 16] = "Cast", e[e.TraverseTheSea = 17] = "TraverseTheSea", e[e.LockPick = 18] = "LockPick", e[e.Sling = 19] = "Sling", e[e.Repair = 20] = "Repair", e[e.Decode = 21] = "Decode", e[e.Read = 22] = "Read", e[e.Reinforce = 23] = "Reinforce", e[e.Gather = 24] = "Gather", e[e.StokeFire = 25] = "StokeFire", e[e.Garden = 26] = "Garden", e[e.Pour = 27] = "Pour", e[e.Plant = 28] = "Plant", e[e.GatherTreasure = 29] = "GatherTreasure", e[e.Ignite = 30] = "Ignite", e[e.Build = 31] = "Build", e[e.OpenContainer = 32] = "OpenContainer", e[e.Preserve = 33] = "Preserve", e[e.Open = 34] = "Open", e[e.DrinkCure = 35] = "DrinkCure", e[e.TellTime = 36] = "TellTime", e[e.SailToCivilization = 37] = "SailToCivilization", e[e.Transmogrify = 38] = "Transmogrify", e[e.Fire = 39] = "Fire", e[e.Teleport = 40] = "Teleport", e[e.Extinguish = 41] = "Extinguish", e[e.DrawMap = 42] = "DrawMap", e[e.Dismantle = 43] = "Dismantle", e[e.PourOnYourself = 44] = "PourOnYourself", e[e.Squeeze = 45] = "Squeeze"
}(ActionType || (ActionType = {})), Utilities.Enums.setup(ActionType, 100, 200);
var ItemType;
! function(e) {
    e[e.None = 0] = "None", e[e.Amber = 1] = "Amber", e[e.AnimalSkull = 2] = "AnimalSkull", e[e.Arrow = 3] = "Arrow", e[e.StoneArrowhead = 4] = "StoneArrowhead", e[e.PileOfAsh = 5] = "PileOfAsh", e[e.BarkLeggings = 6] = "BarkLeggings", e[e.BarkShield = 7] = "BarkShield", e[e.BarkTunic = 8] = "BarkTunic", e[e.Bone = 9] = "Bone", e[e.Branch = 10] = "Branch", e[e.CactusSpines = 11] = "CactusSpines", e[e.Charcoal = 12] = "Charcoal", e[e.CobblestoneFlooring = 13] = "CobblestoneFlooring", e[e.CookedMeat = 14] = "CookedMeat", e[e.Earthworm = 15] = "Earthworm", e[e.Feather = 16] = "Feather", e[e.FertileSoil = 17] = "FertileSoil", e[e.WaterskinOfSeawater = 18] = "WaterskinOfSeawater", e[e.FirePlough = 19] = "FirePlough", e[e.FlowerSeeds = 20] = "FlowerSeeds", e[e.Fossil = 21] = "Fossil", e[e.GoldCoins = 22] = "GoldCoins", e[e.GoldenChalice = 23] = "GoldenChalice", e[e.GoldenRing = 24] = "GoldenRing", e[e.GoldenSword = 25] = "GoldenSword", e[e.GrassSeeds = 26] = "GrassSeeds", e[e.IronOre = 27] = "IronOre", e[e.Kindling = 28] = "Kindling", e[e.LargeRock = 29] = "LargeRock", e[e.LeafBedroll = 30] = "LeafBedroll", e[e.LeatherHide = 31] = "LeatherHide", e[e.Leaves = 32] = "Leaves", e[e.Limestone = 33] = "Limestone", e[e.Log = 34] = "Log", e[e.MortarAndPestle = 35] = "MortarAndPestle", e[e.WhiteMushrooms = 36] = "WhiteMushrooms", e[e.Nopal = 37] = "Nopal", e[e.Peat = 38] = "Peat", e[e.Sandstone = 39] = "Sandstone", e[e.PileOfGravel = 40] = "PileOfGravel", e[e.PileOfSand = 41] = "PileOfSand", e[e.WoodenArrow = 42] = "WoodenArrow", e[e.StoneAxe = 43] = "StoneAxe", e[e.Bandage = 44] = "Bandage", e[e.WovenFabric = 45] = "WovenFabric", e[e.CactusNeedle = 46] = "CactusNeedle", e[e.StoneShovel = 47] = "StoneShovel", e[e.WoodenSpear = 48] = "WoodenSpear", e[e.Suture = 49] = "Suture", e[e.Raft = 50] = "Raft", e[e.RawMeat = 51] = "RawMeat", e[e.RedBerries = 52] = "RedBerries", e[e.SpottedRedMushroom = 53] = "SpottedRedMushroom", e[e.Rope = 54] = "Rope", e[e.Sapling = 55] = "Sapling", e[e.Seaweed = 56] = "Seaweed", e[e.SharpGlass = 57] = "SharpGlass", e[e.SharpRock = 58] = "SharpRock", e[e.Skullcap = 59] = "Skullcap", e[e.SmoothRock = 60] = "SmoothRock", e[e.Soil = 61] = "Soil", e[e.StoneSpear = 62] = "StoneSpear", e[e.Stones = 63] = "Stones", e[e.StoneWall = 64] = "StoneWall", e[e.String = 65] = "String", e[e.StrippedBark = 66] = "StrippedBark", e[e.TannedLeather = 67] = "TannedLeather", e[e.Tannin = 68] = "Tannin", e[e.ThistleSeeds = 69] = "ThistleSeeds", e[e.TreeBark = 70] = "TreeBark", e[e.TreeFungus = 71] = "TreeFungus", e[e.Vine = 72] = "Vine", e[e.Twigs = 73] = "Twigs", e[e.Waterskin = 74] = "Waterskin", e[e.WoodenPole = 75] = "WoodenPole", e[e.PeatBandage = 76] = "PeatBandage", e[e.Bow = 77] = "Bow", e[e.BowDrill = 78] = "BowDrill", e[e.FishingNet = 79] = "FishingNet", e[e.RawCod = 80] = "RawCod", e[e.CookedCod = 81] = "CookedCod", e[e.Campfire = 82] = "Campfire", e[e.VineWhip = 83] = "VineWhip", e[e.PileOfSnow = 84] = "PileOfSnow", e[e.BarkTorch = 85] = "BarkTorch", e[e.LitBarkTorch = 86] = "LitBarkTorch", e[e.HandDrill = 87] = "HandDrill", e[e.SmallBag = 88] = "SmallBag", e[e.Shale = 89] = "Shale", e[e.SharpenedBone = 90] = "SharpenedBone", e[e.Grindstone = 91] = "Grindstone", e[e.RawFishSteak = 92] = "RawFishSteak", e[e.CookedFishSteak = 93] = "CookedFishSteak", e[e.WaterskinOfDesalinatedWater = 94] = "WaterskinOfDesalinatedWater", e[e.BoatPaddle = 95] = "BoatPaddle", e[e.BullBoat = 96] = "BullBoat", e[e.RefinedSand = 97] = "RefinedSand", e[e.Spyglass = 98] = "Spyglass", e[e.Flask = 99] = "Flask", e[e.RawClay = 100] = "RawClay", e[e.RawClayBlowpipe = 101] = "RawClayBlowpipe", e[e.ClayBlowpipe = 102] = "ClayBlowpipe", e[e.LeatherBelt = 103] = "LeatherBelt", e[e.LeatherTunic = 104] = "LeatherTunic", e[e.LeatherBoots = 105] = "LeatherBoots", e[e.LeatherCap = 106] = "LeatherCap", e[e.LeatherGorget = 107] = "LeatherGorget", e[e.LeatherPants = 108] = "LeatherPants", e[e.LeatherGloves = 109] = "LeatherGloves", e[e.Furnace = 110] = "Furnace", e[e.Kiln = 111] = "Kiln", e[e.IronTongs = 112] = "IronTongs", e[e.Talc = 113] = "Talc", e[e.TalcumPowder = 114] = "TalcumPowder", e[e.SandCastFlask = 115] = "SandCastFlask", e[e.Lens = 116] = "Lens", e[e.PlantRoots = 117] = "PlantRoots", e[e.LockPick = 118] = "LockPick", e[e.BoneNeedle = 119] = "BoneNeedle", e[e.Pineapple = 120] = "Pineapple", e[e.TatteredMap = 121] = "TatteredMap", e[e.Coal = 122] = "Coal", e[e.WroughtIron = 123] = "WroughtIron", e[e.LimestonePowder = 124] = "LimestonePowder", e[e.IronIngot = 125] = "IronIngot", e[e.Backpack = 126] = "Backpack", e[e.RottenMeat = 127] = "RottenMeat", e[e.StoneHammer = 128] = "StoneHammer", e[e.RawChicken = 129] = "RawChicken", e[e.CookedChicken = 130] = "CookedChicken", e[e.ForgeAndAnvil = 131] = "ForgeAndAnvil", e[e.WoodenChest = 132] = "WoodenChest", e[e.IronSword = 133] = "IronSword", e[e.IronBreastplate = 134] = "IronBreastplate", e[e.IronBoots = 135] = "IronBoots", e[e.IronHelmet = 136] = "IronHelmet", e[e.IronGorget = 137] = "IronGorget", e[e.IronGreaves = 138] = "IronGreaves", e[e.IronGauntlets = 139] = "IronGauntlets", e[e.IronShield = 140] = "IronShield", e[e.SandstoneWall = 141] = "SandstoneWall", e[e.SandstoneFlooring = 142] = "SandstoneFlooring", e[e.SpiderSilk = 143] = "SpiderSilk", e[e.AnimalFat = 144] = "AnimalFat", e[e.AnimalFatTorch = 145] = "AnimalFatTorch", e[e.ClayFlakes = 146] = "ClayFlakes", e[e.GreenSand = 147] = "GreenSand", e[e.OldInstructionalScroll = 148] = "OldInstructionalScroll", e[e.SlimeGelatin = 149] = "SlimeGelatin", e[e.Glue = 150] = "Glue", e[e.CookedSpider = 151] = "CookedSpider", e[e.DeadSpider = 152] = "DeadSpider", e[e.IronLockPick = 153] = "IronLockPick", e[e.RottingVegetation = 154] = "RottingVegetation", e[e.WildOnion = 155] = "WildOnion", e[e.IronHammer = 156] = "IronHammer", e[e.IronSpear = 157] = "IronSpear", e[e.IronShovel = 158] = "IronShovel", e[e.IronDoubleAxe = 159] = "IronDoubleAxe", e[e.IronPickaxe = 160] = "IronPickaxe", e[e.Inkstick = 161] = "Inkstick", e[e.Coconut = 162] = "Coconut", e[e.PalmLeaf = 163] = "PalmLeaf", e[e.Offal = 164] = "Offal", e[e.Bones = 165] = "Bones", e[e.LitPoleTorch = 166] = "LitPoleTorch", e[e.Cotton = 167] = "Cotton", e[e.CottonSeeds = 168] = "CottonSeeds", e[e.CottonFabric = 169] = "CottonFabric", e[e.BonePole = 170] = "BonePole", e[e.Tourniquet = 171] = "Tourniquet", e[e.WroughtIronPickaxe = 172] = "WroughtIronPickaxe", e[e.WroughtIronDoubleAxe = 173] = "WroughtIronDoubleAxe", e[e.WroughtIronShovel = 174] = "WroughtIronShovel", e[e.WroughtIronSpear = 175] = "WroughtIronSpear", e[e.WroughtIronHammer = 176] = "WroughtIronHammer", e[e.WroughtIronLockPick = 177] = "WroughtIronLockPick", e[e.WroughtIronShield = 178] = "WroughtIronShield", e[e.WroughtIronGauntlets = 179] = "WroughtIronGauntlets", e[e.WroughtIronGreaves = 180] = "WroughtIronGreaves", e[e.WroughtIronGorget = 181] = "WroughtIronGorget", e[e.WroughtIronHelmet = 182] = "WroughtIronHelmet", e[e.WroughtIronBoots = 183] = "WroughtIronBoots", e[e.WroughtIronBreastPlate = 184] = "WroughtIronBreastPlate", e[e.WroughtIronSword = 185] = "WroughtIronSword", e[e.WoodenWall = 186] = "WoodenWall", e[e.WoodenFlooring = 187] = "WoodenFlooring", e[e.WoodenDoor = 188] = "WoodenDoor", e[e.FishingRod = 189] = "FishingRod", e[e.MessageInABottle = 190] = "MessageInABottle", e[e.CarbonPowder = 191] = "CarbonPowder", e[e.PileOfCompost = 192] = "PileOfCompost", e[e.MeltedAmber = 193] = "MeltedAmber", e[e.Tinder = 194] = "Tinder", e[e.Deadfall = 195] = "Deadfall", e[e.Snare = 196] = "Snare", e[e.WaterskinOfMedicinalWater = 197] = "WaterskinOfMedicinalWater", e[e.CharcoalBandage = 198] = "CharcoalBandage", e[e.WoodenTongs = 199] = "WoodenTongs", e[e.WroughtIronTongs = 200] = "WroughtIronTongs", e[e.SheetOfGlass = 201] = "SheetOfGlass", e[e.SolarStill = 202] = "SolarStill", e[e.StoneWaterStill = 203] = "StoneWaterStill", e[e.Sundial = 204] = "Sundial", e[e.LitAnimalFatTorch = 205] = "LitAnimalFatTorch", e[e.Sinew = 206] = "Sinew", e[e.ShortBow = 207] = "ShortBow", e[e.LongBow = 208] = "LongBow", e[e.CompositeBow = 209] = "CompositeBow", e[e.WaterskinOfPurifiedFreshWater = 210] = "WaterskinOfPurifiedFreshWater", e[e.WaterskinOfUnpurifiedFreshWater = 211] = "WaterskinOfUnpurifiedFreshWater", e[e.GlassBottle = 212] = "GlassBottle", e[e.Cork = 213] = "Cork", e[e.GlassBottleOfSeawater = 214] = "GlassBottleOfSeawater", e[e.GlassBottleOfDesalinatedWater = 215] = "GlassBottleOfDesalinatedWater", e[e.GlassBottleOfMedicinalWater = 216] = "GlassBottleOfMedicinalWater", e[e.GlassBottleOfPurifiedFreshWater = 217] = "GlassBottleOfPurifiedFreshWater", e[e.GlassBottleOfUnpurifiedFreshWater = 218] = "GlassBottleOfUnpurifiedFreshWater", e[e.WroughtIronArrow = 219] = "WroughtIronArrow", e[e.IronArrow = 220] = "IronArrow", e[e.StoneBullet = 221] = "StoneBullet", e[e.WroughtIronBullet = 222] = "WroughtIronBullet", e[e.IronBullet = 223] = "IronBullet", e[e.LeatherQuiver = 224] = "LeatherQuiver", e[e.Ectoplasm = 225] = "Ectoplasm", e[e.MagicalEssence = 226] = "MagicalEssence", e[e.WoodenFence = 227] = "WoodenFence", e[e.MonsterIdol = 228] = "MonsterIdol", e[e.CordedSling = 229] = "CordedSling", e[e.LeatherSling = 230] = "LeatherSling", e[e.WroughtIronArrowhead = 231] = "WroughtIronArrowhead", e[e.IronArrowhead = 232] = "IronArrowhead", e[e.Hammock = 233] = "Hammock", e[e.CottonBedroll = 234] = "CottonBedroll", e[e.FeatherBedroll = 235] = "FeatherBedroll", e[e.RawTaintedMeat = 236] = "RawTaintedMeat", e[e.CookedTaintedMeat = 237] = "CookedTaintedMeat", e[e.StoneKnife = 238] = "StoneKnife", e[e.RawBlindfish = 239] = "RawBlindfish", e[e.CookedBlindfish = 240] = "CookedBlindfish", e[e.Pemmican = 241] = "Pemmican", e[e.PreparedPemmican = 242] = "PreparedPemmican", e[e.Sail = 243] = "Sail", e[e.Sailboat = 244] = "Sailboat", e[e.Egg = 245] = "Egg", e[e.BoiledEgg = 246] = "BoiledEgg", e[e.GrassBlades = 247] = "GrassBlades", e[e.Niter = 248] = "Niter", e[e.Saltpeter = 249] = "Saltpeter", e[e.BlackPowder = 250] = "BlackPowder", e[e.FlintlockPistol = 251] = "FlintlockPistol", e[e.Giblets = 252] = "Giblets", e[e.ExplosiveTrap = 253] = "ExplosiveTrap", e[e.SkeletalMageWand = 254] = "SkeletalMageWand", e[e.RawClayJug = 255] = "RawClayJug", e[e.ClayJug = 256] = "ClayJug", e[e.ClayJugOfSeawater = 257] = "ClayJugOfSeawater", e[e.ClayJugOfDesalinatedWater = 258] = "ClayJugOfDesalinatedWater", e[e.ClayJugOfMedicinalWater = 259] = "ClayJugOfMedicinalWater", e[e.ClayJugOfPurifiedFreshWater = 260] = "ClayJugOfPurifiedFreshWater", e[e.ClayJugOfUnpurifiedFreshWater = 261] = "ClayJugOfUnpurifiedFreshWater", e[e.RawClayBrick = 262] = "RawClayBrick", e[e.ClayBrick = 263] = "ClayBrick", e[e.ClayBrickWall = 264] = "ClayBrickWall", e[e.ClayBrickFlooring = 265] = "ClayBrickFlooring", e[e.PineappleSeeds = 266] = "PineappleSeeds", e[e.BerrySeeds = 267] = "BerrySeeds", e[e.CactiSeeds = 268] = "CactiSeeds", e[e.VineSeeds = 269] = "VineSeeds", e[e.PaperSheet = 270] = "PaperSheet", e[e.PaperMold = 271] = "PaperMold", e[e.FlowerPetals = 272] = "FlowerPetals", e[e.Thistles = 273] = "Thistles", e[e.DrawnMap = 274] = "DrawnMap", e[e.TatteredShirt = 275] = "TatteredShirt", e[e.TatteredPants = 276] = "TatteredPants", e[e.WoodenGate = 277] = "WoodenGate", e[e.PoisonIvyLeaves = 278] = "PoisonIvyLeaves", e[e.PoisonIvySeeds = 279] = "PoisonIvySeeds", e[e.WroughtIronChest = 280] = "WroughtIronChest", e[e.IronChest = 281] = "IronChest", e[e.TallGrassSeeds = 282] = "TallGrassSeeds", e[e.Acorn = 283] = "Acorn", e[e.SpiderEggs = 284] = "SpiderEggs", e[e.TailFeathers = 285] = "TailFeathers", e[e.BigRedBerry = 286] = "BigRedBerry", e[e.VenomGland = 287] = "VenomGland", e[e.OrnateWoodenChest = 288] = "OrnateWoodenChest", e[e.RollOfRedCarpet = 289] = "RollOfRedCarpet", e[e.OrnateCape = 290] = "OrnateCape", e[e.FireBladder = 291] = "FireBladder", e[e.GoldenKey = 292] = "GoldenKey"
}(ItemType || (ItemType = {})), Utilities.Enums.setup(ItemType, 600, 800);
var ItemTypeGroup;
! function(e) {
    e[e.Invalid = 800] = "Invalid", e[e.Sharpened = 801] = "Sharpened", e[e.Carbon = 802] = "Carbon", e[e.Arrow = 803] = "Arrow", e[e.Skewer = 804] = "Skewer", e[e.Bone = 805] = "Bone", e[e.Fuel = 806] = "Fuel", e[e.Medicinal = 807] = "Medicinal", e[e.Meat = 808] = "Meat", e[e.Food = 809] = "Food", e[e.Insect = 810] = "Insect", e[e.Water = 811] = "Water", e[e.Treasure = 812] = "Treasure", e[e.Rock = 813] = "Rock", e[e.Compost = 814] = "Compost", e[e.Fabric = 815] = "Fabric", e[e.Needle = 816] = "Needle", e[e.Cordage = 817] = "Cordage", e[e.SharpenedRock = 818] = "SharpenedRock", e[e.Container = 819] = "Container", e[e.Pole = 820] = "Pole", e[e.LightSource = 821] = "LightSource", e[e.Repair = 822] = "Repair", e[e.Tongs = 823] = "Tongs", e[e.Hammer = 824] = "Hammer", e[e.Preservative = 825] = "Preservative", e[e.Reinforce = 826] = "Reinforce", e[e.GlassBottleOfPotableWater = 827] = "GlassBottleOfPotableWater", e[e.Bullet = 828] = "Bullet", e[e.Transmogrify = 829] = "Transmogrify", e[e.WaterskinOfPotableWater = 830] = "WaterskinOfPotableWater", e[e.Pulp = 831] = "Pulp", e[e.ClayJugOfPotableWater = 832] = "ClayJugOfPotableWater", e[e.Powder = 833] = "Powder", e[e.Equipment = 834] = "Equipment", e[e.Gardening = 835] = "Gardening", e[e.Firemaking = 836] = "Firemaking", e[e.Bedding = 837] = "Bedding", e[e.Tool = 838] = "Tool", e[e.Weapon = 839] = "Weapon", e[e.Health = 840] = "Health", e[e.Travel = 841] = "Travel", e[e.Housing = 842] = "Housing", e[e.Heating = 843] = "Heating", e[e.Storage = 844] = "Storage", e[e.Trap = 845] = "Trap", e[e.Other = 846] = "Other", e[e.RawMeat = 847] = "RawMeat", e[e.CookedMeat = 848] = "CookedMeat", e[e.ContainerOfSeawater = 849] = "ContainerOfSeawater", e[e.ContainerOfDesalinatedWater = 850] = "ContainerOfDesalinatedWater", e[e.ContainerOfMedicinalWater = 851] = "ContainerOfMedicinalWater", e[e.ContainerOfPurifiedFreshWater = 852] = "ContainerOfPurifiedFreshWater", e[e.ContainerOfUnpurifiedFreshWater = 853] = "ContainerOfUnpurifiedFreshWater", e[e.Last = 854] = "Last"
}(ItemTypeGroup || (ItemTypeGroup = {})), Utilities.Enums.setup(ItemTypeGroup, 1e3, 1100);
var TerrainType;
! function(e) {
    e[e.DeepSeawater = 0] = "DeepSeawater", e[e.Seawater = 1] = "Seawater", e[e.ShallowSeawater = 2] = "ShallowSeawater", e[e.DeepFreshWater = 3] = "DeepFreshWater", e[e.FreshWater = 4] = "FreshWater", e[e.ShallowFreshWater = 5] = "ShallowFreshWater", e[e.Grass = 6] = "Grass", e[e.Tree = 7] = "Tree", e[e.BareTree = 8] = "BareTree", e[e.TreeWithVines = 9] = "TreeWithVines", e[e.TreeWithBerries = 10] = "TreeWithBerries", e[e.TreeWithFungus = 11] = "TreeWithFungus", e[e.PalmTree = 12] = "PalmTree", e[e.BarePalmTree = 13] = "BarePalmTree", e[e.PalmTreeWithCoconuts = 14] = "PalmTreeWithCoconuts", e[e.Gravel = 15] = "Gravel", e[e.Dirt = 16] = "Dirt", e[e.Sand = 17] = "Sand", e[e.Snow = 18] = "Snow", e[e.Swamp = 19] = "Swamp", e[e.Clay = 20] = "Clay", e[e.Ash = 21] = "Ash", e[e.Rocks = 22] = "Rocks", e[e.RocksWithIron = 23] = "RocksWithIron", e[e.RocksWithTalc = 24] = "RocksWithTalc", e[e.RocksWithCoal = 25] = "RocksWithCoal", e[e.RocksWithLimestone = 26] = "RocksWithLimestone", e[e.CobblestoneFlooring = 27] = "CobblestoneFlooring", e[e.Sandstone = 28] = "Sandstone", e[e.SandstoneFlooring = 29] = "SandstoneFlooring", e[e.SandstoneWithIron = 30] = "SandstoneWithIron", e[e.SandstoneWithNiter = 31] = "SandstoneWithNiter", e[e.WoodenFlooring = 32] = "WoodenFlooring", e[e.ClayBrickFlooring = 33] = "ClayBrickFlooring", e[e.CaveEntrance = 34] = "CaveEntrance", e[e.RedCarpet = 35] = "RedCarpet"
}(TerrainType || (TerrainType = {})), Utilities.Enums.setup(TerrainType, 50, 64);
var DoodadType;
! function(e) {
    e[e.WoodenDoor = 0] = "WoodenDoor", e[e.WoodenFence = 1] = "WoodenFence", e[e.WoodenWall = 2] = "WoodenWall", e[e.ClayBrickWall = 3] = "ClayBrickWall", e[e.SandstoneWall = 4] = "SandstoneWall", e[e.StoneWall = 5] = "StoneWall", e[e.SetExplosiveTrap = 6] = "SetExplosiveTrap", e[e.SetDeadfall = 7] = "SetDeadfall", e[e.SetSnare = 8] = "SetSnare", e[e.SetHobgoblinSnare = 9] = "SetHobgoblinSnare", e[e.SolarStill = 10] = "SolarStill", e[e.WoodenChest = 11] = "WoodenChest", e[e.LockedWoodenChest = 12] = "LockedWoodenChest", e[e.MonsterIdol = 13] = "MonsterIdol", e[e.GrowingGrass = 14] = "GrowingGrass", e[e.Vines = 15] = "Vines", e[e.Thistles = 16] = "Thistles", e[e.GrowingMushroom = 17] = "GrowingMushroom", e[e.WhiteMushrooms = 18] = "WhiteMushrooms", e[e.SpottedRedMushroom = 19] = "SpottedRedMushroom", e[e.TallGrass = 20] = "TallGrass", e[e.Seaweed = 21] = "Seaweed", e[e.WildOnion = 22] = "WildOnion", e[e.PineapplePlant = 23] = "PineapplePlant", e[e.PileOfRocks = 24] = "PileOfRocks", e[e.BerryBush = 25] = "BerryBush", e[e.YellowFlowers = 26] = "YellowFlowers", e[e.Sapling = 27] = "Sapling", e[e.GrowingPlant = 28] = "GrowingPlant", e[e.Cotton = 29] = "Cotton", e[e.Tree = 30] = "Tree", e[e.TreeWithVines = 31] = "TreeWithVines", e[e.TreeWithBerries = 32] = "TreeWithBerries", e[e.TreeWithFungus = 33] = "TreeWithFungus", e[e.BareTree = 34] = "BareTree", e[e.PalmTreeWithCoconuts = 35] = "PalmTreeWithCoconuts", e[e.PalmTree = 36] = "PalmTree", e[e.BarePalmTree = 37] = "BarePalmTree", e[e.Cacti = 38] = "Cacti", e[e.DeadBush = 39] = "DeadBush", e[e.StoneWaterStill = 40] = "StoneWaterStill", e[e.LitStoneWaterStill = 41] = "LitStoneWaterStill", e[e.Campfire = 42] = "Campfire", e[e.LitCampfire = 43] = "LitCampfire", e[e.Kiln = 44] = "Kiln", e[e.LitKiln = 45] = "LitKiln", e[e.Furnace = 46] = "Furnace", e[e.LitFurnace = 47] = "LitFurnace", e[e.TorchStand = 48] = "TorchStand", e[e.LitTorchStand = 49] = "LitTorchStand", e[e.ForgeAndAnvil = 50] = "ForgeAndAnvil", e[e.LitForgeAndAnvil = 51] = "LitForgeAndAnvil", e[e.Acid = 52] = "Acid", e[e.CaveEntrance = 53] = "CaveEntrance", e[e.WoodenDoorOpen = 54] = "WoodenDoorOpen", e[e.WoodenGate = 55] = "WoodenGate", e[e.WoodenGateOpen = 56] = "WoodenGateOpen", e[e.PoisonIvy = 57] = "PoisonIvy", e[e.WroughtIronChest = 58] = "WroughtIronChest", e[e.IronChest = 59] = "IronChest", e[e.OrnateWoodenChest = 60] = "OrnateWoodenChest"
}(DoodadType || (DoodadType = {})), Utilities.Enums.setup(DoodadType, 200, 400);
var SkillType;
! function(e) {
    e[e.Chemistry = 0] = "Chemistry", e[e.Anatomy = 1] = "Anatomy", e[e.Archery = 2] = "Archery", e[e.Blacksmithing = 3] = "Blacksmithing", e[e.Botany = 4] = "Botany", e[e.Camping = 5] = "Camping", e[e.Cartography = 6] = "Cartography", e[e.Claythrowing = 7] = "Claythrowing", e[e.Cooking = 8] = "Cooking", e[e.Fishing = 9] = "Fishing", e[e.Fletching = 10] = "Fletching", e[e.Glassblowing = 11] = "Glassblowing", e[e.Leatherworking = 12] = "Leatherworking", e[e.LockPicking = 13] = "LockPicking", e[e.Lumberjacking = 14] = "Lumberjacking", e[e.Mining = 15] = "Mining", e[e.Mycology = 16] = "Mycology", e[e.Parrying = 17] = "Parrying", e[e.Stonecrafting = 18] = "Stonecrafting", e[e.Swimming = 19] = "Swimming", e[e.Tactics = 20] = "Tactics", e[e.Tailoring = 21] = "Tailoring", e[e.Throwing = 22] = "Throwing", e[e.Tinkering = 23] = "Tinkering", e[e.Trapping = 24] = "Trapping", e[e.Woodworking = 25] = "Woodworking"
}(SkillType || (SkillType = {}));
var SfxType;
! function(e) {
    e[e.Bow = 0] = "Bow", e[e.Craft = 1] = "Craft", e[e.Death = 2] = "Death", e[e.Eating = 3] = "Eating", e[e.Exceptional = 4] = "Exceptional", e[e.Fail = 5] = "Fail", e[e.TreeHit = 6] = "TreeHit", e[e.Hit = 7] = "Hit", e[e.Hurt = 8] = "Hurt", e[e.Miss = 9] = "Miss", e[e.MonsterHit = 10] = "MonsterHit", e[e.MonsterNoise = 11] = "MonsterNoise", e[e.PickUp = 12] = "PickUp", e[e.RockHit = 13] = "RockHit", e[e.SandstoneHit = 14] = "SandstoneHit", e[e.Swim = 15] = "Swim", e[e.Throw = 16] = "Throw", e[e.Trample = 17] = "Trample", e[e.Walk = 18] = "Walk", e[e.Water = 19] = "Water", e[e.Click = 20] = "Click", e[e.Damaged = 21] = "Damaged"
}(SfxType || (SfxType = {}));
var equipTypeToMessage = Array();
equipTypeToMessage[EquipType.Held] = Message.Held, equipTypeToMessage[EquipType.Legs] = Message.Legs, equipTypeToMessage[EquipType.Chest] = Message.Chest, equipTypeToMessage[EquipType.Head] = Message.Head, equipTypeToMessage[EquipType.Belt] = Message.Belt, equipTypeToMessage[EquipType.Feet] = Message.Feet, equipTypeToMessage[EquipType.Neck] = Message.Neck, equipTypeToMessage[EquipType.Hands] = Message.Hands, equipTypeToMessage[EquipType.Back] = Message.Back, equipTypeToMessage[EquipType.LeftHand] = Message.LeftHand, equipTypeToMessage[EquipType.RightHand] = Message.RightHand;
var recipeLevelToMessage = Array();
recipeLevelToMessage[RecipeLevel.Advanced] = Message.Advanced, recipeLevelToMessage[RecipeLevel.Simple] = Message.Simple, recipeLevelToMessage[RecipeLevel.Intermediate] = Message.Intermediate, recipeLevelToMessage[RecipeLevel.Expert] = Message.Expert;
var damageTypeToMessage = Array();
damageTypeToMessage[DamageType.Blunt] = Message.Blunt, damageTypeToMessage[DamageType.Slashing] = Message.Slashing, damageTypeToMessage[DamageType.Piercing] = Message.Piercing, damageTypeToMessage[DamageType.Fire] = Message.Fire, damageTypeToMessage[DamageType.True] = Message.True;
var PlayerState;
! function(e) {
    e[e.None = 0] = "None", e[e.Dead = 1] = "Dead", e[e.Won = 2] = "Won", e[e.Traveling = 3] = "Traveling"
}(PlayerState || (PlayerState = {}));
var ObjectContext;
! function(e) {
    e[e.None = 0] = "None", e[e.Inventory = 1] = "Inventory", e[e.TileItem = 2] = "TileItem", e[e.Doodad = 3] = "Doodad", e[e.TileEvent = 4] = "TileEvent", e[e.Corpse = 5] = "Corpse"
}(ObjectContext || (ObjectContext = {}));
var Delay;
! function(e) {
    e[e.None = 0] = "None", e[e.LongPause = 25] = "LongPause", e[e.Movement = 11] = "Movement", e[e.ShortPause = 13] = "ShortPause", e[e.Collision = 40] = "Collision", e[e.HotKey = 20] = "HotKey"
}(Delay || (Delay = {}));
var StatType;
! function(e) {
    e[e.EnemyHealth = 0] = "EnemyHealth", e[e.Stat = 1] = "Stat", e[e.Stamina = 2] = "Stamina", e[e.Hunger = 3] = "Hunger", e[e.Health = 4] = "Health", e[e.Thirst = 5] = "Thirst"
}(StatType || (StatType = {}));
var StatusType;
! function(e) {
    e[e.Bleeding = 0] = "Bleeding", e[e.Poisoned = 1] = "Poisoned", e[e.Burned = 2] = "Burned"
}(StatusType || (StatusType = {}));
var ItemQuality;
! function(e) {
    e[e.None = 0] = "None", e[e.Random = 1] = "Random", e[e.Exceptional = 2] = "Exceptional", e[e.Remarkable = 3] = "Remarkable",
        e[e.Legendary = 4] = "Legendary"
}(ItemQuality || (ItemQuality = {}));
var ItemImage;
! function(e) {
    e[e.Default = 0] = "Default", e[e.Exceptional = 1] = "Exceptional", e[e.Remarkable = 2] = "Remarkable", e[e.Legendary = 3] = "Legendary", e[e.Damaged = 4] = "Damaged", e[e.Selected = 5] = "Selected", e[e.Highlighted = 6] = "Highlighted"
}(ItemImage || (ItemImage = {}));
var RenderFlag;
! function(e) {
    e[e.None = 0] = "None", e[e.Corpse = 1] = "Corpse", e[e.Item = 2] = "Item", e[e.Player = 4] = "Player", e[e.Monster = 8] = "Monster", e[e.Terrain = 16] = "Terrain", e[e.All = 65535] = "All"
}(RenderFlag || (RenderFlag = {}));
var OnEquipType;
! function(e) {
    e[e.LightSource = 0] = "LightSource", e[e.Telescopy = 1] = "Telescopy"
}(OnEquipType || (OnEquipType = {}));
var itemQualitySortOrder = {};
itemQualitySortOrder[ItemQuality.None] = 0, itemQualitySortOrder[ItemQuality.Random] = 1, itemQualitySortOrder[ItemQuality.Remarkable] = 2, itemQualitySortOrder[ItemQuality.Exceptional] = 3, itemQualitySortOrder[ItemQuality.Legendary] = 4;
var onEquipTypes = [];
onEquipTypes[OnEquipType.LightSource] = {}, onEquipTypes[OnEquipType.Telescopy] = {};
var KeyBind;
! function(e) {
    e[e.Up = 0] = "Up", e[e.Down = 1] = "Down", e[e.Left = 2] = "Left", e[e.Right = 3] = "Right", e[e.Idle = 4] = "Idle", e[e.One = 5] = "One", e[e.Two = 6] = "Two", e[e.Three = 7] = "Three", e[e.Four = 8] = "Four", e[e.Five = 9] = "Five", e[e.Six = 10] = "Six", e[e.Seven = 11] = "Seven", e[e.Eight = 12] = "Eight", e[e.Nine = 13] = "Nine", e[e.Escape = 14] = "Escape", e[e.Inventory = 15] = "Inventory", e[e.Help = 16] = "Help", e[e.Skills = 17] = "Skills", e[e.Messages = 18] = "Messages", e[e.Options = 19] = "Options", e[e.Alt = 20] = "Alt", e[e.Shift = 21] = "Shift", e[e.Equipment = 22] = "Equipment", e[e.Crafting = 23] = "Crafting", e[e.Actions = 24] = "Actions", e[e.Milestones = 25] = "Milestones", e[e.Enter = 26] = "Enter", e[e.Ten = 27] = "Ten", e[e.Eleven = 28] = "Eleven", e[e.Twelve = 29] = "Twelve", e[e.PrimaryMouse = 30] = "PrimaryMouse", e[e.SecondaryMouse = 31] = "SecondaryMouse", e[e.Touch = 32] = "Touch"
}(KeyBind || (KeyBind = {})), Utilities.Enums.setup(KeyBind, 100, 200);
var BindType;
! function(e) {
    e[e.Keyboard = 0] = "Keyboard", e[e.Mouse = 1] = "Mouse", e[e.Other = 2] = "Other"
}(BindType || (BindType = {}));
var keybindOrder = [],
    defaultBinds = [];
addDefaultBind(KeyBind.Up, 87), addDefaultBind(KeyBind.Down, 83), addDefaultBind(KeyBind.Left, 65), addDefaultBind(KeyBind.Right, 68), addDefaultBind(KeyBind.Idle, 32), addDefaultBind(KeyBind.One, 49), addDefaultBind(KeyBind.Two, 50), addDefaultBind(KeyBind.Three, 51), addDefaultBind(KeyBind.Four, 52), addDefaultBind(KeyBind.Five, 53), addDefaultBind(KeyBind.Six, 54), addDefaultBind(KeyBind.Seven, 55), addDefaultBind(KeyBind.Eight, 56), addDefaultBind(KeyBind.Nine, 57), addDefaultBind(KeyBind.Ten, 48), addDefaultBind(KeyBind.Eleven, 189), addDefaultBind(KeyBind.Twelve, 187), addDefaultBind(KeyBind.Escape, 27), addDefaultBind(KeyBind.Inventory, 73), addDefaultBind(KeyBind.Help, 191), addDefaultBind(KeyBind.Skills, 88), addDefaultBind(KeyBind.Messages, 77), addDefaultBind(KeyBind.Options, 79), addDefaultBind(KeyBind.Alt, 18), addDefaultBind(KeyBind.Shift, 16), addDefaultBind(KeyBind.Equipment, 69), addDefaultBind(KeyBind.Crafting, 67), addDefaultBind(KeyBind.Actions, 81), addDefaultBind(KeyBind.Milestones, 90), addDefaultBind(KeyBind.Enter, 13), addDefaultBind(KeyBind.PrimaryMouse, 0, BindType.Mouse, !1), addDefaultBind(KeyBind.SecondaryMouse, 2, BindType.Mouse, !1), addDefaultBind(KeyBind.Touch, -1, BindType.Mouse, !1);
var hotKeyNumbers = [KeyBind.One, KeyBind.Two, KeyBind.Three, KeyBind.Four, KeyBind.Five, KeyBind.Six, KeyBind.Seven, KeyBind.Eight, KeyBind.Nine, KeyBind.Ten, KeyBind.Eleven, KeyBind.Twelve],
    TurnType;
! function(e) {
    e[e.Resting = 0] = "Resting", e[e.CheckUnderPlayer = 1] = "CheckUnderPlayer", e[e.DontEnterCaves = 2] = "DontEnterCaves", e[e.ForcePickUp = 3] = "ForcePickUp"
}(TurnType || (TurnType = {}));
var HintType;
! function(e) {
    e[e.First = 0] = "First", e[e.WelcomeToWayward = 1] = "WelcomeToWayward", e[e.Controls = 2] = "Controls", e[e.CorpseCarving = 3] = "CorpseCarving", e[e.Doodads = 4] = "Doodads", e[e.CaveDarkness = 5] = "CaveDarkness", e[e.Nightfall = 6] = "Nightfall", e[e.StaminaReplenishment = 7] = "StaminaReplenishment", e[e.HealthProblems = 8] = "HealthProblems", e[e.Bleeding = 9] = "Bleeding", e[e.Poisoned = 10] = "Poisoned", e[e.Dehydration = 11] = "Dehydration", e[e.UseATool = 12] = "UseATool", e[e.Durability = 13] = "Durability", e[e.Death = 14] = "Death", e[e.ConsumingBadThings = 15] = "ConsumingBadThings", e[e.FastPickup = 16] = "FastPickup", e[e.Bugs = 17] = "Bugs", e[e.HeldItems = 18] = "HeldItems", e[e.Milestones = 19] = "Milestones", e[e.Burned = 20] = "Burned", e[e.Crafting = 21] = "Crafting", e[e.Encumbered = 22] = "Encumbered", e[e.DailyChallengeMode = 23] = "DailyChallengeMode", e[e.MovingItems = 24] = "MovingItems", e[e.CraftingFailure = 25] = "CraftingFailure", e[e.Malignity = 26] = "Malignity", e[e.Last = 27] = "Last"
}(HintType || (HintType = {}));
var hints = Array();
hints[HintType.WelcomeToWayward] = {}, hints[HintType.Controls] = {}, hints[HintType.CorpseCarving] = {
    highlightElementSelector: ["#inventory li.group-" + ItemTypeGroup.Sharpened + ":eq(0)"]
}, hints[HintType.Doodads] = {
    highlightElementSelector: ["#inventory li.group-" + ItemTypeGroup.Sharpened + ":eq(0)", '#inventory li[data-item-type="' + ItemType.IronShovel + '"]:eq(0)', '#inventory li[data-item-type="' + ItemType.StoneShovel + '"]:eq(0)', '#inventory li[data-item-type="' + ItemType.WroughtIronShovel + '"]:eq(0)', '#buttons img[data-button="Actions"]']
}, hints[HintType.CaveDarkness] = {
    highlightElementSelector: ['#inventory li[data-item-type="' + ItemType.WoodenPole + '"]:eq(0)', '#inventory li[data-item-type="' + ItemType.BarkTorch + '"]:eq(0)', '#inventory li[data-item-type="' + ItemType.AnimalFatTorch + '"]:eq(0)', '#inventory li[data-item-type="' + ItemType.LitPoleTorch + '"]:eq(0)', '#inventory li[data-item-type="' + ItemType.LitBarkTorch + '"]:eq(0)', '#inventory li[data-item-type="' + ItemType.LitAnimalFatTorch + '"]:eq(0)']
}, hints[HintType.Nightfall] = {}, hints[HintType.StaminaReplenishment] = {
    highlightElementSelector: ["#inventory li.group-" + ItemTypeGroup.Bedding + ":eq(0)", '#stats div[data-bar="Stamina"]']
}, hints[HintType.HealthProblems] = {
    highlightElementSelector: ["#inventory li.group-" + ItemTypeGroup.Health + ":eq(0)", "#inventory li.group-" + ItemTypeGroup.Bedding + ":eq(0)", '#stats div[data-bar="Health"]']
}, hints[HintType.Bleeding] = {
    highlightElementSelector: ["#inventory li.group-" + ItemTypeGroup.Health + ":eq(0)", '#stats div[data-bar="Health"]']
}, hints[HintType.Poisoned] = {
    highlightElementSelector: ["#inventory li.group-" + ItemTypeGroup.ContainerOfMedicinalWater + ":eq(0)", '#inventory li[data-item-type="' + ItemType.CharcoalBandage + '"]:eq(0)', '#stats div[data-bar="Health"]']
}, hints[HintType.Dehydration] = {
    highlightElementSelector: ["#inventory li.group-" + ItemTypeGroup.Water + ":eq(0)", '#inventory li[data-item-type="' + ItemType.Coconut + '"]:eq(0)', '#inventory li[data-item-type="' + ItemType.Pineapple + '"]:eq(0)', '#stats div[data-bar="Thirst"]']
}, hints[HintType.UseATool] = {
    highlightElementSelector: ["#inventory li.group-" + ItemTypeGroup.Tool + ":eq(0)", '#stats div[data-bar="Health"]']
}, hints[HintType.Durability] = {
    highlightElementSelector: ['#inventory li[class*="-damaged"]:eq(0)']
}, hints[HintType.Death] = {}, hints[HintType.ConsumingBadThings] = {
    highlightElementSelector: ['#stats div[data-bar="Health"]']
}, hints[HintType.FastPickup] = {}, hints[HintType.Bugs] = {}, hints[HintType.HeldItems] = {
    highlightElementSelector: ["#equipment ul:lt(2)"]
}, hints[HintType.Milestones] = {
    highlightElementSelector: ['#buttons img[data-button="Milestones"]']
}, hints[HintType.Burned] = {
    highlightElementSelector: ["#inventory li.group-" + ItemTypeGroup.Health + ":eq(0)", '#stats div[data-bar="Health"]']
}, hints[HintType.Crafting] = {
    highlightElementSelector: ['#buttons img[data-button="Crafting"]']
}, hints[HintType.Encumbered] = {
    highlightElementSelector: ['#stats div[data-attribute="Weight"]']
}, hints[HintType.DailyChallengeMode] = {}, hints[HintType.MovingItems] = {}, hints[HintType.CraftingFailure] = {
    highlightElementSelector: ['#buttons img[data-button="Crafting"]']
}, hints[HintType.Malignity] = {
    highlightElementSelector: ['#stats div[data-attribute="Malignity"]']
};
var keyCodes = ["", "", "", "CANCEL", "", "", "HELP", "", "BACKSPACE", "TAB", "", "", "CLEAR", "ENTER", "ENTER SPECIAL", "", "SHIFT", "CONTROL", "ALT", "PAUSE", "CAPS LOCK", "KANA", "EISU", "JUNJA", "FINAL", "HANJA", "", "ESC", "CONVERT", "NON CONVERT", "ACCEPT", "MODE CHANGE", "SPACE", "PAGE UP", "PAGE DOWN", "END", "HOME", "LEFT", "UP", "RIGHT", "DOWN", "SELECT", "PRINT", "EXECUTE", "PRINT SCREEN", "INSERT", "DELETE", "", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "WINDOWS", "", "CONTEXT MENU", "", "SLEEP", "NUMPAD0", "NUMPAD1", "NUMPAD2", "NUMPAD3", "NUMPAD4", "NUMPAD5", "NUMPAD6", "NUMPAD7", "NUMPAD8", "NUMPAD9", "MULTIPLY", "ADD", "SEPARATOR", "SUBTRACT", "DECIMAL", "DIVIDE", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "F13", "F14", "F15", "F16", "F17", "F18", "F19", "F20", "F21", "F22", "F23", "F24", "", "", "", "", "", "", "", "", "NUM LOCK", "SCROLL LOCK", "WIN OEM FJ JISHO", "WIN OEM FJ MASSHOU", "WIN OEM FJ TOUROKU", "WIN OEM FJ LOYA", "WIN OEM FJ ROYA", "", "", "", "", "", "", "", "", "", "^", "!", '"', "#", "$", "%", "&", "_", "(", ")", "*", "+", "|", "-", "{", "}", "~", "", "", "", "", "VOLUME MUTE", "VOLUME DOWN", "VOLUME UP", "", "", ";", "=", ",", "-", ".", "/", "`", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[", "\\", "]", "'", "", "META", "ALTGR", "", "WIN ICO HELP", "WIN ICO 00", "", "WIN ICO CLEAR", "", "", "WIN OEM RESET", "WIN OEM JUMP", "WIN OEM PA1", "WIN OEM PA2", "WIN OEM PA3", "WIN OEM WSCTRL", "WIN OEM CUSEL", "WIN OEM ATTN", "WIN OEM FINISH", "WIN OEM COPY", "WIN OEM AUTO", "WIN OEM ENLW", "WIN OEM BACKTAB", "ATTN", "CRSEL", "EXSEL", "EREOF", "PLAY", "ZOOM", "", "PA1", "WIN OEM CLEAR", ""],
    ScreenId;
! function(e) {
    e[e.None = 0] = "None", e[e.Cover = 1] = "Cover", e[e.Title = 2] = "Title", e[e.Game = 3] = "Game"
}(ScreenId || (ScreenId = {}));
var TitleScreenId;
! function(e) {
    e[e.Default = 0] = "Default", e[e.EndGame = 1] = "EndGame"
}(TitleScreenId || (TitleScreenId = {}));
var DialogId;
! function(e) {
    e[e.Inventory = 0] = "Inventory", e[e.Crafting = 1] = "Crafting", e[e.Equipment = 2] = "Equipment", e[e.Messages = 3] = "Messages", e[e.Skills = 4] = "Skills", e[e.Milestones = 5] = "Milestones", e[e.Map = 6] = "Map", e[e.Container = 7] = "Container", e[e.Custom = 8] = "Custom"
}(DialogId || (DialogId = {}));
var SortType;
! function(e) {
    e[e.Name = 0] = "Name", e[e.Group = 1] = "Group", e[e.Weight = 2] = "Weight", e[e.Recent = 3] = "Recent", e[e.Skill = 4] = "Skill", e[e.Decay = 5] = "Decay", e[e.Quality = 6] = "Quality", e[e.Category = 7] = "Category", e[e.Durability = 8] = "Durability"
}(SortType || (SortType = {}));
var RestType;
! function(e) {
    e[e.Resting = 0] = "Resting", e[e.Sleeping = 1] = "Sleeping"
}(RestType || (RestType = {}));
var LoadingType;
! function(e) {
    e[e.Normal = 0] = "Normal", e[e.Rest = 1] = "Rest"
}(LoadingType || (LoadingType = {}));
var InputRecordType;
! function(e) {
    e[e.KeyDown = 0] = "KeyDown", e[e.KeyUp = 1] = "KeyUp", e[e.MouseDown = 2] = "MouseDown", e[e.MouseUpOrLeave = 3] = "MouseUpOrLeave", e[e.MouseMove = 4] = "MouseMove", e[e.MouseScroll = 5] = "MouseScroll"
}(InputRecordType || (InputRecordType = {}));
var TextCase;
! function(e) {
    e[e.None = 0] = "None", e[e.Title = 1] = "Title", e[e.Sentence = 2] = "Sentence"
}(TextCase || (TextCase = {}));
var terrains = Array();
terrains[TerrainType.DeepSeawater] = {
    particles: [26, 157, 216],
    water: !0,
    terrainType: TerrainType.DeepSeawater
}, terrains[TerrainType.Seawater] = {
    particles: [36, 170, 231],
    water: !0,
    terrainType: TerrainType.Seawater
}, terrains[TerrainType.ShallowSeawater] = {
    shallowWater: !0,
    passable: !0,
    particles: [55, 192, 255],
    terrainType: TerrainType.ShallowSeawater
}, terrains[TerrainType.Ash] = {
    passable: !0,
    particles: [105, 105, 105],
    terrainType: TerrainType.Ash
}, terrains[TerrainType.CobblestoneFlooring] = {
    passable: !0,
    particles: [174, 178, 176],
    durability: 15,
    terrainType: TerrainType.CobblestoneFlooring
}, terrains[TerrainType.Dirt] = {
    passable: !0,
    particles: [111, 76, 31],
    regathered: !0,
    terrainType: TerrainType.Dirt
}, terrains[TerrainType.CaveEntrance] = {
    passable: !0,
    particles: [111, 76, 31],
    terrainType: TerrainType.Dirt,
    doodad: DoodadType.CaveEntrance
}, terrains[TerrainType.Tree] = {
    particles: [59, 126, 25],
    strength: 7,
    skill: SkillType.Lumberjacking,
    gather: !0,
    noLos: !0,
    flammable: !0,
    sound: SfxType.TreeHit,
    leftOver: TerrainType.BareTree,
    noGfxSwitch: !0,
    terrainType: TerrainType.Tree,
    doodad: DoodadType.Tree
}, terrains[TerrainType.Grass] = {
    passable: !0,
    particles: [85, 143, 44],
    flammable: !0,
    regathered: !0,
    terrainType: TerrainType.Grass
}, terrains[TerrainType.Gravel] = {
    passable: !0,
    particles: [154, 117, 57],
    regathered: !0,
    terrainType: TerrainType.Gravel
}, terrains[TerrainType.Rocks] = {
    particles: [105, 103, 103],
    strength: 8,
    skill: SkillType.Mining,
    gather: !0,
    noLos: !0,
    sound: SfxType.RockHit,
    leftOver: TerrainType.Dirt,
    noGfxSwitch: !0,
    terrainType: TerrainType.Rocks,
    isMountain: !0
}, terrains[TerrainType.Sand] = {
    passable: !0,
    particles: [225, 219, 150],
    regathered: !0,
    terrainType: TerrainType.Sand
}, terrains[TerrainType.Sandstone] = {
    particles: [173, 122, 78],
    strength: 7,
    skill: SkillType.Mining,
    gather: !0,
    noLos: !0,
    sound: SfxType.SandstoneHit,
    leftOver: TerrainType.Gravel,
    noGfxSwitch: !0,
    terrainType: TerrainType.Sandstone,
    isMountain: !0
}, terrains[TerrainType.Snow] = {
    passable: !0,
    particles: [201, 224, 228],
    terrainType: TerrainType.Snow
}, terrains[TerrainType.Swamp] = {
    passable: !0,
    particles: [3, 67, 3],
    terrainType: TerrainType.Swamp
}, terrains[TerrainType.Clay] = {
    passable: !0,
    particles: [135, 142, 147],
    terrainType: TerrainType.Clay
}, terrains[TerrainType.SandstoneFlooring] = {
    passable: !0,
    particles: [173, 122, 78],
    durability: 15,
    terrainType: TerrainType.SandstoneFlooring
}, terrains[TerrainType.PalmTree] = {
    particles: [157, 179, 0],
    strength: 7,
    skill: SkillType.Lumberjacking,
    gather: !0,
    noLos: !0,
    flammable: !0,
    sound: SfxType.TreeHit,
    leftOver: TerrainType.BarePalmTree,
    noGfxSwitch: !0,
    terrainType: TerrainType.Sand,
    doodad: DoodadType.PalmTree
}, terrains[TerrainType.BarePalmTree] = {
    particles: [161, 150, 99],
    strength: 3,
    skill: SkillType.Lumberjacking,
    gather: !0,
    flammable: !0,
    sound: SfxType.TreeHit,
    leftOver: TerrainType.Sand,
    terrainType: TerrainType.Sand,
    doodad: DoodadType.BarePalmTree
}, terrains[TerrainType.BareTree] = {
    particles: [90, 43, 23],
    strength: 3,
    skill: SkillType.Lumberjacking,
    gather: !0,
    flammable: !0,
    sound: SfxType.TreeHit,
    noGfxSwitch: !0,
    leftOver: TerrainType.Dirt,
    terrainType: TerrainType.Dirt,
    doodad: DoodadType.BareTree
}, terrains[TerrainType.WoodenFlooring] = {
    passable: !0,
    particles: [108, 71, 25],
    flammable: !0,
    durability: 15,
    terrainType: TerrainType.WoodenFlooring
}, terrains[TerrainType.DeepFreshWater] = {
    particles: [27, 138, 169],
    water: !0,
    freshWater: !0,
    terrainType: TerrainType.DeepFreshWater
}, terrains[TerrainType.ShallowFreshWater] = {
    passable: !0,
    shallowWater: !0,
    particles: [50, 169, 201],
    freshWater: !0,
    terrainType: TerrainType.ShallowFreshWater
}, terrains[TerrainType.FreshWater] = {
    particles: [35, 150, 181],
    water: !0,
    freshWater: !0,
    terrainType: TerrainType.FreshWater
}, terrains[TerrainType.RocksWithIron] = {
    particles: [62, 67, 84],
    strength: 2,
    skill: SkillType.Mining,
    gather: !0,
    noLos: !0,
    sound: SfxType.RockHit,
    leftOver: TerrainType.Rocks,
    noGfxSwitch: !0,
    terrainType: TerrainType.RocksWithIron,
    isMountain: !0,
    isOre: !0
}, terrains[TerrainType.SandstoneWithIron] = {
    particles: [62, 67, 84],
    strength: 2,
    skill: SkillType.Mining,
    gather: !0,
    noLos: !0,
    sound: SfxType.SandstoneHit,
    leftOver: TerrainType.Sandstone,
    noGfxSwitch: !0,
    terrainType: TerrainType.SandstoneWithIron,
    isMountain: !0,
    isOre: !0
}, terrains[TerrainType.RocksWithTalc] = {
    particles: [157, 170, 170],
    strength: 2,
    skill: SkillType.Mining,
    gather: !0,
    noLos: !0,
    sound: SfxType.RockHit,
    leftOver: TerrainType.Rocks,
    noGfxSwitch: !0,
    terrainType: TerrainType.RocksWithTalc,
    isMountain: !0,
    isOre: !0
}, terrains[TerrainType.RocksWithLimestone] = {
    particles: [183, 177, 167],
    strength: 2,
    skill: SkillType.Mining,
    gather: !0,
    noLos: !0,
    sound: SfxType.RockHit,
    leftOver: TerrainType.Rocks,
    noGfxSwitch: !0,
    terrainType: TerrainType.RocksWithLimestone,
    isMountain: !0,
    isOre: !0
}, terrains[TerrainType.TreeWithBerries] = {
    particles: [59, 126, 25],
    strength: 2,
    skill: SkillType.Lumberjacking,
    gather: !0,
    noLos: !0,
    flammable: !0,
    sound: SfxType.TreeHit,
    leftOver: TerrainType.Tree,
    noGfxSwitch: !0,
    terrainType: TerrainType.Tree,
    doodad: DoodadType.TreeWithBerries
}, terrains[TerrainType.TreeWithFungus] = {
    particles: [59, 126, 25],
    strength: 2,
    skill: SkillType.Lumberjacking,
    gather: !0,
    noLos: !0,
    flammable: !0,
    sound: SfxType.TreeHit,
    leftOver: TerrainType.Tree,
    noGfxSwitch: !0,
    terrainType: TerrainType.Tree,
    doodad: DoodadType.TreeWithFungus
}, terrains[TerrainType.TreeWithVines] = {
    particles: [59, 126, 25],
    strength: 2,
    skill: SkillType.Lumberjacking,
    gather: !0,
    noLos: !0,
    flammable: !0,
    sound: SfxType.TreeHit,
    leftOver: TerrainType.Tree,
    noGfxSwitch: !0,
    terrainType: TerrainType.Tree,
    doodad: DoodadType.TreeWithVines
}, terrains[TerrainType.PalmTreeWithCoconuts] = {
    particles: [157, 179, 0],
    strength: 2,
    skill: SkillType.Lumberjacking,
    gather: !0,
    noLos: !0,
    flammable: !0,
    sound: SfxType.TreeHit,
    leftOver: TerrainType.PalmTree,
    noGfxSwitch: !0,
    terrainType: TerrainType.Sand,
    doodad: DoodadType.PalmTreeWithCoconuts
}, terrains[TerrainType.RocksWithCoal] = {
    particles: [43, 43, 43],
    strength: 2,
    skill: SkillType.Mining,
    gather: !0,
    noLos: !0,
    sound: SfxType.RockHit,
    leftOver: TerrainType.Rocks,
    noGfxSwitch: !0,
    terrainType: TerrainType.RocksWithCoal,
    isMountain: !0,
    isOre: !0
}, terrains[TerrainType.SandstoneWithNiter] = {
    particles: [145, 150, 149],
    strength: 2,
    skill: SkillType.Mining,
    gather: !0,
    noLos: !0,
    sound: SfxType.SandstoneHit,
    leftOver: TerrainType.Sandstone,
    noGfxSwitch: !0,
    terrainType: TerrainType.SandstoneWithNiter,
    isMountain: !0,
    isOre: !0
}, terrains[TerrainType.ClayBrickFlooring] = {
    passable: !0,
    particles: [171, 176, 179],
    durability: 15,
    terrainType: TerrainType.ClayBrickFlooring
}, terrains[TerrainType.RedCarpet] = {
    passable: !0,
    particles: [115, 36, 27],
    durability: 15,
    terrainType: TerrainType.RedCarpet
};
var resource = Array();
resource[TerrainType.Tree] = {
    items: [{
        type: ItemType.Acorn,
        chance: 1,
        chanceOutOf: 200
    }, {
        type: ItemType.Sapling,
        chance: 2
    }, {
        type: ItemType.Leaves,
        chance: 8
    }, {
        type: ItemType.Twigs,
        chance: 10
    }, {
        type: ItemType.TreeBark,
        chance: 15
    }, {
        type: ItemType.Branch,
        chance: 30
    }]
}, resource[TerrainType.TreeWithBerries] = {
    items: [{
        type: ItemType.BigRedBerry,
        chance: 1,
        chanceOutOf: 200
    }, {
        type: ItemType.RedBerries,
        chance: 45
    }]
}, resource[TerrainType.TreeWithFungus] = {
    items: [{
        type: ItemType.TreeFungus,
        chance: 45
    }]
}, resource[TerrainType.TreeWithVines] = {
    items: [{
        type: ItemType.Vine,
        chance: 45
    }]
}, resource[TerrainType.BareTree] = {
    items: [{
        type: ItemType.Log,
        chance: 45
    }]
}, resource[TerrainType.PalmTree] = {
    items: [{
        type: ItemType.PalmLeaf,
        chance: 8
    }, {
        type: ItemType.TreeBark,
        chance: 25
    }]
}, resource[TerrainType.PalmTreeWithCoconuts] = {
    items: [{
        type: ItemType.Coconut,
        chance: 45
    }]
}, resource[TerrainType.BarePalmTree] = {
    items: [{
        type: ItemType.Log,
        chance: 45
    }]
}, resource[TerrainType.Rocks] = {
    items: [{
        type: ItemType.SmoothRock,
        chance: 2
    }, {
        type: ItemType.SharpRock,
        chance: 10
    }, {
        type: ItemType.Stones,
        chance: 20
    }, {
        type: ItemType.LargeRock,
        chance: 50
    }]
}, resource[TerrainType.RocksWithIron] = {
    items: [{
        type: ItemType.IronOre,
        chance: 45
    }]
}, resource[TerrainType.RocksWithTalc] = {
    items: [{
        type: ItemType.Talc,
        chance: 45
    }]
}, resource[TerrainType.RocksWithLimestone] = {
    items: [{
        type: ItemType.Limestone,
        chance: 45
    }]
}, resource[TerrainType.RocksWithCoal] = {
    items: [{
        type: ItemType.Coal,
        chance: 45
    }]
}, resource[TerrainType.Sandstone] = {
    items: [{
        type: ItemType.Shale,
        chance: 2
    }, {
        type: ItemType.PileOfGravel,
        chance: 15
    }, {
        type: ItemType.Stones,
        chance: 20
    }, {
        type: ItemType.Sandstone,
        chance: 50
    }]
}, resource[TerrainType.SandstoneWithIron] = {
    items: [{
        type: ItemType.IronOre,
        chance: 45
    }]
}, resource[TerrainType.SandstoneWithNiter] = {
    items: [{
        type: ItemType.Niter,
        chance: 45
    }]
}, resource[TerrainType.WoodenFlooring] = {
    items: [{
        type: ItemType.WoodenFlooring,
        chance: 50,
        tileChange: TerrainType.Dirt
    }],
    defaultItem: ItemType.WoodenFlooring
}, resource[TerrainType.Dirt] = {
    items: [{
        type: ItemType.Soil,
        chance: 2,
        tileChange: TerrainType.ShallowFreshWater
    }, {
        type: ItemType.Earthworm,
        chance: 4
    }, {
        type: ItemType.Soil,
        chance: 50,
        tileChange: TerrainType.Dirt
    }],
    defaultItem: ItemType.Soil
}, resource[TerrainType.Clay] = {
    items: [{
        type: ItemType.RawClay,
        chance: 50,
        tileChange: TerrainType.Sand,
        tileChangeChance: 10
    }],
    defaultItem: ItemType.RawClay
}, resource[TerrainType.Grass] = {
    items: [{
        type: ItemType.GrassSeeds,
        chance: 40,
        tileChange: TerrainType.Dirt
    }, {
        type: ItemType.PlantRoots,
        chance: 45,
        tileChange: TerrainType.Dirt
    }]
}, resource[TerrainType.Sand] = {
    items: [{
        type: ItemType.PileOfSand,
        chance: 50,
        tileChange: TerrainType.Clay,
        tileChangeChance: 15
    }],
    defaultItem: ItemType.PileOfSand
}, resource[TerrainType.Gravel] = {
    items: [{
        type: ItemType.PileOfGravel,
        chance: 2,
        tileChange: TerrainType.ShallowFreshWater
    }, {
        type: ItemType.Stones,
        chance: 5
    }, {
        type: ItemType.Shale,
        chance: 10
    }, {
        type: ItemType.PileOfGravel,
        chance: 45,
        tileChange: TerrainType.Clay,
        tileChangeChance: 10
    }],
    defaultItem: ItemType.PileOfGravel
}, resource[TerrainType.Swamp] = {
    items: [{
        type: ItemType.Peat,
        chance: 2,
        tileChange: TerrainType.ShallowFreshWater
    }, {
        type: ItemType.PlantRoots,
        chance: 5
    }, {
        type: ItemType.Vine,
        chance: 8
    }, {
        type: ItemType.Peat,
        chance: 45,
        tileChange: TerrainType.Dirt,
        tileChangeChance: 50
    }],
    defaultItem: ItemType.Peat
}, resource[TerrainType.CobblestoneFlooring] = {
    items: [{
        type: ItemType.CobblestoneFlooring,
        chance: 50,
        tileChange: TerrainType.Dirt
    }],
    defaultItem: ItemType.CobblestoneFlooring
}, resource[TerrainType.SandstoneFlooring] = {
    items: [{
        type: ItemType.SandstoneFlooring,
        chance: 50,
        tileChange: TerrainType.Gravel
    }],
    defaultItem: ItemType.SandstoneFlooring
}, resource[TerrainType.Snow] = {
    items: [{
        type: ItemType.PileOfSnow,
        chance: 40,
        tileChange: TerrainType.Dirt
    }]
}, resource[TerrainType.Ash] = {
    items: [{
        type: ItemType.PileOfAsh,
        chance: 45,
        tileChange: TerrainType.Dirt,
        tileChangeChance: 50
    }]
}, resource[TerrainType.ShallowSeawater] = {
    items: [{
        type: ItemType.PileOfSand,
        chance: 25,
        tileChange: TerrainType.Seawater,
        tileChangeChance: 75
    }]
}, resource[TerrainType.ShallowFreshWater] = {
    items: [{
        type: ItemType.Soil,
        chance: 25,
        tileChange: TerrainType.FreshWater,
        tileChangeChance: 75
    }]
}, resource[TerrainType.CaveEntrance] = {
    items: [{
        type: ItemType.Soil,
        chance: 25,
        tileChange: TerrainType.Dirt
    }]
}, resource[TerrainType.ClayBrickFlooring] = {
    items: [{
        type: ItemType.ClayBrickFlooring,
        chance: 50,
        tileChange: TerrainType.Sand
    }],
    defaultItem: ItemType.ClayBrickFlooring
}, resource[TerrainType.RedCarpet] = {
    items: [{
        type: ItemType.RollOfRedCarpet,
        chance: 50,
        tileChange: TerrainType.Dirt
    }],
    defaultItem: ItemType.RollOfRedCarpet
};
var TileTemplateType;
! function(e) {
    e[e.House = 0] = "House", e[e.Pond = 1] = "Pond", e[e.CavePond = 2] = "CavePond", e[e.Desert = 3] = "Desert", e[e.Beach = 4] = "Beach", e[e.Boat = 5] = "Boat"
}(TileTemplateType || (TileTemplateType = {}));
var templates = {};
templates[TileTemplateType.House] = {
    woodenHouse: {
        w: 5,
        h: 4,
        terrainTypes: {
            F: TerrainType.WoodenFlooring
        },
        terrain: ["FFFFF", "FFFFF", "FFFFF", "FFFFF"],
        doodadTypes: {
            W: DoodadType.WoodenWall,
            D: DoodadType.WoodenDoor
        },
        doodad: ["WWWWW", "W   W", "W   D", "WWWWW"],
        degrade: 25
    },
    largeWoodenHouse: {
        w: 6,
        h: 5,
        terrainTypes: {
            F: TerrainType.WoodenFlooring
        },
        terrain: ["FFFFFF", "FFFFFF", "FFFFFF", "FFFFFF", "FFFFFF"],
        doodadTypes: {
            W: DoodadType.WoodenWall,
            D: DoodadType.WoodenDoor
        },
        doodad: ["WWWWWW", "W    W", "W    W", "W    W", "WWDDWW"],
        degrade: 25
    },
    stoneHouse: {
        w: 7,
        h: 4,
        terrainTypes: {
            F: TerrainType.CobblestoneFlooring
        },
        terrain: ["FFFFFFF", "FFFFFFF", "FFFFFFF", "FFFFFFF"],
        doodadTypes: {
            W: DoodadType.StoneWall,
            D: DoodadType.WoodenDoor
        },
        doodad: ["WWWWDWW", "W     W", "W     W", "WWWWWWW"],
        degrade: 50
    },
    largeStoneHouse: {
        w: 8,
        h: 5,
        terrainTypes: {
            F: TerrainType.CobblestoneFlooring
        },
        terrain: ["FFFFF   ", "FFFFF   ", "FFFFFFFF", "FFFFFFFF", "FFFFFFFF"],
        doodadTypes: {
            W: DoodadType.StoneWall,
            D: DoodadType.WoodenDoor
        },
        doodad: ["WWDWW   ", "W   W   ", "WWWDWWWW", "W      W", "WWWWDWWW"],
        degrade: 75
    },
    monument: {
        w: 5,
        h: 3,
        terrainTypes: {
            F: TerrainType.CobblestoneFlooring
        },
        terrain: [" FFF ", "FFFFF", " FFF "],
        doodadTypes: {
            W: DoodadType.StoneWall
        },
        doodad: ["     ", "  W  ", "     "],
        degrade: 100
    }
}, templates[TileTemplateType.Pond] = {
    pondWithTrees: {
        w: 8,
        h: 8,
        terrainTypes: {
            F: TerrainType.Tree,
            D: TerrainType.Dirt,
            G: TerrainType.Grass,
            W: TerrainType.ShallowFreshWater
        },
        terrain: ["   FFF  ", " FFDDFF ", " FGDWDF ", "FDWWWWDF", "FGWWWWGF", " FDWWDF ", " FFDGFF ", "   FF   "],
        degrade: 10
    },
    pond: {
        w: 5,
        h: 5,
        terrainTypes: {
            F: TerrainType.Tree,
            W: TerrainType.ShallowFreshWater
        },
        terrain: ["  F  ", " FWF ", "FWWWF", " FWF ", "  F  "],
        degrade: 30
    }
}, templates[TileTemplateType.CavePond] = {
    largePond: {
        w: 8,
        h: 8,
        terrainTypes: {
            R: TerrainType.Rocks,
            D: TerrainType.Dirt,
            G: TerrainType.Gravel,
            W: TerrainType.ShallowFreshWater
        },
        terrain: ["   RRR  ", " RRDDRR ", " RGDWDR ", "RDWWWWDR", "RGWWWWGR", " RDWWDR ", " RRDGRR ", "   RR   "],
        degrade: 20
    },
    pond: {
        w: 5,
        h: 5,
        terrainTypes: {
            R: TerrainType.Rocks,
            W: TerrainType.ShallowFreshWater
        },
        terrain: ["  R  ", " RWR ", "RWWWR", " RWR ", "  R  "],
        degrade: 40
    }
}, templates[TileTemplateType.Desert] = {
    oasis: {
        w: 8,
        h: 8,
        terrainTypes: {
            F: TerrainType.PalmTree,
            D: TerrainType.Gravel,
            G: TerrainType.Grass,
            W: TerrainType.ShallowFreshWater
        },
        terrain: ["   FFF  ", " FFDDFF ", " FGDWDF ", "FDWWWWDF", "FGWWWWGF", " FDWWDF ", " FFDGFF ", "   FF   "],
        degrade: 10
    },
    pond: {
        w: 5,
        h: 5,
        terrainTypes: {
            F: TerrainType.PalmTree,
            D: TerrainType.Gravel,
            G: TerrainType.Grass,
            W: TerrainType.ShallowFreshWater
        },
        terrain: [" DDD ", "DGFGD", "DFWFD", "DGFGD", " DDD "],
        degrade: 30
    },
    sandstonePond: {
        w: 5,
        h: 5,
        terrainTypes: {
            S: TerrainType.Sandstone,
            W: TerrainType.ShallowFreshWater
        },
        terrain: ["  W  ", " WSW ", "WSSSW", " WSW ", "  W  "],
        degrade: 45
    },
    sandstoneHouse: {
        w: 5,
        h: 4,
        terrainTypes: {
            F: TerrainType.SandstoneFlooring
        },
        terrain: ["FFFFF", "FFFFF", "FFFFF", "FFFFF"],
        doodadTypes: {
            W: DoodadType.SandstoneWall,
            D: DoodadType.WoodenDoor
        },
        doodad: ["WWWWW", "W   W", "W   D", "WWWWW"],
        degrade: 35
    }
}, templates[TileTemplateType.Beach] = {
    largeClay: {
        w: 5,
        h: 5,
        terrainTypes: {
            S: TerrainType.Sand,
            C: TerrainType.Clay
        },
        terrain: ["SSCSS", "SCCCS", "CCCCC", "SCCCS", "SSCSS"],
        degrade: 10
    },
    clay: {
        w: 5,
        h: 3,
        terrainTypes: {
            S: TerrainType.Sand,
            C: TerrainType.Clay,
            W: TerrainType.ShallowFreshWater
        },
        terrain: ["SCCCS", "CCWCC", "SCCC "],
        degrade: 25
    }
}, templates[TileTemplateType.Boat] = {
    raft: {
        w: 2,
        h: 2,
        terrainTypes: {
            W: TerrainType.WoodenFlooring
        },
        terrain: ["WW", "WW"],
        degrade: 100
    },
    smallShip: {
        w: 7,
        h: 5,
        terrainTypes: {
            W: TerrainType.DeepSeawater,
            F: TerrainType.WoodenFlooring
        },
        terrain: ["WWFFFWW", "WFFFFFW", "FFFFFFF", "WFFFFFW", "WWFFFWW"],
        doodadTypes: {
            W: DoodadType.WoodenWall
        },
        doodad: ["  WWW  ", " W   W ", "W     W", " W   W ", "  WWW  "],
        degrade: 10
    }
};
var __extends = this && this.__extends || function(e, t) {
        function i() {
            this.constructor = e
        }
        for (var a in t) t.hasOwnProperty(a) && (e[a] = t[a]);
        e.prototype = null === t ? Object.create(t) : (i.prototype = t.prototype, new i)
    },
    Vec2 = TSM.vec2,
    TileType;
! function(e) {
    e[e.Top = 0] = "Top", e[e.TopLeft = 1] = "TopLeft", e[e.Left = 2] = "Left", e[e.BottomLeft = 3] = "BottomLeft", e[e.Bottom = 4] = "Bottom", e[e.BottomRight = 5] = "BottomRight", e[e.Right = 6] = "Right", e[e.TopRight = 7] = "TopRight", e[e.InnerTopLeft = 8] = "InnerTopLeft", e[e.InnerBottomLeft = 9] = "InnerBottomLeft", e[e.InnerBottomRight = 10] = "InnerBottomRight", e[e.InnerTopRight = 11] = "InnerTopRight", e[e.CenterTopLeft = 12] = "CenterTopLeft", e[e.CenterBottomLeft = 13] = "CenterBottomLeft", e[e.CenterBottomRight = 14] = "CenterBottomRight", e[e.CenterTopRight = 15] = "CenterTopRight"
}(TileType || (TileType = {}));
var Bound2 = function() {
        function e(e, t) {
            this.min = e, this.max = t
        }
        return e
    }(),
    TerrainTileInfo = function() {
        function e(e, t) {
            var i = new Bound2(new Vec2([e, t + 4]), new Vec2([e + 3, t + 7]));
            this.topLeft = i.min, this.topRight = new Vec2([i.max.x, i.min.y]), this.bottomLeft = new Vec2([i.min.x, i.max.y]), this.bottomRight = i.max, this.innerTopLeft = new Vec2([i.max.x - 1, i.max.y - 1]), this.innerTopRight = new Vec2([i.min.x + 1, i.max.y - 1]), this.innerBottomLeft = new Vec2([i.max.x - 1, i.min.y + 1]), this.innerBottomRight = new Vec2([i.min.x + 1, i.min.y + 1]), this.top = [new Vec2([i.min.x + 1, i.min.y]), new Vec2([i.max.x - 1, i.min.y])], this.bottom = [new Vec2([i.min.x + 1, i.max.y]), new Vec2([i.max.x - 1, i.max.y])], this.left = [new Vec2([i.min.x, i.min.y + 1]), new Vec2([i.min.x, i.max.y - 1])], this.right = [new Vec2([i.max.x, i.min.y + 1]), new Vec2([i.max.x, i.max.y - 1])], this.centerTopLeft = [new Vec2([e, t]), new Vec2([e + 2, t]), new Vec2([e, t + 2]), new Vec2([e + 2, t + 2])], this.centerTopRight = [new Vec2([e + 1, t]), new Vec2([e + 3, t]), new Vec2([e + 1, t + 2]), new Vec2([e + 3, t + 2])], this.centerBottomLeft = [new Vec2([e, t + 1]), new Vec2([e + 2, t + 1]), new Vec2([e, t + 3]), new Vec2([e + 2, t + 3])], this.centerBottomRight = [new Vec2([e + 1, t + 1]), new Vec2([e + 3, t + 1]), new Vec2([e + 1, t + 3]), new Vec2([e + 3, t + 3])]
        }
        return e.prototype.getCenterTopLeft = function(e) {
            return this.centerTopLeft[e]
        }, e.prototype.getCenterTopRight = function(e) {
            return this.centerTopRight[e]
        }, e.prototype.getCenterBottomLeft = function(e) {
            return this.centerBottomLeft[e]
        }, e.prototype.getCenterBottomRight = function(e) {
            return this.centerBottomRight[e]
        }, e.prototype.getLeft = function(e) {
            return this.left[Math.floor(.5 * e)]
        }, e.prototype.getRight = function(e) {
            return this.right[Math.floor(.5 * e)]
        }, e.prototype.getTop = function(e) {
            return this.top[Math.floor(.5 * e)]
        }, e.prototype.getBottom = function(e) {
            return this.bottom[Math.floor(.5 * e)]
        }, e
    }(),
    MountainTileInfo = function(e) {
        function t(t, i) {
            e.call(this, t, i);
            var a = new TerrainTileInfo(t, i);
            a.top[0].y += 4, a.left[0].y += 4, a.right[0].y += 4, a.bottom[0].y += 4, a.top[1].y += 4, a.left[1].y += 4, a.right[1].y += 4, a.bottom[1].y += 4, a.topLeft.y += 4, a.topRight.y += 4, a.bottomLeft.y += 4, a.bottomRight.y += 4, a.innerTopLeft.y += 4, a.innerTopRight.y += 4, a.innerBottomLeft.y += 4, a.innerBottomRight.y += 4, this.extendedInfo = a
        }
        return __extends(t, e), t
    }(TerrainTileInfo),
    TileAtlas = function() {
        function e() {}
        return e.isMountain = function(t) {
            return e.terrain[t] instanceof MountainTileInfo
        }, e.isOre = function(e) {
            return terrains[e].isOre
        }, e.isWater = function(e) {
            return e <= TerrainType.ShallowFreshWater
        }, e.isFloor = function(e) {
            return e === TerrainType.WoodenFlooring || e === TerrainType.SandstoneFlooring || e === TerrainType.CobblestoneFlooring || e === TerrainType.ClayBrickFlooring || e === TerrainType.RedCarpet
        }, e.terrain = [], e.doodads = [], e
    }(),
    MoveType;
! function(e) {
    e[e.None = 0] = "None", e[e.Water = 1] = "Water", e[e.ShallowWater = 2] = "ShallowWater", e[e.Land = 4] = "Land", e[e.Tree = 8] = "Tree", e[e.Mountain = 16] = "Mountain", e[e.Flying = 15] = "Flying"
}(MoveType || (MoveType = {}));
var MonsterType;
! function(e) {
    e[e.Slime = 0] = "Slime", e[e.JellyCube = 1] = "JellyCube", e[e.GiantSpider = 2] = "GiantSpider", e[e.Bear = 3] = "Bear", e[e.Rabbit = 4] = "Rabbit", e[e.Snake = 5] = "Snake", e[e.GiantRat = 6] = "GiantRat", e[e.Rat = 7] = "Rat", e[e.VampireBat = 8] = "VampireBat", e[e.GreyWolf = 9] = "GreyWolf", e[e.Imp = 10] = "Imp", e[e.Bogling = 11] = "Bogling", e[e.LivingRock = 12] = "LivingRock", e[e.Shark = 13] = "Shark", e[e.Zombie = 14] = "Zombie", e[e.Skeleton = 15] = "Skeleton", e[e.PirateGhost = 16] = "PirateGhost", e[e.TimeSkitter = 17] = "TimeSkitter", e[e.Chicken = 18] = "Chicken", e[e.TrapdoorSpider = 19] = "TrapdoorSpider", e[e.FireElemental = 20] = "FireElemental", e[e.Cod = 21] = "Cod", e[e.Hobgoblin = 22] = "Hobgoblin", e[e.LivingMushroom = 23] = "LivingMushroom", e[e.Kraken = 24] = "Kraken", e[e.Blindfish = 25] = "Blindfish", e[e.Harpy = 26] = "Harpy", e[e.AcidSpitterDemon = 27] = "AcidSpitterDemon", e[e.SkeletalMage = 28] = "SkeletalMage", e[e.Blood = 29] = "Blood", e[e.ClawWorm = 30] = "ClawWorm", e[e.Drake = 31] = "Drake"
}(MonsterType || (MonsterType = {})), Utilities.Enums.setup(MonsterType, 200, 500);
var MonsterSpawnGroup;
! function(e) {
    e[e.Any = 0] = "Any", e[e.Guardians = 1] = "Guardians", e[e.Water = 2] = "Water"
}(MonsterSpawnGroup || (MonsterSpawnGroup = {}));
var MonsterAiType;
! function(e) {
    e[e.Neutral = 0] = "Neutral", e[e.Hostile = 1] = "Hostile", e[e.Scared = 2] = "Scared", e[e.Random = 4] = "Random", e[e.Hidden = 8] = "Hidden", e[e.Fearless = 16] = "Fearless"
}(MonsterAiType || (MonsterAiType = {}));
var MonsterSpawnableTiles;
! function(e) {
    e[e.None = 0] = "None", e[e.Default = 1] = "Default", e[e.DefaultWithWater = 2] = "DefaultWithWater", e[e.DeepWater = 3] = "DeepWater", e[e.Water = 4] = "Water", e[e.Flying = 5] = "Flying", e[e.Ghost = 6] = "Ghost"
}(MonsterSpawnableTiles || (MonsterSpawnableTiles = {}));
var spawnableTiles = Array();
spawnableTiles[MonsterSpawnableTiles.None] = [], spawnableTiles[MonsterSpawnableTiles.Default] = [TerrainType.Ash, TerrainType.Dirt, TerrainType.Grass, TerrainType.Gravel, TerrainType.Sand, TerrainType.Snow, TerrainType.Swamp, TerrainType.Clay], spawnableTiles[MonsterSpawnableTiles.DefaultWithWater] = [TerrainType.Ash, TerrainType.Dirt, TerrainType.Grass, TerrainType.Gravel, TerrainType.Sand, TerrainType.Snow, TerrainType.Swamp, TerrainType.Clay, TerrainType.ShallowSeawater, TerrainType.ShallowFreshWater], spawnableTiles[MonsterSpawnableTiles.DeepWater] = [TerrainType.Seawater, TerrainType.FreshWater, TerrainType.DeepSeawater, TerrainType.DeepFreshWater], spawnableTiles[MonsterSpawnableTiles.Water] = [TerrainType.Seawater, TerrainType.FreshWater, TerrainType.DeepSeawater, TerrainType.DeepFreshWater, TerrainType.ShallowSeawater, TerrainType.ShallowFreshWater], spawnableTiles[MonsterSpawnableTiles.Flying] = [TerrainType.Ash, TerrainType.Dirt, TerrainType.Grass, TerrainType.Gravel, TerrainType.Sand, TerrainType.ShallowSeawater, TerrainType.Snow, TerrainType.Swamp, TerrainType.Clay, TerrainType.ShallowFreshWater, TerrainType.Tree, TerrainType.PalmTree, TerrainType.BareTree, TerrainType.BarePalmTree], spawnableTiles[MonsterSpawnableTiles.Ghost] = [TerrainType.Ash, TerrainType.Dirt, TerrainType.Grass, TerrainType.Gravel, TerrainType.Sand, TerrainType.ShallowSeawater, TerrainType.Snow, TerrainType.Swamp, TerrainType.Clay, TerrainType.ShallowFreshWater, TerrainType.Tree, TerrainType.PalmTree, TerrainType.BareTree, TerrainType.BarePalmTree, TerrainType.Rocks, TerrainType.Sandstone];
var monsters = Array();
monsters[MonsterType.Slime] = {
    minhp: 7,
    maxhp: 15,
    minatk: 1,
    maxatk: 3,
    defense: new Defense(1, new Resistances(DamageType.Blunt, 2), new Vulnerabilities),
    damageType: DamageType.Blunt,
    ai: MonsterAiType.Neutral,
    moveType: MoveType.Land | MoveType.ShallowWater,
    blood: [150, 255, 70],
    aberrantBlood: [220, 0, 15],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 1e3,
    makeNoise: !0,
    jumpOver: !0,
    malignity: 100
}, monsters[MonsterType.JellyCube] = {
    minhp: 24,
    maxhp: 26,
    minatk: 3,
    maxatk: 7,
    defense: new Defense(2, new Resistances(DamageType.Blunt, 8), new Vulnerabilities),
    damageType: DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    blood: [150, 255, 70],
    aberrantBlood: [220, 0, 15],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 8e3,
    makeNoise: !0,
    jumpOver: !0,
    malignity: -200
}, monsters[MonsterType.GiantSpider] = {
    minhp: 7,
    maxhp: 15,
    minatk: 1,
    maxatk: 3,
    defense: new Defense(1, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Blunt, 1)),
    damageType: DamageType.Piercing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    canCauseStatus: [StatusType.Poisoned],
    loot: [{
        item: ItemType.SpiderSilk
    }],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 0,
    makeNoise: !0,
    jumpOver: !0,
    malignity: -100
}, monsters[MonsterType.Bear] = {
    minhp: 18,
    maxhp: 21,
    minatk: 5,
    maxatk: 13,
    defense: new Defense(3, new Resistances(DamageType.Piercing, 3, DamageType.Blunt, 1), new Vulnerabilities),
    damageType: DamageType.Slashing | DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater | MoveType.Water,
    waterAnimations: !0,
    canCauseStatus: [StatusType.Bleeding],
    spawnTiles: MonsterSpawnableTiles.DefaultWithWater,
    spawnMalignity: 18e3,
    makeNoise: !0,
    breaksWalls: !0,
    malignity: -300
}, monsters[MonsterType.Rabbit] = {
    minhp: 3,
    maxhp: 6,
    minatk: 1,
    maxatk: 2,
    defense: new Defense(0, new Resistances, new Vulnerabilities),
    damageType: DamageType.Slashing,
    ai: MonsterAiType.Scared,
    moveType: MoveType.Land | MoveType.ShallowWater,
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 0,
    makeNoise: !0,
    jumpOver: !0,
    malignity: 200,
    spawnOnNegativeMalignity: !0
}, monsters[MonsterType.Snake] = {
    minhp: 5,
    maxhp: 8,
    minatk: 4,
    maxatk: 9,
    defense: new Defense(1, new Resistances(DamageType.Piercing, 1), new Vulnerabilities(DamageType.Fire, 1)),
    damageType: DamageType.Piercing,
    canCauseStatus: [StatusType.Poisoned],
    ai: MonsterAiType.Neutral,
    moveType: MoveType.Land | MoveType.ShallowWater,
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 0,
    makeNoise: !0,
    jumpOver: !0,
    malignity: 100
}, monsters[MonsterType.GiantRat] = {
    minhp: 5,
    maxhp: 8,
    minatk: 2,
    maxatk: 5,
    defense: new Defense(1, new Resistances(DamageType.Blunt, 1), new Vulnerabilities(DamageType.Fire, 1)),
    damageType: DamageType.Slashing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    canCauseStatus: [StatusType.Bleeding],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 0,
    makeNoise: !0,
    jumpOver: !0,
    malignity: -100
}, monsters[MonsterType.Rat] = {
    minhp: 3,
    maxhp: 4,
    minatk: 1,
    maxatk: 2,
    defense: new Defense(0, new Resistances, new Vulnerabilities),
    damageType: DamageType.Slashing,
    ai: MonsterAiType.Scared,
    moveType: MoveType.Land | MoveType.ShallowWater,
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 0,
    makeNoise: !0,
    jumpOver: !0,
    malignity: 100,
    spawnOnNegativeMalignity: !0
}, monsters[MonsterType.VampireBat] = {
    minhp: 6,
    maxhp: 12,
    minatk: 2,
    maxatk: 5,
    defense: new Defense(2, new Resistances(DamageType.Piercing, 2), new Vulnerabilities(DamageType.Fire, 3)),
    damageType: DamageType.Piercing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Flying,
    canCauseStatus: [StatusType.Bleeding],
    spawnTiles: MonsterSpawnableTiles.Flying,
    makeNoise: !0,
    jumpOver: !0,
    malignity: -200
}, monsters[MonsterType.GreyWolf] = {
    minhp: 14,
    maxhp: 22,
    minatk: 7,
    maxatk: 9,
    defense: new Defense(3, new Resistances(DamageType.Blunt, 1), new Vulnerabilities),
    damageType: DamageType.Slashing | DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    canCauseStatus: [StatusType.Bleeding],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 1e4,
    makeNoise: !0,
    jumpOver: !0,
    malignity: -200
}, monsters[MonsterType.Imp] = {
    minhp: 28,
    maxhp: 36,
    minatk: 13,
    maxatk: 17,
    defense: new Defense(4, new Resistances(DamageType.Fire, 99), new Vulnerabilities),
    damageType: DamageType.Slashing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Flying,
    loot: [{
        item: ItemType.SpottedRedMushroom
    }, {
        item: ItemType.SpottedRedMushroom,
        chance: 50
    }],
    lootGroup: LootGroupType.High,
    canCauseStatus: [StatusType.Bleeding, StatusType.Burned],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 24e3,
    makeNoise: !0,
    jumpOver: !0,
    malignity: -400
}, monsters[MonsterType.Bogling] = {
    minhp: 30,
    maxhp: 33,
    minatk: 7,
    maxatk: 9,
    defense: new Defense(4, new Resistances(DamageType.Blunt, 2, DamageType.Fire, 4), new Vulnerabilities),
    damageType: DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    loot: [{
        item: ItemType.Peat
    }, {
        item: ItemType.VineWhip,
        chance: 5
    }],
    blood: [70, 90, 20],
    aberrantBlood: [170, 50, 45],
    canCauseStatus: [StatusType.Poisoned],
    lootGroup: LootGroupType.Low,
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 16e3,
    makeNoise: !0,
    malignity: -300
}, monsters[MonsterType.LivingRock] = {
    minhp: 40,
    maxhp: 55,
    minatk: 4,
    maxatk: 6,
    defense: new Defense(5, new Resistances(DamageType.Slashing, 2, DamageType.Fire, 99), new Vulnerabilities(DamageType.Blunt, 2)),
    damageType: DamageType.Blunt,
    ai: MonsterAiType.Neutral,
    moveType: MoveType.None,
    loot: [{
        item: ItemType.LargeRock
    }, {
        item: ItemType.SharpRock
    }],
    blood: [110, 110, 110],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 2e4,
    jumpOver: !0,
    malignity: 100
}, monsters[MonsterType.Shark] = {
    minhp: 13,
    maxhp: 18,
    minatk: 5,
    maxatk: 11,
    defense: new Defense(3, new Resistances(DamageType.Blunt, 1, DamageType.Fire, 99), new Vulnerabilities),
    damageType: DamageType.Slashing | DamageType.Piercing,
    ai: MonsterAiType.Hostile | MonsterAiType.Fearless,
    moveType: MoveType.Water,
    canCauseStatus: [StatusType.Bleeding],
    spawnTiles: MonsterSpawnableTiles.DeepWater,
    malignity: -300
}, monsters[MonsterType.Zombie] = {
    minhp: 15,
    maxhp: 25,
    minatk: 5,
    maxatk: 14,
    defense: new Defense(5, new Resistances(DamageType.Piercing, 1, DamageType.Blunt, 1), new Vulnerabilities(DamageType.Fire, 5, DamageType.Slashing, 1)),
    damageType: DamageType.Slashing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    loot: [{
        item: ItemType.Bone
    }, {
        item: ItemType.TatteredPants,
        chance: 5
    }, {
        item: ItemType.TatteredShirt,
        chance: 5
    }],
    lootGroup: LootGroupType.Low,
    canCauseStatus: [StatusType.Poisoned, StatusType.Bleeding],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 16e3,
    makeNoise: !0,
    breaksWalls: !0,
    respawn: !0,
    malignity: -400
}, monsters[MonsterType.Skeleton] = {
    minhp: 22,
    maxhp: 32,
    minatk: 9,
    maxatk: 12,
    defense: new Defense(4, new Resistances(DamageType.Piercing, 2, DamageType.Slashing, 2), new Vulnerabilities(DamageType.Fire, 2, DamageType.Blunt, 2)),
    damageType: DamageType.Blunt | DamageType.Piercing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    loot: [{
        item: ItemType.Bone
    }, {
        item: ItemType.Bone,
        chance: 25
    }],
    lootGroup: LootGroupType.Low,
    blood: [200, 200, 200],
    canCauseStatus: [StatusType.Bleeding],
    spawnTiles: MonsterSpawnableTiles.Default,
    makeNoise: !0,
    respawn: !0,
    malignity: -400
}, monsters[MonsterType.PirateGhost] = {
    minhp: 35,
    maxhp: 48,
    minatk: 13,
    maxatk: 15,
    defense: new Defense(8, new Resistances, new Vulnerabilities(DamageType.Fire, 4)),
    damageType: DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Flying | MoveType.Mountain,
    lootGroup: LootGroupType.High,
    blood: [250, 250, 250],
    spawnTiles: MonsterSpawnableTiles.Ghost,
    spawnMalignity: 36e3,
    jumpOver: !0,
    malignity: -500
}, monsters[MonsterType.TimeSkitter] = {
    minhp: 19,
    maxhp: 24,
    minatk: 14,
    maxatk: 18,
    defense: new Defense(8, new Resistances, new Vulnerabilities),
    damageType: DamageType.Slashing | DamageType.Piercing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    lootGroup: LootGroupType.High,
    canCauseStatus: [StatusType.Bleeding],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 32e3,
    makeNoise: !0,
    jumpOver: !0,
    malignity: -500
}, monsters[MonsterType.Chicken] = {
    minhp: 3,
    maxhp: 6,
    minatk: 1,
    maxatk: 3,
    defense: new Defense(0, new Resistances, new Vulnerabilities),
    damageType: DamageType.Slashing,
    ai: MonsterAiType.Scared,
    moveType: MoveType.Land | MoveType.ShallowWater,
    loot: [{
        item: ItemType.Feather
    }, {
        item: ItemType.Feather,
        chance: 75
    }],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 4e3,
    makeNoise: !0,
    jumpOver: !0,
    malignity: 200,
    spawnOnNegativeMalignity: !0
}, monsters[MonsterType.TrapdoorSpider] = {
    minhp: 4,
    maxhp: 9,
    minatk: 2,
    maxatk: 3,
    defense: new Defense(0, new Resistances(DamageType.Piercing, 1), new Vulnerabilities(DamageType.Blunt, 1)),
    damageType: DamageType.Piercing,
    ai: MonsterAiType.Hidden,
    moveType: MoveType.Land | MoveType.ShallowWater,
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 2e3,
    jumpOver: !0,
    malignity: -100
}, monsters[MonsterType.FireElemental] = {
    minhp: 30,
    maxhp: 38,
    minatk: 11,
    maxatk: 19,
    defense: new Defense(5, new Resistances(DamageType.Fire, 100), new Vulnerabilities),
    damageType: DamageType.Fire | DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Flying,
    lootGroup: LootGroupType.High,
    loot: [{
        item: ItemType.PileOfAsh
    }],
    blood: [205, 105, 25],
    canCauseStatus: [StatusType.Burned],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 28e3,
    makeNoise: !0,
    malignity: -400
}, monsters[MonsterType.Cod] = {
    minhp: 3,
    maxhp: 4,
    minatk: 0,
    maxatk: 1,
    defense: new Defense(0, new Resistances(DamageType.Fire, 99, DamageType.Blunt, 1, DamageType.Slashing, 1), new Vulnerabilities),
    damageType: DamageType.Blunt,
    ai: MonsterAiType.Neutral,
    moveType: MoveType.Water | MoveType.ShallowWater,
    loot: [{
        item: ItemType.RawCod
    }],
    spawnTiles: MonsterSpawnableTiles.Water,
    jumpOver: !0,
    noCorpse: !0,
    fishable: !0,
    malignity: 100,
    spawnOnNegativeMalignity: !0
}, monsters[MonsterType.Hobgoblin] = {
    minhp: 29,
    maxhp: 32,
    minatk: 7,
    maxatk: 14,
    defense: new Defense(3, new Resistances(DamageType.Blunt, 1), new Vulnerabilities),
    damageType: DamageType.Slashing | DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    loot: [{
        item: ItemType.TatteredPants,
        chance: 5
    }],
    lootGroup: LootGroupType.Low,
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 22e3,
    makeNoise: !0,
    breaksWalls: !0,
    malignity: -300
}, monsters[MonsterType.LivingMushroom] = {
    minhp: 14,
    maxhp: 24,
    minatk: 6,
    maxatk: 10,
    defense: new Defense(2, new Resistances(DamageType.Fire, 3), new Vulnerabilities(DamageType.Slashing, 2)),
    damageType: DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    loot: [{
        item: ItemType.WhiteMushrooms
    }],
    blood: [175, 155, 135],
    aberrantBlood: [150, 45, 25],
    spawnTiles: MonsterSpawnableTiles.Default,
    makeNoise: !0,
    malignity: -300
}, monsters[MonsterType.Kraken] = {
    minhp: 130,
    maxhp: 150,
    minatk: 20,
    maxatk: 22,
    defense: new Defense(4, new Resistances(DamageType.Slashing, 2), new Vulnerabilities(DamageType.Fire, 2)),
    damageType: DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater | MoveType.Water,
    lootGroup: LootGroupType.SeaTreasure,
    loot: [{
        item: ItemType.OrnateWoodenChest,
        chance: 3
    }],
    blood: [80, 150, 175],
    aberrantBlood: [220, 30, 90],
    spawnTiles: MonsterSpawnableTiles.Water,
    spawnMalignity: 4e4,
    makeNoise: !0,
    breaksWalls: !0,
    malignity: -500
}, monsters[MonsterType.Blindfish] = {
    minhp: 4,
    maxhp: 5,
    minatk: 1,
    maxatk: 2,
    defense: new Defense(1, new Resistances(DamageType.Fire, 99, DamageType.Blunt, 2, DamageType.Slashing, 2), new Vulnerabilities),
    damageType: DamageType.Blunt,
    ai: MonsterAiType.Neutral,
    moveType: MoveType.Water | MoveType.ShallowWater,
    loot: [{
        item: ItemType.RawBlindfish
    }],
    spawnTiles: MonsterSpawnableTiles.Water,
    jumpOver: !0,
    noCorpse: !0,
    fishable: !0,
    malignity: -100,
    spawnOnNegativeMalignity: !0
}, monsters[MonsterType.Harpy] = {
    minhp: 27,
    maxhp: 34,
    minatk: 7,
    maxatk: 14,
    defense: new Defense(4, new Resistances(DamageType.Slashing, 2), new Vulnerabilities(DamageType.Fire, 2)),
    damageType: DamageType.Slashing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Flying,
    canCauseStatus: [StatusType.Bleeding],
    loot: [{
        item: ItemType.Feather
    }, {
        item: ItemType.Feather,
        chance: 75
    }],
    lootGroup: LootGroupType.Low,
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 32e3,
    makeNoise: !0,
    malignity: -300
}, monsters[MonsterType.AcidSpitterDemon] = {
    minhp: 45,
    maxhp: 58,
    minatk: 22,
    maxatk: 24,
    defense: new Defense(9, new Resistances(DamageType.Slashing, 1, DamageType.Blunt, 1, DamageType.Fire, 10, DamageType.Piercing, 2), new Vulnerabilities),
    damageType: DamageType.Slashing | DamageType.Piercing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    canCauseStatus: [StatusType.Bleeding],
    lootGroup: LootGroupType.High,
    blood: [20, 180, 20],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 52e3,
    makeNoise: !0,
    malignity: -600
}, monsters[MonsterType.SkeletalMage] = {
    minhp: 68,
    maxhp: 72,
    minatk: 18,
    maxatk: 22,
    defense: new Defense(7, new Resistances(DamageType.Slashing, 3, DamageType.Fire, 3, DamageType.Piercing, 3), new Vulnerabilities(DamageType.Blunt, 2)),
    damageType: DamageType.Slashing | DamageType.Piercing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    canCauseStatus: [StatusType.Bleeding],
    lootGroup: LootGroupType.High,
    loot: [{
        item: ItemType.SkeletalMageWand
    }],
    blood: [200, 200, 200],
    spawnTiles: MonsterSpawnableTiles.Default,
    spawnMalignity: 44e3,
    makeNoise: !0,
    malignity: -600
}, monsters[MonsterType.ClawWorm] = {
    minhp: 13,
    maxhp: 18,
    minatk: 1,
    maxatk: 6,
    defense: new Defense(2, new Resistances(DamageType.Piercing, 1), new Vulnerabilities(DamageType.Fire, 2)),
    damageType: DamageType.Piercing,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    spawnTiles: MonsterSpawnableTiles.Default,
    makeNoise: !0,
    jumpOver: !0,
    malignity: -100
}, monsters[MonsterType.Drake] = {
    minhp: 220,
    maxhp: 260,
    minatk: 26,
    maxatk: 30,
    defense: new Defense(10, new Resistances(DamageType.Slashing, 2, DamageType.Blunt, 2, DamageType.Fire, 100), new Vulnerabilities(DamageType.Piercing, 2)),
    damageType: DamageType.Slashing | DamageType.Piercing | DamageType.Blunt,
    ai: MonsterAiType.Hostile,
    moveType: MoveType.Land | MoveType.ShallowWater,
    canCauseStatus: [StatusType.Bleeding, StatusType.Burned],
    lootGroup: LootGroupType.High,
    spawnTiles: MonsterSpawnableTiles.Default,
    loot: [{
        item: ItemType.GoldenKey
    }],
    spawnMalignity: 64e3,
    makeNoise: !0,
    malignity: -1e3
};
var SkillLevel = function() {
        function e() {
            this.percent = 0, this.bonus = 0, this.core = 0
        }
        return e
    }(),
    skillDescriptions = Array();
skillDescriptions[SkillType.Chemistry] = {
    attribute: StatType.Hunger,
    malignity: 10
}, skillDescriptions[SkillType.Anatomy] = {
    attribute: StatType.Hunger,
    malignity: 20
}, skillDescriptions[SkillType.Archery] = {
    attribute: StatType.Health,
    malignity: 80
}, skillDescriptions[SkillType.Blacksmithing] = {
    attribute: StatType.Health,
    malignity: 60
}, skillDescriptions[SkillType.Botany] = {
    attribute: StatType.Hunger,
    malignity: 10
}, skillDescriptions[SkillType.Camping] = {
    attribute: StatType.Stamina,
    malignity: 10
}, skillDescriptions[SkillType.Cartography] = {
    attribute: StatType.Stamina
}, skillDescriptions[SkillType.Claythrowing] = {
    attribute: StatType.Stamina
}, skillDescriptions[SkillType.Cooking] = {
    attribute: StatType.Hunger
}, skillDescriptions[SkillType.Fishing] = {
    attribute: StatType.Stamina,
    malignity: 20
}, skillDescriptions[SkillType.Fletching] = {
    attribute: StatType.Stamina,
    malignity: 40
}, skillDescriptions[SkillType.Glassblowing] = {
    attribute: StatType.Stamina
}, skillDescriptions[SkillType.Leatherworking] = {
    attribute: StatType.Health,
    malignity: 40
}, skillDescriptions[SkillType.LockPicking] = {
    attribute: StatType.Stamina,
    malignity: 80
}, skillDescriptions[SkillType.Lumberjacking] = {
    attribute: StatType.Health,
    malignity: 40
}, skillDescriptions[SkillType.Mining] = {
    attribute: StatType.Health,
    malignity: 40
}, skillDescriptions[SkillType.Mycology] = {
    attribute: StatType.Hunger,
    malignity: 10
}, skillDescriptions[SkillType.Parrying] = {
    attribute: StatType.Health,
    malignity: 120
}, skillDescriptions[SkillType.Stonecrafting] = {
    attribute: StatType.Health,
    malignity: 20
}, skillDescriptions[SkillType.Swimming] = {
    attribute: StatType.Stamina
}, skillDescriptions[SkillType.Tactics] = {
    attribute: StatType.Health,
    malignity: 120
}, skillDescriptions[SkillType.Tailoring] = {
    attribute: StatType.Stamina
}, skillDescriptions[SkillType.Throwing] = {
    attribute: StatType.Stamina,
    malignity: 80
}, skillDescriptions[SkillType.Tinkering] = {
    attribute: StatType.Stamina,
    malignity: 40
}, skillDescriptions[SkillType.Trapping] = {
    attribute: StatType.Stamina,
    malignity: 80
}, skillDescriptions[SkillType.Woodworking] = {
    attribute: StatType.Health,
    malignity: 40
};
var corpses = Array();
corpses[MonsterType.Blood] = {
    decay: 10
}, corpses[MonsterType.Bear] = {
    resource: [{
        item: ItemType.RawMeat
    }, {
        item: ItemType.RawMeat
    }, {
        item: ItemType.LeatherHide
    }, {
        item: ItemType.AnimalFat
    }, {
        item: ItemType.AnimalSkull
    }, {
        item: ItemType.Offal
    }, {
        item: ItemType.Bones
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Rabbit] = {
    resource: [{
        item: ItemType.RawMeat
    }, {
        item: ItemType.LeatherHide
    }, {
        item: ItemType.Offal
    }, {
        item: ItemType.Bones
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.GiantRat] = {
    resource: [{
        item: ItemType.RawTaintedMeat
    }, {
        item: ItemType.LeatherHide
    }, {
        item: ItemType.AnimalFat
    }, {
        item: ItemType.Offal
    }, {
        item: ItemType.Bones
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.GreyWolf] = {
    resource: [{
        item: ItemType.RawMeat
    }, {
        item: ItemType.LeatherHide
    }, {
        item: ItemType.AnimalFat
    }, {
        item: ItemType.Offal
    }, {
        item: ItemType.Bones
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.VampireBat] = {
    resource: [{
        item: ItemType.RawMeat
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Snake] = {
    resource: [{
        item: ItemType.RawMeat
    }, {
        item: ItemType.VenomGland,
        chance: 3
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Slime] = {
    resource: [{
        item: ItemType.SlimeGelatin
    }],
    decay: 95
}, corpses[MonsterType.JellyCube] = {
    resource: [{
        item: ItemType.SlimeGelatin
    }, {
        item: ItemType.SlimeGelatin
    }],
    decay: 95
}, corpses[MonsterType.GiantSpider] = {
    resource: [{
        item: ItemType.DeadSpider
    }, {
        item: ItemType.SpiderEggs,
        chance: 2
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Zombie] = {
    resource: [{
        item: ItemType.RottenMeat
    }, {
        item: ItemType.Bones
    }],
    decay: 30,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Imp] = {
    resource: [{
        item: ItemType.RawTaintedMeat
    }, {
        item: ItemType.Bones
    }, {
        item: ItemType.FireBladder,
        chance: 2
    }],
    decay: 50,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Bogling] = {
    resource: [{
        item: ItemType.PileOfCompost
    }, {
        item: ItemType.RottingVegetation
    }],
    decay: 50,
    skill: SkillType.Botany
}, corpses[MonsterType.LivingRock] = {
    resource: [{
        item: ItemType.Talc
    }, {
        item: ItemType.Limestone
    }, {
        item: ItemType.IronOre,
        chance: 90
    }],
    skill: SkillType.Mining
}, corpses[MonsterType.Shark] = {
    resource: [{
        item: ItemType.RawFishSteak
    }, {
        item: ItemType.RawFishSteak
    }, {
        item: ItemType.Offal
    }],
    decay: 30,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Rat] = {
    resource: [{
        item: ItemType.RawTaintedMeat
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Skeleton] = {
    resource: [{
        item: ItemType.Bone
    }, {
        item: ItemType.Bone
    }],
    skill: SkillType.Anatomy
}, corpses[MonsterType.PirateGhost] = {
    resource: [{
        item: ItemType.Ectoplasm
    }],
    decay: 5
}, corpses[MonsterType.TimeSkitter] = {
    resource: [{
        item: ItemType.RawMeat
    }, {
        item: ItemType.Offal
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Chicken] = {
    resource: [{
        item: ItemType.Feather
    }, {
        item: ItemType.Feather
    }, {
        item: ItemType.RawChicken
    }, {
        item: ItemType.Egg
    }, {
        item: ItemType.Egg,
        chance: 75
    }, {
        item: ItemType.Bones
    }, {
        item: ItemType.TailFeathers,
        chance: 1
    }],
    decay: 55,
    skill: SkillType.Anatomy
}, corpses[MonsterType.TrapdoorSpider] = {
    resource: [{
        item: ItemType.DeadSpider
    }, {
        item: ItemType.SpiderEggs,
        chance: 2
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.FireElemental] = {
    resource: [{
        item: ItemType.Coal
    }, {
        item: ItemType.MeltedAmber
    }],
    decay: 20,
    skill: SkillType.Mining
}, corpses[MonsterType.Hobgoblin] = {
    resource: [{
        item: ItemType.RawMeat
    }, {
        item: ItemType.Bones
    }, {
        item: ItemType.Offal
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.LivingMushroom] = {
    resource: [{
        item: ItemType.WhiteMushrooms
    }, {
        item: ItemType.WhiteMushrooms
    }],
    decay: 150,
    skill: SkillType.Mycology
}, corpses[MonsterType.Kraken] = {
    resource: [{
        item: ItemType.RawFishSteak
    }, {
        item: ItemType.RawFishSteak
    }, {
        item: ItemType.RawFishSteak
    }, {
        item: ItemType.Offal
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Harpy] = {
    resource: [{
        item: ItemType.RawChicken
    }, {
        item: ItemType.Feather
    }, {
        item: ItemType.Feather
    }, {
        item: ItemType.TailFeathers,
        chance: 3
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.AcidSpitterDemon] = {
    resource: [{
        item: ItemType.RawTaintedMeat
    }, {
        item: ItemType.MagicalEssence
    }, {
        item: ItemType.Bones
    }],
    decay: 95,
    damage: 12,
    skill: SkillType.Anatomy
}, corpses[MonsterType.SkeletalMage] = {
    resource: [{
        item: ItemType.Bone
    }, {
        item: ItemType.CottonFabric
    }],
    skill: SkillType.Anatomy
}, corpses[MonsterType.ClawWorm] = {
    resource: [{
        item: ItemType.RawTaintedMeat
    }],
    decay: 95,
    skill: SkillType.Anatomy
}, corpses[MonsterType.Drake] = {
    resource: [{
        item: ItemType.RawMeat
    }, {
        item: ItemType.RawMeat
    }, {
        item: ItemType.RawMeat
    }, {
        item: ItemType.FireBladder
    }, {
        item: ItemType.AnimalFat
    }, {
        item: ItemType.AnimalSkull
    }, {
        item: ItemType.Offal
    }, {
        item: ItemType.Bones
    }],
    decay: 95,
    skill: SkillType.Anatomy
};
var Actions;
! function(e) {
    function t(e, t) {
        ae[e] = t
    }

    function i(e) {
        delete ae[e]
    }

    function a(e, t) {
        switch (e) {
            case ActionType.Pickup:
                return void Doodad.pickup(player.x + player.direction.x, player.y + player.direction.y, player.z);
            case ActionType.Throw:
                return void y(t, AttackType.ThrowItem);
            case ActionType.Attack:
                return void y(t);
            case ActionType.Rest:
                c(t, RestType.Resting);
                break;
            case ActionType.Gather:
                Y(t);
                break;
            default:
                var i = ae[e];
                if (i) return void i(t)
        }
        if (t) switch (e) {
            case ActionType.Disassemble:
                v(t);
                break;
            case ActionType.Dismantle:
                f(t);
                break;
            case ActionType.StartFire:
                I(t);
                break;
            case ActionType.Carve:
                M(t);
                break;
            case ActionType.SetDown:
                k(t);
                break;
            case ActionType.Eat:
                b(t);
                break;
            case ActionType.Drink:
                w(t);
                break;
            case ActionType.Sleep:
                D(t);
                break;
            case ActionType.Heal:
                C(t);
                break;
            case ActionType.Dig:
                F(t);
                break;
            case ActionType.Paddle:
                R(t);
                break;
            case ActionType.GatherWater:
                A(t);
                break;
            case ActionType.Shoot:
                B(t);
                break;
            case ActionType.Cast:
                L(t);
                break;
            case ActionType.LockPick:
                x(t);
                break;
            case ActionType.Sling:
                G(t);
                break;
            case ActionType.Repair:
                d(t);
                break;
            case ActionType.Decode:
                U(t);
                break;
            case ActionType.Read:
                W(t);
                break;
            case ActionType.Reinforce:
                p(t);
                break;
            case ActionType.StokeFire:
                E(t);
                break;
            case ActionType.Garden:
                P(t);
                break;
            case ActionType.Pour:
                H(t);
                break;
            case ActionType.PourOnYourself:
                O(t);
                break;
            case ActionType.Plant:
                N(t);
                break;
            case ActionType.GatherTreasure:
                q(t);
                break;
            case ActionType.Ignite:
                _(t);
                break;
            case ActionType.Build:
                z(t);
                break;
            case ActionType.OpenContainer:
                l(t, game.getName(Item.defines[t.type], TextCase.Title));
                break;
            case ActionType.Preserve:
                n(t);
                break;
            case ActionType.Open:
                K(t);
                break;
            case ActionType.DrinkCure:
                j(t);
                break;
            case ActionType.TellTime:
                Q(t);
                break;
            case ActionType.TraverseTheSea:
                X(t, !0);
                break;
            case ActionType.SailToCivilization:
                X(t, !1);
                break;
            case ActionType.Transmogrify:
                u(t);
                break;
            case ActionType.Fire:
                $(t);
                break;
            case ActionType.Teleport:
                Z(t);
                break;
            case ActionType.Extinguish:
                h(t);
                break;
            case ActionType.DrawMap:
                J(t);
                break;
            case ActionType.Squeeze:
                ie(t)
        }
    }

    function n(e, t) {
        if (void 0 === t && (t = null), !t) {
            var i = game.getTileInFrontOfPlayer(),
                a = i;
            a.containedItems && a.containedItems.length > 0 && (t = a.containedItems[a.containedItems.length - 1])
        }
        if (void 0 === t || null === t) return void ui.displayMessage(Message.NotFacingValidFoodForPreservation);
        var n = Item.defines[t.type];
        if (n && n.decayMax && n.use && n.use.indexOf(ActionType.Eat) !== -1 && n.use.indexOf(ActionType.Preserve) === -1) {
            if (t.decay > 2 * n.decayMax) return void ui.displayMessage(Message.FoodAlreadyPreserved);
            var o = Math.ceil(100 * Utilities.Random.nextFloat()),
                r = SkillType.Cooking;
            n.recipe && n.recipe.skill && (r = n.recipe.skill), player.skills[r].percent >= o - 20 ? (t.decay = 2 * n.decayMax + Math.floor(500 * Utilities.Random.nextFloat() - 250), player.skillGain(r, !1, !1), ui.displayMessage(Message.PreservedFood), audio.queueEffect(SfxType.Craft), Item.remove(e), player.updateMalignity(-25)) : (player.skillGain(r, .1, !1), ui.displayMessage(Message.FailedToPreserve, MessageType.Bad), Item.damage(e), audio.queueEffect(SfxType.Fail)), player.staminaReduction(r), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
        } else ui.displayMessage(Message.CannotBePreserved)
    }

    function o(e, t) {
        var i = Item.defines[e.type].onUse,
            a = 0,
            n = Item.defines[t.type];
        if (i && (a = 20 * i[ActionType.StokeFire]), a + t.decay >= 3 * n.decayMax) return void ui.displayMessage(Message.CannotAddAnyMoreFuel, MessageType.None, game.getName(n));
        var o = Math.ceil(100 * Utilities.Random.nextFloat()),
            r = SkillType.Camping;
        player.skills[r].percent >= o - 35 ? (t.decay += a, player.skillGain(r, !1, !1), ui.displayMessage(Message.AddedFuelToTorch), audio.queueEffect(SfxType.Throw), Item.remove(e)) : (player.skillGain(r, .1, !1), ui.displayMessage(Message.FailedToAddFuelToTorch, MessageType.Bad), Item.damage(e), audio.queueEffect(SfxType.Fail)), player.staminaReduction(r), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function r(e, t) {
        var i = Mods.callHook(Mods.Hook.CanConsumeItem, e, t);
        if (void 0 !== i) return i;
        var a = 0,
            n = Item.defines[e];
        if (n.skillUse && (a = Math.floor(player.skills[n.skillUse].percent / 10), a = Math.floor(Utilities.Random.nextFloat() * a / 2), player.skillGain(n.skillUse, !1, !1)), !n.onUse) return !1;
        var o = n.onUse[t],
            r = o[0],
            s = o[1],
            l = o[2],
            p = o[3];
        if (r > 0 && (r += a), s > 0 && (s += a), l > 0 && (l += a), p > 0 && (p += a), 0 !== r)
            if (r > 0) player.health += r, game.notifier.addStat(player.x, player.y, StatType.Health, r), ui.displayMessage(Message.GainedHealth, MessageType.None, r);
            else if (r < 0 && (ui.displayMessage(Message.LostHealth, MessageType.Bad, -r), player.damage(r, messages[Message.ByEatingSomethingBad]), ui.displayHint(HintType.ConsumingBadThings), !player.status.poisoned)) {
            var d = Math.ceil(100 * Utilities.Random.nextFloat()),
                u = Math.floor(player.skills[SkillType.Anatomy].percent / 10);
            d <= 20 - u && (ui.displayMessage(Message.BeenPoisoned, MessageType.Bad), player.skillGain(SkillType.Anatomy, .1, !1), player.status.poisoned = !0)
        }
        0 !== s && (player.stamina += s, game.notifier.addStat(player.x, player.y, StatType.Stamina, s), s > 0 ? ui.displayMessage(Message.GainedStamina, MessageType.None, s) : s < 0 && ui.displayMessage(Message.LostStamina, MessageType.Bad, -s));
        var g = !1,
            m = !1;
        if (0 !== l && l > 0 && player.hunger >= player.starvation && (p <= 0 || player.thirst >= player.dehydration) && (g = !0), 0 !== p && p > 0 && player.thirst >= player.dehydration && (l <= 0 || player.hunger >= player.starvation) && (m = !0), 0 !== l && (game.notifier.addStat(player.x, player.y, StatType.Hunger, l), l > 0 ? ui.displayMessage(Message.LostHunger, MessageType.None, l) : l < 0 && ui.displayMessage(Message.GainedHunger, MessageType.Bad, -l), player.hunger += l, player.hunger < 0 && (player.hunger = 0)), g) {
            var y = Math.ceil(player.dexterity / 5);
            player.stamina -= y, game.notifier.addStat(player.x, player.y, StatType.Stamina, -y), ui.displayMessage(Message.OverEatingLostStamina, MessageType.Bad), audio.queueEffect(SfxType.Hurt)
        }
        if (0 !== p && (game.notifier.addStat(player.x, player.y, StatType.Thirst, p), p > 0 ? ui.displayMessage(Message.LostThirst, MessageType.None, p) : p < 0 && ui.displayMessage(Message.GainedThirst, MessageType.Bad, -p), player.thirst += p, p > 0 && player.thirst < 0 && (player.thirst = 0)), m) {
            var y = Math.ceil(player.dexterity / 5);
            player.stamina -= y, game.notifier.addStat(player.x, player.y, StatType.Stamina, -y), ui.displayMessage(Message.OverHydratingLostStamina, MessageType.Bad), audio.queueEffect(SfxType.Hurt)
        }
        return audio.queueEffect(SfxType.Eating), game.updateGame(), n.onUse[ActionType.Heal] ? (ui.displayMessage(Message.YouUsed, MessageType.None, game.getName(n)), player.status.bleeding && (player.status.bleeding = !1, game.placeCorpse({
            type: MonsterType.Blood,
            x: player.x,
            y: player.y,
            z: player.z
        }), player.addMilestone(MilestoneType.Doctor, StatusType.Bleeding), ui.displayMessage(Message.StoppedYourBleeding)), !0) : !!n.onUse[ActionType.DrinkCure] && (ui.displayMessage(Message.YouDrank, MessageType.None, game.getName(n)), player.status.poisoned && (player.status.poisoned = !1, player.addMilestone(MilestoneType.Doctor, StatusType.Poisoned), ui.displayMessage(Message.CuredYourPoison)), !0)
    }

    function s(e, t) {
        var i = Item.defines[e.type],
            a = !1,
            n = i.onUse;
        if (n && n[ActionType.Heal]) {
            var o = Math.ceil(100 * Utilities.Random.nextFloat()),
                s = i.skillUse;
            s && player.skills[s].percent <= o - 75 && (ui.displayMessage(Message.YouFailedToHeal, MessageType.Bad, skillDescriptions[s].name), Item.damage(e), player.skillGain(s, .1, !1), audio.queueEffect(SfxType.Fail), a = !0)
        }
        if (!a) {
            if (!r(e.type, t)) {
                var l = void 0;
                l = n && n[ActionType.Drink] ? Message.YouDrank : Message.YouAte, ui.displayMessage(l, MessageType.None, game.getName(i))
            }
            Item.returns(e) || Item.remove(e)
        }
        player.updateMalignity(-25), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function l(e, t, i) {
        return ui.isContainerOpen(e) ? void ui.closeContainer(e) : (t ? (ui.displayMessage(Message.YouOpen, MessageType.None, t), ui.openContainer(e, messages[Message.Container] + " (" + t + ")")) : ui.openContainer(e), void(i || (audio.queueEffect(SfxType.PickUp), game.addDelay(Delay.Collision))))
    }

    function p(e, t) {
        if (void 0 === t && (t = null), !t) {
            var i = game.getTileInFrontOfPlayer(),
                a = i;
            if (a.containedItems)
                for (var n = 0; n < a.containedItems.length; n++) {
                    var o = a.containedItems[n];
                    if (Item.defines[o.type].durability) {
                        t = o;
                        break
                    }
                }
        }
        if (t)
            if (Item.defines[t.type].durability) {
                var r = Math.ceil(100 * Utilities.Random.nextFloat()),
                    s = SkillType.Tinkering,
                    l = Item.defines[t.type].recipe;
                if (l && l.skill && (s = l.skill), player.skills[s].percent >= r - 20) {
                    var p = Math.floor(5 * Utilities.Random.nextFloat() + 5);
                    t.maxDur += p, player.skillGain(s, !1, !1), t.minDur += Math.floor(p / 2), t.minDur > t.maxDur && (t.minDur = t.maxDur), ui.displayMessage(Message.Reinforce, MessageType.None, game.getName(Item.defines[t.type])), audio.queueEffect(SfxType.Craft), Item.remove(e), t.minDur > 2 && ui.updateItem(t)
                } else player.skillGain(s, .1, !1), ui.displayMessage(Message.FailedToReinforce, MessageType.Bad, game.getName(Item.defines[t.type])), Item.damage(e), audio.queueEffect(SfxType.Fail);
                player.updateMalignity(25), player.staminaReduction(s), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
            } else ui.displayMessage(Message.CannotBeReinforced, MessageType.None, game.getName(Item.defines[t.type]));
        else ui.displayMessage(Message.NotFacingValidItemForReinforcement)
    }

    function d(e, t) {
        var i = game.getTile(player.x, player.y, player.z);
        if (terrains[Utilities.TileHelpers.getType(i)].water) return void ui.displayMessage(Message.CannotInWater, MessageType.None, messages[Message.Repair]);
        var a = !0;
        if (!t) {
            var n = game.getTileInFrontOfPlayer(),
                o = n;
            if (o.containedItems)
                for (var r = 0; r < o.containedItems.length; r++) {
                    var s = o.containedItems[r];
                    if (Item.defines[s.type].durability && s.minDur < s.maxDur && Item.defines[s.type].repairable !== !1) {
                        t = s, a = !0;
                        break
                    }
                }
            void 0 !== n.doodadId && (t = game.doodads[n.doodadId], a = !1)
        }
        if (void 0 === t || null === t) return void ui.displayMessage(Message.NotFacingValidItemForRepair);
        var l;
        if (l = a ? Item.defines[t.type] : Doodad.defines[t.type], !a || Item.hasRequiredDoodad(t.type, Message.Repair)) {
            if (a && !Item.defines[t.type].durability || !a && !Doodad.defines[t.type].repairable) return void ui.displayMessage(Message.CannotBeRepaired, MessageType.None, game.getName(l, TextCase.Sentence));
            if (t.minDur >= t.maxDur) return void ui.displayMessage(Message.AlreadyFullyRepaired, MessageType.None, game.getName(l, TextCase.Sentence));
            if (!a && Doodad.defines[t.type].fire) return void ui.displayMessage(Message.CannotRepairWhileLit, MessageType.None, game.getName(l));
            var p = Math.ceil(100 * Utilities.Random.nextFloat()),
                d = SkillType.Tinkering,
                u = Item.defines[t.type].recipe;
            if (a && u && u.skill) d = u.skill;
            else if (!a) {
                var g = Doodad.defines[t.type].resource;
                g && g[0].item && (u = Item.defines[g[0].item].recipe, u && u.skill && (d = u.skill))
            }
            if (player.skills[d].percent >= p - 20) {
                var m = Math.floor((t.maxDur - t.minDur) / 3);
                if (m <= 0 && (m = 1), t.maxDur -= m, t.maxDur <= 1) return audio.queueEffect(SfxType.Fail), a ? Item.remove(t) : Doodad.remove(t), ui.displayMessage(Message.BrokeIntoPieces, MessageType.Bad, game.getName(l, TextCase.Sentence)), Item.damage(e), player.staminaReduction(d), game.updateCraftTableAndWeightNextTurn(), void game.passTurn();
                player.skillGain(d, !1, !1), t.minDur = t.maxDur, ui.displayMessage(Message.YouRepair, MessageType.None, game.getName(l)), audio.queueEffect(SfxType.Craft), a && t && ui.updateItem(t)
            } else player.skillGain(d, .1, !1), ui.displayMessage(Message.FailedToRepair, MessageType.Bad, game.getName(l)), audio.queueEffect(SfxType.Fail);
            player.staminaReduction(d), Item.damage(e), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
        }
    }

    function u(e, t) {
        if (!t) {
            var i = game.getTileInFrontOfPlayer(),
                a = i;
            if (a.containedItems)
                for (var n = 0; n < a.containedItems.length; n++) {
                    var o = a.containedItems[n];
                    if (Item.defines[o.type].equip) {
                        t = o;
                        break
                    }
                }
        }
        if (void 0 === t || null === t) return void ui.displayMessage(Message.NotFacingValidItemToTransmogrify);
        if (!Item.defines[t.type].equip) return void ui.displayMessage(Message.CannotBeTransmogrified, MessageType.None, game.getName(Item.defines[t.type]));
        var r = Math.ceil(100 * Utilities.Random.nextFloat()),
            s = SkillType.Tinkering,
            l = Item.defines[t.type].recipe;
        l && l.skill && (s = l.skill), r >= 75 - player.skills[s].percent / 4 ? (player.skillGain(s, !1, !1), t.minDur = t.maxDur,
            ui.displayMessage(Message.Transmogrified, MessageType.None, game.getName(Item.defines[t.type])), Item.Quality.update(t, ItemQuality.Legendary), audio.queueEffect(SfxType.Craft), Item.remove(e), player.updateMalignity(250), game.updateCraftTableAndWeightNextTurn(), game.passTurn(), t && ui.updateItem(t), player.addMilestone(MilestoneType.Artificer)) : (player.skillGain(s, .1, !1), ui.displayMessage(Message.FailedToTransmogrify, MessageType.Bad, game.getName(Item.defines[t.type])), Item.damage(e), audio.queueEffect(SfxType.Fail)), player.staminaReduction(s), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function g(e, t) {
        for (var i = game.inspect(e, t), a = 0, n = i; a < n.length; a++) {
            var o = n[a];
            ui.displayMessagePack(o.messagePack)
        }
    }

    function m(e, t) {
        var i, a, n = null,
            o = null,
            r = 0,
            s = null,
            l = SkillType.Tactics;
        switch (t) {
            case AttackType.HandToHand:
                n = game.getTile(player.x + player.direction.x, player.y + player.direction.y, player.z).monsterId;
                break;
            case AttackType.Melee:
                n = game.getTile(player.x + player.direction.x, player.y + player.direction.y, player.z).monsterId;
                break;
            case AttackType.Shoot:
            case AttackType.Sling:
            case AttackType.Fire:
                if (!e) return !1;
                t === AttackType.Shoot ? (o = Item.getItemInContainerByGroup(player.inventory, ItemTypeGroup.Arrow), l = SkillType.Archery) : t === AttackType.Fire ? (o = Item.getItemInContainerByGroup(player.inventory, ItemTypeGroup.Bullet), l = SkillType.Archery, t = AttackType.Shoot) : (o = Item.getItemInContainerByGroup(player.inventory, ItemTypeGroup.Bullet), l = SkillType.Throwing, t = AttackType.Shoot);
                var p = o ? Item.defines[e.type].ranged : null;
                if (!o || !p) return ui.displayMessage(Message.NoAmmunitionForThatWeapon), !1;
                r = game.rangeFinder(p.range, player.skills[SkillType.Archery].percent), s = game.checkForMobInRange(r), i = game.getTile(s.x, s.y, s.z), Item.damage(e), s.found ? n = s.id : (e = null, player.skillGain(l, .1, !1), s.obstacle ? ui.displayMessage(Message.FiredIntoObstacle, MessageType.Bad, game.getName(Item.defines[o.type])) : ui.displayMessage(Message.YouFire, MessageType.None, game.getName(Item.defines[o.type])), a = terrains[Utilities.TileHelpers.getType(i)].particles, game.createParticles(s.x, s.y, a[0], a[1], a[2], 3)), o.minDur--, o.minDur >= 0 ? terrains[Utilities.TileHelpers.getType(i)].water ? (Item.remove(o), audio.queueEffect(SfxType.Water)) : Item.placeOnTile(o, s.x, s.y, s.z, !0) : (ui.displayMessage(Message.BrokenWhileFiring, MessageType.Miss, game.getName(Item.defines[o.type])), Item.remove(o)), audio.queueEffect(SfxType.Bow);
                break;
            case AttackType.ThrowItem:
                if (l = SkillType.Throwing, !e) return !1;
                if (!Item.defines[e.type]) return !1;
                if (3 * e.weight >= player.strength) return ui.displayMessage(Message.NotEnoughStrengthToThrow), !1;
                var d = Math.floor(4 / e.weight);
                if (d > 5 && (d = 5), r = game.rangeFinder(d, player.skills[SkillType.Throwing].percent), s = game.checkForMobInRange(r), i = game.getTile(s.x, s.y, s.z), s.found ? n = s.id : (s.obstacle ? ui.displayMessage(Message.ThrownIntoObstacle, MessageType.Bad, game.getName(Item.defines[e.type])) : ui.displayMessage(Message.YouThrew, MessageType.None, game.getName(Item.defines[e.type])), player.skillGain(l, .1, !1), a = terrains[Utilities.TileHelpers.getType(i)].particles, game.createParticles(s.x, s.y, a[0], a[1], a[2], 3)), Item.defines[e.type].damageModifier ? e.minDur -= Item.defines[e.type].damageModifier : e.minDur--, e.minDur >= 0)
                    if (terrains[Utilities.TileHelpers.getType(i)].water) audio.queueEffect(SfxType.Water), ui.displayMessage(Message.ThrownIntoDepths, MessageType.None, game.getName(Item.defines[e.type])), Item.dropInWater(e, e.type);
                    else {
                        var u = Item.defines[e.type].revert;
                        u && (e.type = u), Item.placeOnTile(e, s.x, s.y, s.z, !0)
                    } else ui.displayMessage(Message.BrokenOnImpact, MessageType.Bad, game.getName(Item.defines[e.type])), Item.breakContainerOnTile(e, s.x, s.y, s.z);
                audio.queueEffect(SfxType.Throw), player.addMilestone(MilestoneType.Thrower), Item.isContainer(e) && ui.closeContainer(e), null === n && (e = null)
        }
        var g = null;
        if (null !== n && (g = game.monsters[n]), g && null !== n && (e || t === AttackType.HandToHand)) {
            var m = void 0;
            m = t === AttackType.HandToHand ? messages[Message.YourFist] : !o && e ? game.getName(Item.defines[e.type]) : o ? game.getName(Item.defines[o.type]) : messages[Message.Unknown];
            var y = g.type,
                c = Math.ceil(100 * Utilities.Random.nextFloat());
            if (player.skills[l].percent >= c - 50) {
                var h = void 0;
                t === AttackType.HandToHand ? h = DamageType.Blunt : !o && e ? h = Item.defines[e.type].damageType : o && (h = Item.defines[o.type].damageType), void 0 === h && (h = DamageType.Blunt);
                var T = void 0,
                    f = void 0,
                    p = void 0;
                switch (e && (f = Item.defines[e.type].attack, p = Item.defines[e.type].ranged), t) {
                    case AttackType.Shoot:
                        T = p && o ? p.attack + Item.defines[o.type].attack : 0;
                        break;
                    case AttackType.ThrowItem:
                        T = void 0 !== f ? f : p && p.attack ? p.attack : e ? Math.floor(e.weight / 3) - player.attack : 0;
                        break;
                    case AttackType.HandToHand:
                        T = 0;
                        break;
                    default:
                        T = void 0 !== f ? f : 0
                }
                T += player.attack;
                var v = game.damageMonster(n, T, h, m, !1);
                if (v && (audio.queueEffect(SfxType.Hit), player.skillGain(l, !1, !1)), t !== AttackType.HandToHand && t !== AttackType.Shoot && t !== AttackType.ThrowItem) e && Item.damage(e);
                else if (t === AttackType.HandToHand) {
                    var I = Math.ceil(100 * Utilities.Random.nextFloat());
                    player.skills[SkillType.Tactics].percent <= I - 75 && (ui.displayMessage(Message.HurtHandsHittingWithoutWeapons, MessageType.Bad, game.getName(monsters[y])), player.damage(-1, messages[Message.UsingBareFistsToFight]))
                }
            } else audio.queueEffect(SfxType.Miss), ui.displayMessage(Message.MissedWith, MessageType.Miss, game.getName(monsters[y]), m), player.skillGain(l, .1, !1)
        }
        return t !== AttackType.Shoot && t !== AttackType.ThrowItem || (g && n && game.checkForHiddenMob(g.x, g.y, g.z), game.updateCraftTableAndWeightNextTurn(), game.passTurn()), player.staminaReduction(l), !!g
    }

    function y(e, t) {
        if (void 0 === t && (t = null), null === e || null === t) {
            for (var i = null, a = null, n = 0; n < player.inventory.containedItems.length; n++) {
                var o = player.inventory.containedItems[n];
                o && (o.equipped === EquipType.LeftHand ? i = o : o.equipped === EquipType.RightHand && (a = o))
            }
            var r = m(a, null === a ? AttackType.HandToHand : AttackType.Melee);
            r && m(i, null === i ? AttackType.HandToHand : AttackType.Melee)
        } else m(e, t)
    }

    function c(e, t) {
        if (player.swimming) return void(t === RestType.Resting ? ui.displayMessage(Message.CannotRestHere) : ui.displayMessage(Message.CannotSleepHere));
        if (t === RestType.Resting && player.stamina === player.dexterity) return void ui.displayMessage(Message.StaminaIsFull);
        player.staminaTimer = 0, player.healthTimer = 0, player.hungerTimer = 0, player.thirstTimer = 0;
        var i;
        t === RestType.Resting ? (ui.displayMessage(Message.YouBeginResting), i = Message.Resting) : (ui.displayMessage(Message.BeginSleeping), i = Message.Sleeping);
        var a = Math.ceil(15 * player.skills[SkillType.Camping].percent);
        t === RestType.Sleeping && (game.dayNight >= .5 || player.z === -1) && (a += 500);
        var n = 1,
            o = game.getTileInFrontOfPlayer();
        o && t === RestType.Sleeping && (void 0 === o.eventId && void 0 === o.doodadId || (void 0 !== o.eventId || Doodad.defines[game.doodads[o.doodadId].type].fire) && (n = 2, a = 2 * a, ui.displayMessage(Message.FireFacingYouIsWarm))), a < 100 ? a = 100 : a > 1450 && (a = 1450), a += Math.floor(50 * Utilities.Random.nextFloat() - 25);
        var r = 0;
        null === e && (r = 1), game.staminaRegen = 2 / n + r, game.healthRegen = 40 / n + r, t === RestType.Sleeping && (game.hungerRegen = 220, game.thirstRegen = 160), audio.queueEffect(SfxType.PickUp);
        var s = game.staminaRegen,
            l = game.healthRegen,
            p = game.hungerRegen,
            d = game.thirstRegen,
            u = player.health,
            g = 0,
            m = Message.None;
        ui.showLoadingScreen(LoadingType.Rest), ui.setLoadingMessage(i), game.addDelay(Delay.Collision, !0), setTimeout(function() {
            player.skillGain(SkillType.Camping, !1, !1);
            for (var i = 0; i < a; i++) {
                if (game.passTurn(TurnType.Resting), g++, t === RestType.Resting && player.stamina === player.dexterity) {
                    ui.displayMessage(Message.StaminaIsFull);
                    break
                }
                if (void 0 !== game.getTile(player.x + 1, player.y, player.z).monsterId || void 0 !== game.getTile(player.x - 1, player.y, player.z).monsterId || void 0 !== game.getTile(player.x, player.y + 1, player.z).monsterId || void 0 !== game.getTile(player.x, player.y - 1, player.z).monsterId || u > player.health) {
                    m = t === RestType.Resting ? Message.RestInterrupted : Message.SleepInterrupted, ui.displayMessage(m, MessageType.Bad), u === player.health && audio.queueEffect(SfxType.MonsterNoise);
                    break
                }
            }
            var n;
            n = t === RestType.Resting ? Message.Rested : Message.Slept;
            var o = Math.floor(g / 137.5);
            if (o < 1) ui.displayMessage(Message.FewMinutes, MessageType.None, messages[n]);
            else {
                var r = void 0,
                    y = Message.Hours;
                switch (o) {
                    case 1:
                        y = Message.Hour, r = Message.NumberOne;
                        break;
                    case 2:
                        r = Message.NumberTwo;
                        break;
                    case 3:
                        r = Message.NumberThree;
                        break;
                    case 4:
                        r = Message.NumberFour;
                        break;
                    case 5:
                        r = Message.NumberFive;
                        break;
                    case 6:
                        r = Message.NumberSix;
                        break;
                    case 7:
                        r = Message.NumberSeven;
                        break;
                    case 8:
                        r = Message.NumberEight;
                        break;
                    case 9:
                        r = Message.NumberNine;
                        break;
                    default:
                    case 10:
                        r = Message.NumberTen
                }
                ui.displayMessage(Message.AboutHours, MessageType.None, messages[n], messages[r], messages[y])
            }
            game.staminaRegen = s, game.healthRegen = l, game.hungerRegen = p, game.thirstRegen = d, player.updateMalignity(-25), game.updateGame(), null !== e && Item.damage(e), game.fov.compute(), game.updateRender = !0, ui.hideLoadingScreen()
        }, 800)
    }

    function h(e) {
        var t = Item.defines[e.type].revert;
        t && (Item.changeInto(e, t), ui.displayMessage(Message.ExtinguishedTorch), audio.queueEffect(SfxType.Trample), player.staminaReduction(SkillType.Camping), game.updateCraftTableAndWeightNextTurn(), game.passTurn())
    }

    function T(e, t, i) {
        void 0 === i && (i = 0);
        for (var a = 0, n = 0, o = e; n < o.length; n++) {
            var r = o[n];
            if (a += r.weight - i, a > t) {
                T(e, t, i += .1);
                break
            }
        }
        for (var s = 0, l = e; s < l.length; s++) {
            var r = l[s];
            r.weight = Utilities.roundNumber(r.weight - i, 1), r.weight <= 0 && (r.weight = .1)
        }
    }

    function f(e) {
        var t = game.getTile(player.x, player.y, player.z);
        if (terrains[Utilities.TileHelpers.getType(t)].water) return void ui.displayMessage(Message.CannotInWater, MessageType.None, messages[Message.Dismantle]);
        var i = Item.defines[e.type];
        if (i) {
            var a = null,
                n = i.dismantle;
            if (n) {
                var o = n.required;
                if (o && (a = Item.getItemInContainerByGroup(player.inventory, o), !a)) return void ui.displayMessage(Message.DismantlingRequires, MessageType.None, game.getName(Item.groups[o], TextCase.Sentence));
                var r, s, l = e.minDur / e.maxDur,
                    p = 0;
                ui.displayMessage(Message.YouDismantled, MessageType.None, game.getName(Item.defines[e.type]));
                for (var d = n.items, u = [], g = 0; g < d.length; g++) {
                    var m = d[g];
                    if (s = Item.initialize(m, e.quality), r = Math.floor(s.minDur * l), r <= 0) {
                        if (p++, d.length !== p) continue;
                        r = 0
                    }
                    s = Item.create(m, e.quality), r = Math.floor(s.minDur * l), s.minDur = r, ui.updateItem(s), ui.displayMessage(Message.YouSeparate, MessageType.None, game.getName(Item.defines[s.type])), u.push(s)
                }
                T(u, e.weight), p >= 1 && ui.displayMessage(Message.MaterialsDestroyedDismantle, MessageType.None), Item.remove(e), a && Item.damage(a);
                var y = SkillType.Tinkering;
                i.recipe && i.recipe.skill && (y = i.recipe.skill, player.updateMalignity(i.recipe.malignity)), player.staminaReduction(y), audio.queueEffect(SfxType.Craft), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
            }
        }
    }

    function v(e) {
        var t = game.getTile(player.x, player.y, player.z);
        if (terrains[Utilities.TileHelpers.getType(t)].water) return void ui.displayMessage(Message.CannotInWater, MessageType.None, messages[Message.Disassemble]);
        var i = Item.defines[e.type];
        if (i) {
            var a = e.disassembly;
            if (a && Item.hasRequiredDoodad(e.type, Message.Disassemble)) {
                if (i.requiredForDisassembly) {
                    for (var n = [], o = 0, r = i.requiredForDisassembly; o < r.length; o++) {
                        var s = r[o],
                            l = void 0,
                            p = void 0;
                        if (Item.isItemTypeGroup(s) ? (l = Item.getItemInInventoryByGroup(s), p = game.getName(Item.groups[s], TextCase.Sentence)) : (l = Item.getItemInContainer(player.inventory, s), p = game.getName(Item.defines[s], TextCase.Sentence)), !l) return void ui.displayMessage(Message.RequiredForDisassembly, MessageType.Bad, p);
                        n.push(l)
                    }
                    for (var d = 0, u = n; d < u.length; d++) {
                        var g = u[d];
                        Item.damage(g)
                    }
                }
                var m = e.minDur / e.maxDur,
                    y = Item.defines[e.type].durability;
                y || (y = 6);
                for (var c, h, T, f = e.maxDur / y, v = 0, I = 0; I < a.length; I++) {
                    var S = a[I],
                        M = S.maxDur;
                    if (void 0 !== M) {
                        c = M;
                        var k = S.quality;
                        if (h = Math.floor(c * m * .5), h >= S.minDur && (h = S.minDur - 1), h <= 0) {
                            if (v++, a.length !== v) continue;
                            h = 0
                        }
                        T = Item.create(S.type, k), T.minDur = h, T.weight = S.weight;
                        var b = Item.defines[S.type].durability;
                        b || (b = 6);
                        var w = Math.floor(b * f);
                        w < h && (w = h), T.maxDur = w, ui.updateItem(T), ui.displayMessage(Message.YouSalvaged, MessageType.None, game.getName(Item.defines[T.type]))
                    }
                }
                ui.displayMessage(Message.YouDisassembled, MessageType.None, game.getName(Item.defines[e.type])), v >= 1 && ui.displayMessage(Message.MaterialsDestroyedDisassembly, MessageType.None);
                var D = SkillType.Tinkering;
                i.recipe && i.recipe.skill && (D = i.recipe.skill, player.updateMalignity(i.recipe.malignity)), player.staminaReduction(D), Item.remove(e), audio.queueEffect(SfxType.Craft), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
            }
        }
    }

    function I(e) {
        var t = game.getTileInFrontOfPlayer(),
            i = TileEvent.Type.Fire,
            a = null;
        if (e.type === ItemType.Lens && player.z === -1) return void ui.displayMessage(Message.ThereIsNoSunToStartFire);
        if (e.type === ItemType.Lens && game.dayNight >= .25) return void ui.displayMessage(Message.SunNotBrightEnoughToStartFire);
        var n = null,
            o = null,
            r = null,
            s = terrains[Utilities.TileHelpers.getType(t)];
        if (Item.defines[e.type].equip) {
            if (!s.flammable && (r = Item.getItemInContainerByGroup(player.inventory, ItemTypeGroup.Fuel), !r)) return void ui.displayMessage(Message.NoFuelItemsToStartFire, MessageType.Bad)
        } else {
            if (n = Item.getItemInContainer(player.inventory, ItemType.Kindling), o = Item.getItemInContainer(player.inventory, ItemType.Tinder), !n) return void ui.displayMessage(Message.NoKindlingToStartFire, MessageType.Bad);
            if (!o) return void ui.displayMessage(Message.NoTinderToStartFire, MessageType.Bad)
        } if (void 0 !== t.eventId) return void ui.displayMessage(Message.CannotStartFireHere);
        if (void 0 !== t.doodadId) {
            var l = t.doodadId;
            if (a = game.doodads[l], Doodad.defines[a.type].lit) {
                if (a.type === DoodadType.StoneWaterStill && 1 !== a.decay) return void ui.displayMessage(Message.StillHasNoWaterToPurify)
            } else {
                if (!Doodad.defines[a.type].flammable) return void ui.displayMessage(Message.CannotStartFireHere);
                a = null
            }
        }
        if (s = terrains[Utilities.TileHelpers.getType(t)], !(s.flammable || s.passable && !s.water && !s.shallowWater || a)) return void ui.displayMessage(Message.CannotStartFireHere);
        var p = Math.ceil(100 * Utilities.Random.nextFloat());
        if (player.skills[SkillType.Camping].percent >= p - 25) {
            if (a) {
                var d = Doodad.defines[a.type].lit;
                if (void 0 === d) return;
                a.torch && a.torch.decay ? (a.decay = a.torch.decay, a.torch.type = Item.defines[a.torch.type].lit, delete a.torch.decay) : a.decay = Doodad.defines[d].decayMax, a.type = d, world.updateTile(a.x, a.y, a.z, t)
            } else player.updateMalignity(250), game.placeTileEvent(TileEvent.create(i, player.x + player.direction.x, player.y + player.direction.y, player.z));
            ui.displayMessage(Message.StartedFire), player.skillGain(SkillType.Camping, !1, !1), n && Item.remove(n), o && Item.remove(o), r && Item.remove(r), Item.defines[e.type].equip && (e.decay = Math.floor(e.decay / 2))
        } else n && Item.damage(n), o && Item.damage(o), r && Item.damage(r), player.skillGain(SkillType.Camping, .1, !1), ui.displayMessage(Message.FailedToStartFire, MessageType.Bad);
        Item.damage(e), game.createParticles(player.x + player.direction.x, player.y + player.direction.y, 210, 125, 20), audio.queueEffect(SfxType.Throw), player.staminaReduction(SkillType.Camping), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function S() {
        var e = game.getTileInFrontOfPlayer();
        if (void 0 !== e.monsterId || void 0 !== e.eventId) return !0;
        if (void 0 !== e.corpseIds) return !0;
        if (void 0 !== e.doodadId) {
            var t = game.doodads[e.doodadId];
            if (Doodad.canPickup(t, !1)) return !0
        }
        return !1
    }

    function M(e) {
        if (e) {
            var t = game.getTileInFrontOfPlayer();
            if (void 0 !== t.monsterId || void 0 !== t.eventId) return ui.displayMessage(Message.SomethingInTheWayOfCarving), void game.checkForHiddenMob(player.x + player.direction.x, player.y + player.direction.y, player.z);
            if (void 0 !== t.corpseIds) {
                var i = t.corpseIds.length - 1,
                    a = t.corpseIds[i],
                    n = game.corpses[a],
                    o = n.type,
                    r = monsters[o];
                o === MonsterType.Blood ? ui.displayMessage(Message.RemovedBlood) : (r && !r.blood && game.placeCorpse({
                    type: MonsterType.Blood,
                    x: n.x,
                    y: n.y,
                    z: n.z
                }), o === MonsterType.PirateGhost && player.addMilestone(MilestoneType.ReaperOfSouls), ui.displayMessage(Message.CarvedUpCorpse), Item.damage(e));
                var s = {
                    r: 0,
                    g: 0,
                    b: 0
                };
                s = n.aberrant && r && r.aberrantBlood ? {
                    r: r.aberrantBlood[0],
                    g: r.aberrantBlood[1],
                    b: r.aberrantBlood[2]
                } : r && r.blood ? {
                    r: r.blood[0],
                    g: r.blood[1],
                    b: r.blood[2]
                } : {
                    r: 210,
                    g: 0,
                    b: 0
                }, game.createParticles(player.x + player.direction.x, player.y + player.direction.y, s.r, s.g, s.b);
                var l = corpses[o].resource;
                if (l) {
                    var p = [];
                    for (var d in l) {
                        var u = l[d],
                            g = u.chance;
                        g ? Math.ceil(100 * Utilities.Random.nextFloat()) <= g && p.push(u.item) : p.push(u.item)
                    }
                    o === MonsterType.LivingMushroom && n.aberrant && (p = [ItemType.SpottedRedMushroom, ItemType.SpottedRedMushroom]);
                    for (var m = 0; m < p.length; m++) Item.create(p[m]), ui.displayMessage(Message.YouPickedUp, MessageType.None, game.getName(Item.defines[p[m]])), game.addDelay(Delay.ShortPause)
                }
                var y = corpses[o].skill;
                return y && player.skillGain(y, !1, !1), audio.queueEffect(SfxType.PickUp), player.updateMalignity(25), player.staminaReduction(SkillType.Anatomy), game.removeCorpse(a), game.updateCraftTableAndWeightNextTurn(), void game.passTurn()
            }
            if (void 0 !== t.doodadId) {
                var c = game.doodads[t.doodadId];
                if (!Doodad.canPickup(c)) return;
                var h = terrains[Utilities.TileHelpers.getType(t)].particles;
                return game.createParticles(player.x + player.direction.x, player.y + player.direction.y, h[0], h[1], h[2]), Item.damage(e), void Doodad.gather(c)
            }
            ui.displayMessage(Message.NothingHereToCarve)
        }
    }

    function k(e) {
        var t = game.getTileInFrontOfPlayer(),
            i = Item.defines[e.type].onUse;
        if (i) {
            var a = i[ActionType.SetDown];
            if (e.minDur <= 0) return void ui.displayMessage(Message.TooDamaged, MessageType.None, game.getName(Item.defines[e.type]), messages[Message.Place]);
            if (player.swimming) return void ui.displayMessage(Message.CannotPlaceThatFromHere);
            var n = player.x + player.direction.x,
                o = player.y + player.direction.y,
                r = t;
            if (void 0 !== t.monsterId || r.containedItems && r.containedItems.length > 0 || !game.checkAndRemoveBlood()) return ui.displayMessage(Message.SomethingInTheWayOfPlacing), void game.checkForHiddenMob(n, o, player.z);
            var s = !1;
            if (void 0 !== t.eventId && (TileEvent.remove(t.eventId), ui.displayMessage(Message.ExtinguishedFire), terrains[Utilities.TileHelpers.getType(t)].passable && void 0 === t.doodadId || (s = !0)), !s && void 0 !== t.doodadId) return void ui.displayMessage(Message.SomethingInTheWayOfPlacing);
            if (!s) {
                if (!terrains[Utilities.TileHelpers.getType(t)].passable && !terrains[Utilities.TileHelpers.getType(t)].water) return void ui.displayMessage(Message.CannotPlaceThatHere);
                if (terrains[Utilities.TileHelpers.getType(t)].water) {
                    for (var l = [
                        [n + 1, o],
                        [n - 1, o],
                        [n, o - 1],
                        [n, o + 1],
                        [n - 1, o - 1],
                        [n + 1, o - 1],
                        [n - 1, o + 1],
                        [n + 1, o + 1]
                    ], p = 0, d = 0; d < l.length; d++) {
                        var u = game.getTile(l[d][0], l[d][1]);
                        if (!u) return;
                        terrains[Utilities.TileHelpers.getType(u)].water || p++
                    }
                    if (p < 3) return void ui.displayMessage(Message.NeedToBuildUpLandAround)
                }
                var g = {};
                g.type = a, g.quality = e.quality, terrains[a].strength && (g.strength = terrains[a].strength), terrains[a].durability && e.minDur && (g.minDur = e.minDur, g.maxDur = e.maxDur), Utilities.TileHelpers.getType(t) === TerrainType.CaveEntrance && game.changeTile({
                    type: TerrainType.Dirt
                }, n, o, player.z === Z_NORMAL ? Z_CAVE : Z_NORMAL, !1), game.changeTile(g, n, o, player.z, !0)
            }
            audio.queueEffect(SfxType.PickUp);
            var m = terrains[a].particles;
            m && game.createParticles(player.x + player.direction.x, player.y + player.direction.y, m[0], m[1], m[2]), Item.remove(e), player.staminaReduction(SkillType.Mining), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
        }
    }

    function b(e) {
        s(e, ActionType.Eat)
    }

    function w(e) {
        s(e, ActionType.Drink)
    }

    function D(e) {
        c(e, RestType.Sleeping)
    }

    function C(e) {
        s(e, ActionType.Heal)
    }

    function F(e) {
        var t = game.getTileInFrontOfPlayer(),
            i = Utilities.TileHelpers.getType(t),
            a = !1,
            n = player.x + player.direction.x,
            o = player.y + player.direction.y,
            r = t;
        if (void 0 !== t.monsterId || r.containedItems && r.containedItems.length > 0 || void 0 !== t.eventId) return ui.displayMessage(Message.SomethingInTheWayOfDigging), void game.checkForHiddenMob(n, o, player.z);
        if (!game.checkAndRemoveBlood()) return void ui.displayMessage(Message.SomethingInTheWayOfDiggingCarveFirst);
        if (void 0 !== t.doodadId) {
            if (!Doodad.canPickup(game.doodads[t.doodadId])) return;
            return game.createParticles(player.x + player.direction.x, player.y + player.direction.y, terrains[i].particles[0], terrains[i].particles[1], terrains[i].particles[2]), Item.damage(e), void Doodad.gather(game.doodads[t.doodadId])
        }
        if (!terrains[i].particles || terrains[i].water || !terrains[i].passable) return void ui.displayMessage(Message.CannotDigHere);
        var s = Item.getItemsInContainerByType(player.inventory, ItemType.TatteredMap, !0);
        if (s.length)
            for (var l = 0, p = s; l < p.length; l++) {
                var d = p[l],
                    u = d.tatteredMap;
                if (u) {
                    var g = u.x,
                        m = u.y;
                    if (n === g && o === m) return void q(e)
                }
            }
        game.createParticles(player.x + player.direction.x, player.y + player.direction.y, terrains[i].particles[0], terrains[i].particles[1], terrains[i].particles[2]);
        var y = Math.ceil(100 * Utilities.Random.nextFloat());
        if (player.skills[SkillType.Mining].percent >= y - 25 && !a) {
            var c = void 0,
                h = !1,
                T = [];
            game.tileData[n] && game.tileData[n][o] && game.tileData[n][o][player.z] && (T = game.tileData[n][o][player.z]);
            for (var f = void 0, v = void 0, I = void 0, S = void 0, M = null, k = 0; k < resource[i].items.length; k++)
                if (resource[i].items[k]) {
                    var b = resource[i].items[k].chanceOutOf,
                        w = b ? b : 100;
                    if (Math.ceil(Utilities.Random.nextFloat() * w) <= resource[i].items[k].chance) {
                        var D = Math.ceil(100 * Utilities.Random.nextFloat());
                        if (resource[i].items[k].tileChange && (!resource[i].items[k].tileChangeChance || D <= resource[i].items[k].tileChangeChance))
                            if (c = resource[i].items[k].tileChange, terrains[i].shallowWater && terrains[i].freshWater) c = TerrainType.FreshWater;
                            else if (terrains[i].shallowWater) c = TerrainType.Seawater;
                        else
                            for (f = [
                                [n + 1, o],
                                [n - 1, o],
                                [n, o + 1],
                                [n, o - 1],
                                [n + 1, o - 1],
                                [n - 1, o + 1],
                                [n + 1, o + 1],
                                [n - 1, o - 1]
                            ], v = 0; v < f.length; v++)
                                if (I = game.getTile(f[v][0], f[v][1]), S = Utilities.TileHelpers.getType(I), terrains[S].water || terrains[S].shallowWater) {
                                    var C = 50;
                                    if (game.fillCount = 0, game.fillTile = [], game.checkWaterFill(f[v][0], f[v][1], player.z, C), game.fillCount >= 5 && (game.fillCount >= C || Utilities.Random.nextFloat() * C + game.fillCount >= C)) {
                                        c = terrains[S].freshWater ? TerrainType.ShallowFreshWater : TerrainType.ShallowSeawater;
                                        break
                                    }
                                }
                        player.skillGain(SkillType.Mining, !1, !1);
                        var F = resource[i].items[k].type,
                            R = ItemQuality.Random,
                            A = null,
                            B = null;
                        if (T.length > 1) {
                            var L = T[0],
                                x = resource[L.type];
                            terrains[L.type].regathered && x && x.defaultItem && (F = x.defaultItem), L.minDur && (A = L.minDur - 1, B = L.maxDur), void 0 !== L.quality && (R = L.quality)
                        }
                        var G = Item.create(F, R);
                        null !== A && (G.minDur = A), null !== B && (G.maxDur = B), null === A && null === B || ui.updateItem(G), ui.displayMessage(Message.YouPickedUp, MessageType.None, game.getName(Item.defines[G.type])), h = !0, T.length <= 1 && (M = game.makeCaveEntrance(), M && (c = M));
                        break
                    }
                }
            if ((resource[i] && h || !resource[i]) && (T.length > 1 && (T.shift(), c = T[0].type), void 0 !== c)) {
                if (i === TerrainType.CaveEntrance) game.changeTile({
                    type: c
                }, n, o, player.z, !0), game.changeTile({
                    type: TerrainType.Dirt
                }, n, o, player.z === Z_NORMAL ? Z_CAVE : Z_NORMAL, !0);
                else if (game.changeTile({
                    type: c
                }, n, o, player.z, !1), !M && c === TerrainType.CaveEntrance) {
                    game.changeTile({
                        type: c
                    }, n, o, player.z === Z_NORMAL ? Z_CAVE : Z_NORMAL, !1);
                    var U = game.getTile(n, o, player.z === Z_NORMAL ? Z_CAVE : Z_NORMAL).doodadId;
                    void 0 !== U && Doodad.damage(game.doodads[U], !0)
                }
                if (terrains[c].water || terrains[c].shallowWater)
                    for (f = [
                        [n + 1, o],
                        [n - 1, o],
                        [n, o + 1],
                        [n, o - 1]
                    ], v = 0; v < f.length; v++)
                        if (I = game.getTile(f[v][0], f[v][1]), S = Utilities.TileHelpers.getType(I), !terrains[S].freshWater && (terrains[S].water || terrains[S].shallowWater)) {
                            game.contaminatedWater.push({
                                x: n,
                                y: o,
                                z: player.z
                            });
                            break
                        }
            }
        }
        player.staminaReduction(SkillType.Mining), game.spawnClawWorm(), audio.queueEffect(SfxType.PickUp), Item.damage(e), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function R(e) {
        if (game.raft) game.setRaft(null);
        else {
            if (!terrains[Utilities.TileHelpers.getType(game.getTile(player.x, player.y, player.z))].water) return void ui.displayMessage(Message.NeedDeepWaterForRaft);
            game.setRaft(e.id)
        }
        game.passTurn()
    }

    function A(e) {
        var t = game.getTileInFrontOfPlayer();
        if (void 0 !== t.doodadId) {
            var i = game.doodads[t.doodadId];
            if (Doodad.defines[i.type].waterSource) {
                if (i.gatherReady) {
                    ui.displayMessage(Message.FilledFrom, MessageType.None, game.getName(Item.defines[e.type]), game.getName(Doodad.defines[i.type])), game.createParticles(player.x + player.direction.x, player.y + player.direction.y, 12, 128, 247);
                    var a = ItemType.ClayJugOfDesalinatedWater;
                    return e.type === ItemType.Waterskin ? a = ItemType.WaterskinOfDesalinatedWater : e.type === ItemType.GlassBottle && (a = ItemType.GlassBottleOfDesalinatedWater), Item.changeInto(e, a), ui.displayMessage(Message.YouPickedUp, MessageType.None, game.getName(Item.defines[a])), i.decay = -1, i.gatherReady = !1, player.staminaReduction(SkillType.Chemistry), game.updateCraftTableAndWeightNextTurn(), void game.passTurn()
                }
                return Doodad.defines[i.type].decayMax === i.decay ? void ui.displayMessage(Message.NoWaterInStill) : i.type === DoodadType.StoneWaterStill ? void ui.displayMessage(Message.RequiresFireToBeLit) : void ui.displayMessage(Message.NotEnoughPurifiedWaterYet)
            }
            if (i.type === DoodadType.LitStoneWaterStill) return void ui.displayMessage(Message.WaitUntilFireCooledToGetWater)
        } else if (terrains[Utilities.TileHelpers.getType(t)].water || terrains[Utilities.TileHelpers.getType(t)].shallowWater || Utilities.TileHelpers.getType(t) === TerrainType.Snow) {
            ui.displayMessage(Message.Filled, MessageType.None, game.getName(Item.defines[e.type])), game.createParticles(player.x + player.direction.x, player.y + player.direction.y, 12, 128, 247);
            var a = ItemType.ClayJugOfSeawater;
            return Utilities.TileHelpers.getType(t) === TerrainType.Snow || terrains[Utilities.TileHelpers.getType(t)].freshWater ? (a = e.type === ItemType.Waterskin ? ItemType.WaterskinOfUnpurifiedFreshWater : e.type === ItemType.GlassBottle ? ItemType.GlassBottleOfUnpurifiedFreshWater : ItemType.ClayJugOfUnpurifiedFreshWater, terrains[Utilities.TileHelpers.getType(t)].shallowWater && game.changeTile({
                type: TerrainType.Dirt
            }, player.x + player.direction.x, player.y + player.direction.y, player.z, !1)) : e.type === ItemType.Waterskin ? a = ItemType.WaterskinOfSeawater : e.type === ItemType.GlassBottle && (a = ItemType.GlassBottleOfSeawater), Item.changeInto(e, a), ui.displayMessage(Message.YouPickedUp, MessageType.None, game.getName(Item.defines[a])), player.staminaReduction(SkillType.Chemistry), game.updateCraftTableAndWeightNextTurn(), void game.passTurn()
        }
        ui.displayMessage(Message.NothingHereToFill, MessageType.None, game.getName(Item.defines[e.type]))
    }

    function B(e) {
        y(e, AttackType.Shoot)
    }

    function L(e) {
        var t = null,
            i = 0,
            a = null,
            n = Math.ceil(100 * Utilities.Random.nextFloat()),
            o = player.skills[SkillType.Fishing].percent,
            r = !1,
            s = !1;
        if (e) {
            var l = Item.defines[e.type].ranged;
            if (!l) return;
            i = game.rangeFinder(l.range, o), ui.displayMessage(Message.CastYourLine, MessageType.None, i), a = game.checkForMobInRange(i), a.found ? (t = a.id, monsters[game.monsters[t].type].fishable || (ui.displayMessage(Message.CannotFishFor, MessageType.None, game.getName(monsters[game.monsters[t].type])), r = !0)) : a.obstacle ? (ui.displayMessage(Message.SomethingInTheWayOfFishing, MessageType.Bad), r = !0) : (a.water ? o >= n ? (ui.displayMessage(Message.ShadowInTheWater), game.spawnMonsterFromGroup(MonsterSpawnGroup.Water, a.x, a.y, a.z, !0), player.skillGain(SkillType.Fishing, .1, !1), s = !0) : o >= n - 20 && (ui.displayMessage(Message.SeaweedFromWater), Item.create(ItemType.Seaweed), ui.displayMessage(Message.YouPickedUp, MessageType.None, game.getName(Item.defines[ItemType.Seaweed])), player.skillGain(SkillType.Fishing, .1, !1), s = !0) : ui.displayMessage(Message.MustCastIntoWater), s || ui.displayMessage(Message.NoFishAtLocation), r = !0);
            var p = terrains[Utilities.TileHelpers.getType(game.getTile(a.x, a.y, a.z))].particles;
            if (game.createParticles(a.x, a.y, p[0], p[1], p[2], 3), r) return player.updateMalignity(-25), player.staminaReduction(SkillType.Fishing), Item.damage(e), audio.queueEffect(SfxType.Water), game.updateCraftTableAndWeightNextTurn(), void game.passTurn()
        }
        if (t) switch (!0) {
            case o >= n - 50:
                var d = monsters[game.monsters[t].type].loot;
                d && (Item.create(d[0].item), ui.displayMessage(Message.CaughtFish, MessageType.None, game.getName(Item.defines[d[0].item])), game.deleteMonsters(t), player.skillGain(SkillType.Fishing, !1, !1));
                break;
            default:
                ui.displayMessage(Message.FailedToCatchFish, MessageType.Bad), player.skillGain(SkillType.Fishing, .1, !1)
        }
        player.updateMalignity(-25), player.staminaReduction(SkillType.Fishing), Item.damage(e), audio.queueEffect(SfxType.Water), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function x(e) {
        var t = game.getTileInFrontOfPlayer(),
            i = t.doodadId;
        if (void 0 === i || !Doodad.defines[game.doodads[i].type].isLocked) return void ui.displayMessage(Message.NotFacingLockedObject);
        var a = Math.ceil(100 * Utilities.Random.nextFloat());
        if (player.skills[SkillType.LockPicking].percent >= a - 20) {
            ui.displayMessage(Message.UnlockedChest), player.skillGain(SkillType.LockPicking, !1, !1);
            var n = game.doodads[i];
            Doodad.addTreasureChestLoot(n), player.addMilestone(MilestoneType.Locksmith), l(n, game.getName(Doodad.defines[n.type], TextCase.Title), !1), player.updateMalignity(1e3)
        } else player.skillGain(SkillType.LockPicking, .1, !1), ui.displayMessage(Message.FailedToPickLock, MessageType.Bad);
        player.staminaReduction(SkillType.LockPicking), Item.damage(e), audio.queueEffect(SfxType.Throw), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function G(e) {
        y(e, AttackType.Sling)
    }

    function U(e) {
        if (e.tatteredMap) {
            var t = e.tatteredMap.x,
                i = e.tatteredMap.y,
                a = e.tatteredMap.z;
            if (e.type === ItemType.DrawnMap) game.makeMiniMap(t, i, a, !1), ui.displayMessage(Message.FullyDecodedMap), Item.damage(e);
            else {
                var n = Math.ceil(100 * Utilities.Random.nextFloat());
                player.skills[SkillType.Cartography].percent >= n - 35 ? (player.skillGain(SkillType.Cartography, !1, !1), game.makeMiniMap(t, i, a, !0), player.skills[SkillType.Cartography].percent >= 50 ? ui.displayMessage(Message.FullyDecodedMap) : ui.displayMessage(Message.PartiallyDecodedMap), player.x + 16 >= t && player.y + 16 >= i && player.x - 16 <= t && player.y - 16 <= i ? ui.displayMessage(Message.InExactLocationOfTreasure) : player.x + 50 >= t && player.y + 50 >= i && player.x - 50 <= t && player.y - 50 <= i ? ui.displayMessage(Message.WalkingDistanceOfTreasure) : player.x + 125 >= t && player.y + 125 >= i && player.x - 125 <= t && player.y - 125 <= i ? ui.displayMessage(Message.FarAwayFromTreasure) : ui.displayMessage(Message.NoWhereNearTreasure), Item.damage(e)) : (player.skillGain(SkillType.Cartography, .1, !1), ui.displayMessage(Message.CouldNotDecipher, MessageType.Bad))
            }
        } else ui.displayMessage(Message.MapNotOfThisArea, MessageType.Bad);
        return game.updateCraftTableAndWeightNextTurn(), game.passTurn(), !0
    }

    function W(e) {
        for (var t = {}, i = ItemType.None + 1; i < Utilities.Enums.getMax(ItemType); i++) Item.defines[i] && Item.defines[i].recipe && Item.defines[i].craftable !== !1 && (t[i] = !0);
        for (var i in game.crafted) delete t[i];
        var a = Object.keys(t);
        if (a.length >= 1) {
            var n = parseInt(a[Math.floor(Utilities.Random.nextFloat() * a.length)], 10);
            game.crafted[n] = !0, game.newCrafted[n] = !0, ui.displayMessage(Message.LearnedHowToCreate, MessageType.Good, game.getName(Item.defines[n])), audio.queueEffect(SfxType.Exceptional), Item.remove(e), player.updateMalignity(-100), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
        } else ui.displayMessage(Message.ScrollProvidedNoUsefulInsight, MessageType.Bad)
    }

    function E(e) {
        var t = game.getTileInFrontOfPlayer(),
            i = Item.defines[e.type],
            a = i.onUse;
        if (void 0 !== t.eventId && a) {
            var n = game.tileEvents[t.eventId];
            n.decay += a[ActionType.StokeFire], game.outputFireMessage(n.decay), n.spread += a[ActionType.StokeFire]
        } else {
            if (!a || void 0 === t.doodadId || !Doodad.defines[game.doodads[t.doodadId].type].fire) return void ui.displayMessage(Message.NoFireToStokeWith, MessageType.None, game.getName(i));
            if (Doodad.defines[game.doodads[t.doodadId].type].stokable === !1) return void ui.displayMessage(Message.NoNeedToStokeFire, MessageType.None);
            var o = game.doodads[t.doodadId];
            void 0 !== o.decay && (o.decay += a[ActionType.StokeFire], game.outputFireMessage(o.decay))
        }
        player.staminaReduction(SkillType.Camping), Item.remove(e), audio.queueEffect(SfxType.Throw), ui.displayMessage(Message.AddedFuelToFire), player.skillGain(SkillType.Camping, !1, !1), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function P(e) {
        var t = game.getTileInFrontOfPlayer();
        if (void 0 !== t.doodadId) {
            var i = game.doodads[t.doodadId];
            if ((Doodad.defines[i.type].garden || Doodad.defines[i.type].growing) && i.x === player.x + player.direction.x && i.y === player.y + player.direction.y) {
                var a = Item.defines[e.type].onUse;
                if (Doodad.defines[i.type].garden && a && void 0 !== i.spread) i.spread += a[ActionType.Garden], ui.displayMessage(Message.UsedSoilToIncreaseFertility), Doodad.messageGardenFertility(i.spread);
                else {
                    if (!Doodad.defines[i.type].growing || !a) return void ui.displayMessage(Message.SoilWouldHaveNoEffect);
                    if (ui.displayMessage(Message.UsedToSpeedUpGrowing, MessageType.None, messages[Message.Soil]),
                        i.decay <= 15) return void ui.displayMessage(Message.CannotImproveGrowingSpeed);
                    i.decay -= 3 * a[ActionType.Garden], i.decay <= -1 && (i.decay = 0)
                }
                var n = Doodad.defines[i.type].skillUse;
                return void 0 !== n && (player.staminaReduction(n), player.skillGain(n, !1, !1)), Item.remove(e), audio.queueEffect(SfxType.Throw), player.updateMalignity(-100), game.updateCraftTableAndWeightNextTurn(), void game.passTurn()
            }
        }
        ui.displayMessage(Message.NothingHereToGardenWith, MessageType.None, game.getName(Item.defines[e.type]))
    }

    function O(e) {
        ui.displayMessage(Message.PouredOutWaterOnYourself), player.status.burned && (player.status.burned = !1, player.addMilestone(MilestoneType.Doctor, StatusType.Burned), ui.displayMessage(Message.SoothedYourBurnInjuries)), game.createParticles(terrains[TerrainType.Seawater].particles[0], terrains[TerrainType.Seawater].particles[1], terrains[TerrainType.Seawater].particles[2], 0, 0), audio.queueEffect(SfxType.Water);
        var t = Item.defines[e.type].returnOnUse;
        t ? (Item.changeInto(e, t[0]), Item.damage(e)) : Item.remove(e), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function H(e) {
        var t = !1,
            i = game.getTileInFrontOfPlayer();
        if (void 0 !== i.eventId) ui.displayMessage(Message.ExtinguishedFire), t = !0, TileEvent.remove(i.eventId);
        else if (void 0 !== i.doodadId) {
            var a = game.doodads[i.doodadId];
            if (a.x === player.x + player.direction.x && a.y === player.y + player.direction.y) {
                var n = Doodad.defines[a.type].skillUse;
                if (Doodad.defines[a.type].waterSource) {
                    if (a.decay !== -1) return void ui.displayMessage(Message.AlreadyWaterInStill);
                    if (e.type !== ItemType.GlassBottleOfSeawater && e.type !== ItemType.WaterskinOfSeawater && e.type !== ItemType.ClayJugOfSeawater) return void ui.displayMessage(Message.WaterDoesNotNeedDesalination);
                    a.type === DoodadType.StoneWaterStill ? a.decay = 1 : a.decay = 20, ui.displayMessage(Message.PouredWaterIntoStill), t = !0
                } else if (Doodad.defines[a.type].fire) {
                    ui.displayMessage(Message.ExtinguishedFire), t = !0;
                    var o = Doodad.defines[a.type].revert;
                    o && (a.type === DoodadType.LitStoneWaterStill && a.decay >= 0 ? a.decay = 1 : (a.torch && (a.torch.decay = a.decay, a.torch.type = Item.defines[a.torch.type].revert), delete a.decay), a.type = o, world.updateTile(a.x, a.y, a.z, i))
                } else if (Doodad.defines[a.type].garden) {
                    if (void 0 === a.spread) return;
                    if (!Doodad.defines[a.type].spreadMax) return void ui.displayMessage(Message.WaterWouldHaveNoEffect);
                    a.spread++, ui.displayMessage(Message.WaterIncreaseFertilityOfPlant), t = !0, Doodad.messageGardenFertility(a.spread), n && player.skillGain(n, !1, !1), player.updateMalignity(-50)
                } else if (Doodad.defines[a.type].growing) {
                    if (ui.displayMessage(Message.UsedToSpeedUpGrowing, MessageType.None, messages[Message.Water]), a.decay <= 15) return void ui.displayMessage(Message.CannotImproveGrowingSpeed);
                    a.decay -= 6, a.decay <= -1 && (a.decay = 0), n && player.skillGain(n, !1, !1), t = !0
                }
            }
        } else if (void 0 !== i.monsterId) {
            var r = i.monsterId;
            if (game.monsters[r].type === MonsterType.FireElemental) {
                ui.displayMessage(Message.DamagedByPouringWater, MessageType.None, game.getName(monsters[game.monsters[r].type]));
                var s = Utilities.Random.randomFromInterval(4, 8);
                game.notifier.addStat(game.monsters[r].x, game.monsters[r].y, StatType.EnemyHealth, -s), game.damageMonster(r, s, DamageType.True, game.getName(Item.defines[e.type]), !1), t = !0
            }
        }
        t || ui.displayMessage(Message.PouredOutWater);
        var l = terrains[TerrainType.Seawater].particles;
        game.createParticles(player.x + player.direction.x, player.y + player.direction.y, l[0], l[1], l[2]), audio.queueEffect(SfxType.Water);
        var p = Item.defines[e.type].returnOnUse;
        p ? (Item.changeInto(e, p[0]), Item.damage(e)) : Item.remove(e), game.checkForHiddenMob(player.x + player.direction.x, player.y + player.direction.y, player.z), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function N(e) {
        var t = game.getTileInFrontOfPlayer(),
            i = Item.defines[e.type],
            a = player.x + player.direction.x,
            n = player.y + player.direction.y,
            o = i.onUse;
        if (o) {
            var r = o[ActionType.Plant],
                s = Doodad.defines[r];
            if (e.minDur > 0) {
                if (!game.isTileEmpty(a, n)) return ui.displayMessage(Message.CannotPlantHere, MessageType.None, game.getName(i)), void game.checkForHiddenMob(a, n, player.z);
                if (!s.allowedTiles || !s.skillUse) return;
                for (var l = s.allowedTiles.length, p = 0; p < l; p++)
                    if (Utilities.TileHelpers.getType(t) === s.allowedTiles[p]) {
                        var d = Math.ceil(100 * Utilities.Random.nextFloat());
                        if (player.skills[s.skillUse].percent >= d - 50) {
                            var u = void 0;
                            u = s.growth ? s.growth : o[ActionType.Plant];
                            var g = Doodad.create(u, a, n, player.z);
                            g.minDur = e.minDur, g.maxDur = e.maxDur, g.quality = e.quality, g.weight = e.weight, s.growth && (g.growInto = o[ActionType.Plant]), ui.displayMessage(Message.PlantedInGround, MessageType.None, game.getName(i)), player.skillGain(s.skillUse, !1, !1), Item.remove(e), player.updateMalignity(-100), audio.queueEffect(SfxType.PickUp), player.addMilestone(MilestoneType.Gardener)
                        } else player.skillGain(s.skillUse, .1, !1), Item.damage(e), audio.queueEffect(SfxType.Trample), ui.displayMessage(Message.FailedToPlant, MessageType.Bad, game.getName(i));
                        return player.staminaReduction(s.skillUse), game.updateCraftTableAndWeightNextTurn(), void game.passTurn()
                    }
                ui.displayMessage(Message.CannotPlantHere, MessageType.None, game.getName(i))
            } else ui.displayMessage(Message.TooDamaged, MessageType.None, game.getName(i), messages[Message.Plant])
        }
    }

    function q(e) {
        var t, i = game.getTileInFrontOfPlayer();
        t = terrains[Utilities.TileHelpers.getType(i)].water ? SkillType.Fishing : SkillType.Mining;
        var a = Math.floor(player.skills[t].percent / 10) + 1,
            n = !1,
            o = Item.getItemsInContainerByType(player.inventory, ItemType.TatteredMap, !0),
            r = o.length > 0;
        if (!r) return void ui.displayMessage(Message.DoNotHaveTreasureMaps);
        for (var s = 0, l = o; s < l.length; s++) {
            var p = l[s];
            if (p.tatteredMap) {
                var d = p.tatteredMap.x,
                    u = p.tatteredMap.y;
                if (player.x + a >= d && player.y + a >= u && player.x - a <= d && player.y - a <= u) {
                    if (!terrains[Utilities.TileHelpers.getType(i)].passable && !terrains[Utilities.TileHelpers.getType(i)].water || void 0 !== i.doodadId || void 0 !== i.eventId || !game.checkAndRemoveBlood()) return void ui.displayMessage(Message.TreasureIsBlocked, MessageType.Bad);
                    if (terrains[Utilities.TileHelpers.getType(i)].water && e.type !== ItemType.FishingNet) return void ui.displayMessage(Message.NeedFishingNetForTreasure, MessageType.Bad);
                    if (!terrains[Utilities.TileHelpers.getType(i)].water && e.type === ItemType.FishingNet) return void ui.displayMessage(Message.NeedAShovelToDigTreasure, MessageType.Bad);
                    n = !0, terrains[Utilities.TileHelpers.getType(i)].terrainType === TerrainType.CaveEntrance && (game.changeTile(TerrainType.Dirt, player.x + player.direction.x, player.y + player.direction.y, Z_NORMAL, !0), game.changeTile(TerrainType.Dirt, player.x + player.direction.x, player.y + player.direction.y, Z_CAVE, !0));
                    var g = Doodad.create(DoodadType.LockedWoodenChest, player.x + player.direction.x, player.y + player.direction.y, player.z);
                    g.treasure = !0, player.addMilestone(MilestoneType.TreasureHunter);
                    for (var m = 0, y = 0; y <= 5; y++) {
                        var c = Math.floor(12 * Utilities.Random.nextFloat() + player.x - 12 * Utilities.Random.nextFloat()),
                            h = Math.floor(12 * Utilities.Random.nextFloat() + player.y - 12 * Utilities.Random.nextFloat()),
                            T = game.getTile(c, h);
                        T && (terrains[Utilities.TileHelpers.getType(T)].passable ? null !== game.spawnMonsterFromGroup(MonsterSpawnGroup.Guardians, c, h, player.z) && m++ : terrains[Utilities.TileHelpers.getType(T)].water && null !== game.spawnMonster(MonsterType.Shark, c, h, player.z) && m++)
                    }
                    audio.queueEffect(SfxType.RockHit), player.skillGain(t, !1, !1), Item.remove(p), Item.damage(e), ui.displayMessage(Message.DugTreasureOut), m >= 1 && ui.displayMessage(Message.SummonedGuardiansByDiggingTreasure), ui.closeMapDialog(), player.updateMalignity(500), player.staminaReduction(SkillType.Mining), game.updateCraftTableAndWeightNextTurn(), game.passTurn();
                    break
                }
            }
        }
        n || ui.displayMessage(Message.NotInRangeOfTreasure)
    }

    function _(e) {
        var t = game.getTileInFrontOfPlayer();
        if ((void 0 === t.doodadId || !Doodad.defines[game.doodads[t.doodadId].type].fire) && void 0 === t.eventId) return void ui.displayMessage(Message.RequiresFacingFireSource);
        var i = Item.defines[e.type].lit;
        i && (Item.changeInto(e, i), void 0 === e.decay && (e.decay = Item.getDecayMax(e)), ui.displayMessage(Message.YouPickedUp, MessageType.None, game.getName(Item.defines[e.type])), audio.queueEffect(SfxType.Throw), player.staminaReduction(SkillType.Camping), game.updateCraftTableAndWeightNextTurn(), game.passTurn())
    }

    function z(e) {
        if (e.minDur > 0) {
            var t = game.getTileInFrontOfPlayer();
            if (!t) return;
            var i = t;
            if (!i.containedItems || 0 === i.containedItems.length) {
                if (void 0 !== t.doodadId || Utilities.TileHelpers.getType(t) === TerrainType.CaveEntrance || !terrains[Utilities.TileHelpers.getType(t)].passable || void 0 !== t.monsterId || void 0 !== t.eventId || !game.checkAndRemoveBlood()) return ui.displayMessage(Message.CannotPlaceHere, MessageType.None, game.getName(Item.defines[e.type])), void game.checkForHiddenMob(player.x + player.direction.x, player.y + player.direction.y, player.z);
                var a = Item.defines[e.type].onUse;
                if (!a) return;
                var n = a[ActionType.Build],
                    o = Doodad.create(n, player.x + player.direction.x, player.y + player.direction.y, player.z);
                if (o.minDur = e.minDur, o.maxDur = e.maxDur, o.quality = e.quality, o.weight = e.weight, e.type === ItemType.WoodenDoor || e.type === ItemType.WoodenGate) {
                    var r = o;
                    r.orientation = DoorOrientation.Default, player.facingDirection !== FacingDirection.East && player.facingDirection !== FacingDirection.West || (r.orientation = DoorOrientation.Vertical, world.updateTile(player.x + player.direction.x, player.y + player.direction.y, player.z, t))
                }
                if (Item.defines[e.type].isTorch) {
                    o.torch = {
                        type: e.type
                    };
                    var s = Item.defines[e.type].lit;
                    if (e.decay) {
                        var l = Math.floor(e.decay / 20);
                        s ? o.torch.decay = l : o.decay = l
                    } else Item.defines[e.type].decayMax ? o.decay = Math.floor(Item.defines[e.type].decayMax / 20) : s && (o.torch.decay = Math.floor(Item.defines[s].decayMax / 20))
                }
                return ui.displayMessage(Message.SetUp, MessageType.None, game.getName(Item.defines[e.type])), Mods.callHook(Mods.Hook.OnBuild, e, t, o), Item.remove(e), audio.queueEffect(SfxType.Throw), player.staminaReduction(SkillType.Mining), game.updateCraftTableAndWeightNextTurn(), void game.passTurn()
            }
            ui.displayMessage(Message.CannotBuildHere, MessageType.None, game.getName(Item.defines[e.type]))
        } else ui.displayMessage(Message.TooDamaged, MessageType.None, game.getName(Item.defines[e.type]), messages[Message.Build])
    }

    function V(e, t, i, a) {
        var n = Utilities.TileHelpers.getType(a);
        if (!terrains[n].strength) return !1;
        game.tileData[e] = game.tileData[e] || [], game.tileData[e][t] = game.tileData[e][t] || [], game.tileData[e][t][i] = game.tileData[e][t][i] || [];
        var o = game.tileData[e][t][i];
        if (game.tileData[e][t][i].length > 0 ? game.tileData[e][t][i][0].strength >= 0 ? game.tileData[e][t][i][0].strength-- : game.tileData[e][t][i][0].strength = terrains[n].strength - 1 : game.changeTile({
            type: n,
            strength: terrains[n].strength - 1
        }, e, t, i, !1), o.length >= 1 && o[0].strength <= 0) {
            var r = null;
            return !(n !== TerrainType.Rocks && n !== TerrainType.Sandstone || !game.makeCaveEntrance()) || (null !== r && void 0 !== r || (o.length > 1 ? (o.shift(), r = o[0].type) : r = terrains[n].leftOver), game.changeTile({
                type: r
            }, e, t, i, !1), !0)
        }
        return !1
    }

    function Y(e) {
        var t = game.getTileInFrontOfPlayer();
        if (t) {
            var i, a = null,
                n = player.x + player.direction.x,
                o = player.y + player.direction.y,
                r = Utilities.TileHelpers.getType(t);
            if (!game.checkAndRemoveBlood()) return ui.displayMessage(Message.SomethingInTheWayOfGatheringCarveFirst), void game.addDelay(Delay.ShortPause);
            if (void 0 !== t.doodadId) {
                if (!Doodad.canPickup(game.doodads[t.doodadId])) return;
                var s = Utilities.TileHelpers.getType(t),
                    l = terrains[s].particles;
                return game.createParticles(player.x + player.direction.x, player.y + player.direction.y, l[0], l[1], l[2]), e && Item.damage(e), void Doodad.gather(game.doodads[t.doodadId])
            }
            if (!terrains[r].gather) return void ui.displayMessage(Message.CannotGatherHere);
            var p = SkillType.Mining,
                d = terrains[r].skill;
            if (d ? (p = d, a = d, i = a ? player.skills[a].percent : 25) : i = 25, game.addDelay(Delay.LongPause, !0), void 0 !== t.eventId) return void ui.displayMessage(Message.CannotGatherFromWhileOnFire, MessageType.Bad);
            var u = null,
                g = 1;
            if (e) u = Item.defines[e.type];
            else
                for (var m = !1, y = 0, c = player.inventory.containedItems.length; y < c; y++) {
                    var h = player.inventory.containedItems[y],
                        T = Item.defines[h.type];
                    T && T.use && T.use.indexOf(ActionType.Gather) !== -1 && (h.equipped === EquipType.LeftHand && !m || h.equipped === EquipType.RightHand) && (u = T, e = h, m = h.equipped === EquipType.RightHand)
                }
            if (u) {
                g += 1;
                var f = u.damageType;
                a === SkillType.Mining ? f & DamageType.Blunt && (g += u.attack) : f & DamageType.Slashing && (g += u.attack)
            }
            var v = terrains[r].sound;
            g > 2 && v ? audio.queueEffect(v) : audio.queueEffect(SfxType.PickUp);
            for (var I = !1, S = !0, M = 0; M < g && !I; M++)
                if (resource[r]) {
                    var k = Math.ceil(100 * Utilities.Random.nextFloat());
                    if (i >= k - 20) {
                        var b = t;
                        if (b.containedItems && b.containedItems.length > 0) {
                            var w = b.containedItems[b.containedItems.length - 1];
                            Item.moveToContainer(w, player.inventory), ui.displayMessage(Message.YouPickedUp, MessageType.None, game.getName(Item.defines[w.type])), game.addDelay(Delay.ShortPause)
                        }
                        for (var D = 0; D < resource[r].items.length; D++) {
                            var C = resource[r].items[D].chanceOutOf,
                                F = C ? C : 100;
                            if (Math.ceil(Utilities.Random.nextFloat() * F) <= resource[r].items[D].chance) {
                                a && S === !0 && player.skillGain(a, !1, !1);
                                var R = Item.create(resource[r].items[D].type);
                                if (game.options.dropOnGather ? Item.placeOnTile(R, player.x, player.y, player.z) : ui.displayMessage(Message.YouGathered, MessageType.None, game.getName(Item.defines[R.type])), 2 === g && S === !0) ui.displayMessage(Message.ToolAppearedEffectiveForGathering), player.addMilestone(MilestoneType.Gatherer);
                                else if (1 === g && k <= 20) {
                                    ui.displayMessage(Message.HurtHandsByGatheringWithNoTool, MessageType.Bad);
                                    var A = Utilities.Random.randomFromInterval(player.strength / 50, player.strength / 25);
                                    player.damage(-A, messages[Message.UsingBareHandsToGather]), ui.displayHint(HintType.UseATool)
                                }
                                if (game.addDelay(Delay.ShortPause), V(n, o, player.z, t)) {
                                    I = !0;
                                    break
                                }
                                S === !0 && (S = !1)
                            }
                        }
                    }
                } else if (game.addDelay(Delay.ShortPause), V(n, o, player.z, t)) break;
            game.spawnClawWorm(), e && Item.damage(e), player.staminaReduction(p), game.updateCraftTableAndWeightNextTurn();
            var B = terrains[r].particles;
            game.createParticles(player.x + player.direction.x, player.y + player.direction.y, B[0], B[1], B[2]), game.passTurn()
        }
    }

    function K(e) {
        var t, i = Math.floor(4 * Utilities.Random.nextFloat());
        switch (i) {
            case 1:
                t = ItemType.TatteredMap;
                break;
            case 2:
                t = ItemType.OldInstructionalScroll;
                break;
            default:
            case 3:
                t = ItemType.RefinedSand
        }
        t ? (Item.create(t), ui.displayMessage(Message.DiscoveredInTheBottle, MessageType.None, game.getName(Item.defines[t]))) : (audio.queueEffect(SfxType.Fail), ui.displayMessage(Message.PaperTurnedToMush, MessageType.Bad)), Item.changeInto(e, ItemType.GlassBottle), player.updateMalignity(-25), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function j(e) {
        s(e, ActionType.DrinkCure)
    }

    function Q(e) {
        return player.z < Z_NORMAL ? void ui.displayMessage(Message.CannotToTellTime) : (game.dayNight >= 0 && game.dayNight <= .4 ? ui.displayMessage(Message.AppearsToBeMidDay) : 0 === game.dayNightSwitch && game.dayNight >= .4 && game.dayNight <= .5 ? ui.displayMessage(Message.SunIsSetting) : 0 === game.dayNightSwitch && game.dayNight >= .5 && game.dayNight <= .6 ? ui.displayMessage(Message.AppearsToBeDusk) : game.dayNight >= .6 ? ui.displayMessage(Message.AppearsToBeNight) : 1 === game.dayNightSwitch && game.dayNight >= .4 && game.dayNight <= .5 ? ui.displayMessage(Message.SunIsRising) : 1 === game.dayNightSwitch && game.dayNight >= .5 && game.dayNight <= .6 && ui.displayMessage(Message.AppearsToBeDawn), 0 === game.dayNightSwitch && game.dayNight <= .25 ? ui.displayMessage(Message.ThirdQuarterOfDay) : 0 === game.dayNightSwitch && game.dayNight <= .5 ? ui.displayMessage(Message.FourthQuarterOfDay) : 1 === game.dayNightSwitch && game.dayNight <= .5 ? ui.displayMessage(Message.FirstQuarterOfDay) : 1 === game.dayNightSwitch && game.dayNight <= .25 ? ui.displayMessage(Message.SecondQuarterOfDay) : 0 === game.dayNightSwitch && game.dayNight <= .75 ? ui.displayMessage(Message.FirstQuarterOfNight) : 0 === game.dayNightSwitch && game.dayNight <= 1 ? ui.displayMessage(Message.SecondQuarterOfNight) : 1 === game.dayNightSwitch && game.dayNight <= 1 ? ui.displayMessage(Message.ThirdQuarterOfNight) : 1 === game.dayNightSwitch && game.dayNight <= .75 && ui.displayMessage(Message.FourthQuarterOfNight), Item.damage(e), game.updateCraftTableAndWeightNextTurn(), void game.passTurn())
    }

    function X(e, t) {
        if (player.z !== Z_NORMAL) return void ui.displayMessage(Message.NeedToStartTravelsOutside);
        var i = game.getTile(player.x, player.y, player.z);
        return Utilities.TileHelpers.getType(i) !== TerrainType.DeepSeawater && Utilities.TileHelpers.getType(i) !== TerrainType.Seawater && Utilities.TileHelpers.getType(i) !== TerrainType.ShallowSeawater ? void ui.displayMessage(Message.StartTravelInWater) : void ui.displayConfirmDialog(t ? Message.TravelAway : Message.AreYouSureYouWantToSail, [Message.Yes, Message.No], function(i) {
            if (i === Message.Yes) {
                var a = Item.countItemsInContainerByGroup(player.inventory, ItemTypeGroup.Food),
                    n = Item.countItemsInContainerByGroup(player.inventory, ItemTypeGroup.Water);
                if (a < 5) return void ui.displayMessage(Message.NotEnoughFoodToTravel, MessageType.None, messages[Message.Food]);
                if (n < 5) return void ui.displayMessage(Message.NotEnoughFoodToTravel, MessageType.None, messages[Message.Water]);
                if (t) {
                    player.state = PlayerState.Traveling;
                    for (var o = 0; o < game.items.length; o++) {
                        var r = game.items[o];
                        Item.isInInventory(r) || Item.remove(r)
                    }
                    player.addMilestone(MilestoneType.Navigator)
                } else {
                    var s = Item.getItemInContainer(player.inventory, ItemType.GoldCoins),
                        l = Item.getItemInContainer(player.inventory, ItemType.GoldenChalice),
                        p = Item.getItemInContainer(player.inventory, ItemType.GoldenKey),
                        d = Item.getItemInContainer(player.inventory, ItemType.GoldenRing),
                        u = Item.getItemInContainer(player.inventory, ItemType.GoldenSword);
                    if (!(s && l && p && d && u)) return void ui.displayMessage(Message.NotEnoughTreasureToReturn);
                    Item.remove(s), Item.remove(l), Item.remove(p), Item.remove(d), Item.remove(u), player.state = game.wonGame ? PlayerState.None : PlayerState.Won, player.addMilestone(MilestoneType.Seafarer)
                }
                for (var g = 0; g < 5; g++) {
                    var m = Item.getItemInContainerByGroup(player.inventory, ItemTypeGroup.Food);
                    m && !Item.returns(m) && Item.remove(m);
                    var y = Item.getItemInContainerByGroup(player.inventory, ItemTypeGroup.Water);
                    y && !Item.returns(y) && Item.remove(y)
                }
                ui.switchToScreen(ScreenId.None), player.monsterSpawner >= 100 && (player.monsterSpawner -= 10), player.hunger = Math.floor(player.hunger / 3), player.thirst = Math.floor(player.thirst / 3), Item.damage(e), player.updateMalignity(-2500), game.resetGameState()
            }
        })
    }

    function $(e) {
        var t = Item.getItemInContainer(player.inventory, ItemType.BlackPowder);
        return t ? (Item.remove(t), void y(e, AttackType.Fire)) : void ui.displayMessage(Message.NoBlackPowderToFireWeapon, MessageType.Bad)
    }

    function Z(e) {
        var t = 0,
            i = 0,
            a = Utilities.Random.randomFromInterval(5, 10);
        1 === player.direction.x ? t = a : player.direction.x === -1 ? t = -a : 1 === player.direction.y ? i = a : player.direction.y === -1 && (i = -a);
        var n = player.x + player.direction.x + t,
            o = player.y + player.direction.y + i,
            r = game.getTile(n, o);
        return void 0 !== r.doodadId && Doodad.defines[game.doodads[r.doodadId].type].blockMove ? void ui.displayMessage(Message.TeleportBlocked) : void 0 !== r.monsterId ? void ui.displayMessage(Message.TeleportBlocked) : terrains[Utilities.TileHelpers.getType(r)].passable ? (ui.displayMessage(Message.Teleported), player.x = n, player.y = o, player.nextX = n, player.nextY = o, renderer.computeSpritesInViewport(), audio.queueEffect(SfxType.Walk), player.updateMalignity(25), Item.damage(e), game.updateCraftTableAndWeightNextTurn(), void game.passTurn()) : void ui.displayMessage(Message.TeleportBlocked)
    }

    function J(e) {
        var t = Item.getItemInContainer(player.inventory, ItemType.Inkstick);
        if (!t) return void ui.displayMessage(Message.NoInkToDrawMap, MessageType.Bad);
        var i = Math.ceil(100 * Utilities.Random.nextFloat());
        if (player.skills[SkillType.Cartography].percent >= i - 25) {
            ui.displayMessage(Message.DrewSurroundings), player.skillGain(SkillType.Cartography, !1, !1), Item.remove(t), game.makeMiniMap(player.x, player.y, player.z, !1);
            var a = Item.defines[ItemType.DrawnMap].durability - (e.maxDur - e.minDur),
                n = Item.create(ItemType.DrawnMap, e.quality);
            n.tatteredMap = {
                x: player.x,
                y: player.y,
                z: player.z
            }, n.minDur = n.maxDur = a, Item.remove(e), ui.displayMessage(Message.YouPickedUp, MessageType.None, game.getName(Item.defines[n.type])), audio.queueEffect(SfxType.Throw)
        } else Item.damage(t), Item.damage(e), player.skillGain(SkillType.Cartography, .1, !1), ui.displayMessage(Message.FailedToDrawMap, MessageType.Bad), audio.queueEffect(SfxType.Fail);
        player.updateMalignity(-25), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function ee() {
        var e = game.getTileInFrontOfPlayer();
        if (void 0 === e.doodadId) return !1;
        var t = game.doodads[e.doodadId];
        if (!t) return !1;
        if (t.type === DoodadType.WoodenDoor) t.type = DoodadType.WoodenDoorOpen;
        else {
            if (t.type !== DoodadType.WoodenGate) return !1;
            t.type = DoodadType.WoodenGateOpen
        }
        return world.updateTile(player.x + player.direction.x, player.y + player.direction.y, player.z, e), audio.queueEffect(SfxType.PickUp), game.passTurn(), !0
    }

    function te() {
        var e = game.getTileInFrontOfPlayer(),
            t = e;
        if (t.containedItems && t.containedItems.length > 0 || void 0 !== e.monsterId || void 0 !== e.eventId || !game.checkAndRemoveBlood()) return ui.displayMessage(Message.SomethingInWayOfClosingDoor), !1;
        var i = game.doodads[e.doodadId],
            a = -1;
        return i.type === DoodadType.WoodenDoorOpen ? a = DoodadType.WoodenDoor : i.type === DoodadType.WoodenGateOpen && (a = DoodadType.WoodenGate), i.type = a, world.updateTile(player.x + player.direction.x, player.y + player.direction.y, player.z, e), audio.queueEffect(SfxType.PickUp), game.passTurn(), !0
    }

    function ie(e) {
        var t = game.getTileInFrontOfPlayer(),
            i = terrains[Utilities.TileHelpers.getType(t)];
        return !i.passable || void 0 !== t.doodadId && !Doodad.defines[game.doodads[t.doodadId].type].flammable ? void ui.displayMessage(Message.SomethingInTheWayOfPerforming) : i.water || i.shallowWater ? void ui.displayMessage(Message.CannotBePerformedOverWater) : (game.fireBreath(player.x, player.y, player.z, player.facingDirection, game.getName(Item.defines[e.type])), audio.queueEffect(SfxType.Throw), Item.remove(e), player.updateMalignity(100), game.updateCraftTableAndWeightNextTurn(), void game.passTurn())
    }
    var ae = {};
    e.add = t, e.remove = i, e.execute = a, e.preserve = n, e.addFuel = o, e.consume = r, e.consumeItem = s, e.openContainer = l, e.reinforce = p, e.repair = d, e.transmogrify = u, e.inspect = g, e.canTryCarve = S, e.hurtTerrain = V, e.openDoor = ee, e.closeDoor = te, e.squeeze = ie
}(Actions || (Actions = {}));
var WAudio = function() {
        function e() {
            this.musicSpeed = 1, this.fadingOut = !1, this.fadingIn = !1, this.sfx = {}, this.music = {}, this.soundList = [], this.musicPlaylist = ["shipwrecked", "darkerworld", "thefirstspark", "nomadsheartbeat", "thewildborn", "nightowl", "savage", "underworld", "shuddersounds"], this.musicTrack = 0, this.fileFormat = "mp3";
            var e = new Audio,
                t = "function" == typeof e.canPlayType && "" !== e.canPlayType("audio/mpeg");
            t || (this.fileFormat = "ogg")
        }
        return e.prototype.setUpMusic = function(e) {
            e.volume = game.options.mute ? 0 : game.options.music, e.playbackRate = this.musicSpeed, e.currentTime = 0, this.play(e)
        }, e.prototype.playMusic = function() {
            var e = this,
                t = this.music[this.musicTrack];
            t ? this.setUpMusic(t) : (t = new Audio("sound/" + this.musicPlaylist[this.musicTrack] + "." + this.fileFormat), t.onloadeddata = function() {
                e.setUpMusic(t)
            }, t.onended = function() {
                e.nextTrack()
            }, this.music[this.musicTrack] = t)
        }, e.prototype.updateMusicSpeed = function(e) {
            this.musicSpeed = e;
            var t = this.music[this.musicTrack];
            t.playbackRate = e
        }, e.prototype.fadeOut = function() {
            var e = this,
                t = this.music[this.musicTrack];
            if (game.options.mute) return void t.pause();
            var i = .1 * game.options.music,
                a = setInterval(function() {
                    e.fadingIn || (e.fadingOut = !0, t.volume <= i ? (clearInterval(a), t.pause(), e.fadingOut = !1) : t.volume -= i)
                }, 50)
        }, e.prototype.fadeIn = function() {
            var e = this,
                t = this.music[this.musicTrack];
            if (game.options.mute) return void this.play(t);
            var i = .1 * game.options.music,
                a = setInterval(function() {
                    e.fadingOut || (e.play(t), e.fadingIn = !0, t.volume >= game.options.music - i ? (clearInterval(a), e.fadingIn = !1) : t.volume += i)
                }, 50)
        }, e.prototype.nextTrack = function() {
            for (var e in this.music) this.music[e].pause();
            this.musicTrack++, this.musicTrack >= this.musicPlaylist.length && (this.musicTrack = 0), this.playMusic()
        }, e.prototype.playEffect = function(e, t) {
            void 0 === t && (t = 1);
            var i = SfxType[e].toString().toLowerCase(),
                a = Utilities.Random.randomFromInterval(1, 3);
            a > 1 && (i += a), this.sfx[i] || (this.sfx[i] = new Audio("sound/" + i + "." + this.fileFormat)), this.sfx[i].volume = game.options.mute ? 0 : game.options.effects, this.sfx[i].playbackRate = t;
            try {
                this.sfx[i].currentTime = 0, this.play(this.sfx[i])
            } catch (n) {
                Utilities.Console.error(Source.Audio, "Error playing sound effect", n)
            }
        }, e.prototype.updateVolume = function() {
            var e = game.options.effects,
                t = game.options.music;
            game.options.mute && (e = 0, t = 0);
            for (var i = Object.keys(this.music), a = 0; a < i.length; a++) this.music[i[a]] && (this.music[i[a]].volume = t);
            for (var n = Object.keys(this.sfx), o = 0; o < n.length; o++) this.sfx[n[o]] && (this.sfx[n[o]].volume = e)
        }, e.prototype.queueEffect = function(e, t, i) {
            void 0 === t && (t = 0), void 0 === i && (i = 1);
            var a = this.soundList.length;
            if (a > 0) {
                var n = this.soundList[a - 1];
                if (n && n[0] === e && n[1] === t && n[2] === i && Date.now() - n[3] <= 100) return
            }
            this.soundList.push([e, t, i, Date.now()])
        }, e.prototype.processEffects = function() {
            for (var e = 0; e < this.soundList.length; e++) this.soundList[e][1] <= 0 ? (this.playEffect(this.soundList[e][0], this.soundList[e][2]), this.soundList.splice(e, 1)) : this.soundList[e][1]--
        }, e.prototype.play = function(e) {
            var t = e.play();
            void 0 !== t && t["catch"](function(e) {
                Utilities.Console.error(Source.Audio, "Error playing audio", e)
            })
        }, e
    }(),
    Doodad;
! function(e) {
    function t() {
        for (var e = v; e < game.items.length; ++e)
            if (null === game.doodads[e] || void 0 === game.doodads[e]) return v = e, e;
        for (var e = 0; e < v; ++e)
            if (null === game.doodads[e] || void 0 === game.doodads[e]) return v = e, e;
        return -1
    }

    function i(i, a, n, o, r, s, l, p, d) {
        var u = e.defines[i],
            g = {
                type: i,
                x: a,
                y: n,
                z: o
            },
            m = game.getTile(a, n, o);
        m.doodadId = t(), m.doodadId < 0 ? (m.doodadId = game.doodads.length, game.doodads.push(g)) : game.doodads[m.doodadId] = g, u.spreadMax && void 0 === r ? g.spread = Math.floor(Utilities.Random.nextFloat() * u.spreadMax + 1) : g.spread = r;
        var y = g;
        void 0 !== u.weightCapacity && (y.containedItems = [], y.containedWithin = null, y.weightCapacity = u.weightCapacity), u.decayMax && void 0 === s ? g.decay = u.decayMax : g.decay = s;
        var c = 6 - Math.floor(3 * Utilities.Random.nextFloat());
        return void 0 === l && u.resource ? i === DoodadType.LockedWoodenChest ? g.minDur = 25 : Item.defines[u.resource[0].item].durability ? g.minDur = Item.defines[u.resource[0].item].durability : g.minDur = c : g.minDur = l, void 0 === p && u.resource ? i === DoodadType.LockedWoodenChest ? g.maxDur = 25 : Item.defines[u.resource[0].item].durability ? g.maxDur = Item.defines[u.resource[0].item].durability : g.maxDur = c : g.maxDur = p, void 0 === d && u.resource ? Item.defines[u.resource[0].item].weight ? g.weight = Item.defines[u.resource[0].item].weight : g.weight = Item.getWeight(u.resource[0].item) : g.weight = d, world.updateTile(a, n, o, m), g
    }

    function a(e) {
        var t = e.x,
            i = e.y,
            a = e.z,
            n = game.getTile(t, i, a);
        delete game.doodads[n.doodadId], delete n.doodadId, world.updateTile(t, i, a, n)
    }

    function n(e) {
        for (var t = 0, i = e.length; t < i; t++) o(e[t])
    }

    function o(t) {
        if (void 0 !== t) {
            var n = e.defines[t.type];
            if (t.type === DoodadType.MonsterIdol) {
                var o = Math.floor(10 + t.x - 5),
                    s = Math.floor(10 + t.y - 5);
                null !== game.spawnMonsterFromGroup(MonsterSpawnGroup.Any, o, s, t.z) && game.isOnScreen(t.x, t.y, t.z) && ui.displayMessage(Message.MonsterIdolAttractedCreature)
            }
            if (t.spread >= 1) {
                var l = Math.floor(10 * Utilities.Random.nextFloat());
                if (0 === l) {
                    if (!r(t)) return;
                    var p = Math.floor(6 * Utilities.Random.nextFloat()) - 3 + t.x,
                        d = Math.floor(6 * Utilities.Random.nextFloat()) - 3 + t.y;
                    if ((t.type === DoodadType.WhiteMushrooms || t.type === DoodadType.SpottedRedMushroom) && player.getMalignity() >= 8e3 && 0 === Math.floor(40 * Utilities.Random.nextFloat())) {
                        var o = Math.floor(3 + t.x - 1),
                            s = Math.floor(3 + t.y - 1);
                        game.spawnMonster(MonsterType.LivingMushroom, o, s, t.z)
                    }
                    var u = game.getTile(p, d, t.z);
                    if (!game.isTileEmpty(p, d, t.z)) return;
                    var g = !0;
                    if (n.allowedTiles) {
                        g = !1;
                        for (var m = 0, y = n.allowedTiles.length; m < y; m++)
                            if (Utilities.TileHelpers.getType(u) === n.allowedTiles[m]) {
                                g = !0;
                                break
                            }
                    }
                    if (g) {
                        if (n.growth) {
                            var c = i(n.growth, p, d, t.z, Math.round(Utilities.Random.nextFloat()));
                            c.growInto = t.type
                        } else {
                            var c = i(t.type, p, d, t.z, Math.round(Utilities.Random.nextFloat()));
                            c.growInto = t.growInto
                        }
                        t.spread--
                    }
                }
            }
            if (t.decay !== -1 && null !== t.decay && void 0 !== t.decay)
                if (t.decay >= 1) n.waterSource ? t.type === DoodadType.SolarStill && game.dayNight <= .5 && (t.decay--, t.decay <= 0 && (t.gatherReady = !0, t.growInto = void 0)) : t.decay--;
                else if (0 === t.decay && !n.waterSource)
                if (t.type === DoodadType.Sapling) r(t) && game.changeTile({
                    type: TerrainType.Tree
                }, t.x, t.y, t.z, !1), a(t);
                else if (t.type === DoodadType.GrowingGrass) r(t) && game.changeTile({
                type: TerrainType.Grass
            }, t.x, t.y, t.z, !0), a(t);
            else {
                if (t.spread = -1, t.decay = -1, t.type === DoodadType.LitStoneWaterStill) t.type = DoodadType.StoneWaterStill, t.gatherReady = !0;
                else if (n.growing) {
                    if (!r(t) || !t.growInto) return void a(t);
                    t.type = t.growInto, e.defines[t.growInto].decayMax && (t.decay = e.defines[t.growInto].decayMax), t.growInto = void 0
                } else {
                    if (!n.revert) return void a(t);
                    if (t.torch) {
                        var h = Item.getTileContainer(t.x, t.y, t.z);
                        return Item.create(ItemType.PileOfAsh, t.quality, h), void a(t)
                    }
                    t.type = n.revert
                }
                world.updateTile(t.x, t.y, t.z, game.getTile(t.x, t.y, t.z))
            }
        }
    }

    function r(t) {
        return t.z !== Z_CAVE || !!e.defines[t.type].caveGrow
    }

    function s(t) {
        var i = t;
        Item.isContainer(t) && ui.closeContainer(i);
        var n = e.defines[t.type];
        if (n.resource) {
            for (var o = n.resource, r = 0; r < o.length; r++) {
                var s = ItemQuality.Random;
                void 0 !== t.quality && (s = t.quality);
                var l = o[r].chance,
                    p = null;
                l ? Math.ceil(100 * Utilities.Random.nextFloat()) <= l && (p = Item.create(o[r].item, s)) : p = Item.create(o[r].item, s), p && (t.minDur && (p.minDur = t.minDur - 1), t.maxDur && (p.maxDur = t.maxDur), t.weight && (p.weight = t.weight), game.addDelay(Delay.ShortPause), ui.updateItem(p))
            }
            ui.displayMessage(Message.YouCollected, MessageType.None, game.getName(n))
        } else {
            if (audio.queueEffect(SfxType.PickUp), n.growing && t.growInto) {
                var d = e.defines[t.growInto],
                    u = "";
                d.prefix && (u = d.prefix), ui.displayMessage(Message.DestroyedGrowingByPickingItUp, MessageType.Bad, u, d.name)
            }
            if (t.torch) {
                var g = t.torch.type,
                    m = void 0;
                m = e.defines[t.type].fire ? 20 * t.decay : 20 * t.torch.decay;
                var p = Item.create(g, t.quality);
                p.minDur = t.minDur - 1, p.maxDur = t.maxDur, t.weight && (p.weight = t.weight), p.decay = m, ui.updateItem(p), ui.displayMessage(Message.YouPickedUp, MessageType.None, game.getName(Item.defines[p.type]))
            }
        }
        n.skillUse && (player.skillGain(n.skillUse, !1, !1), player.staminaReduction(n.skillUse)), n.causesStatus && c(n), a(t), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function l(t, i) {
        void 0 === i && (i = !0);
        var a = t;
        return Item.isContainer(t) && a.containedItems.length > 0 || e.defines[t.type].isLocked ? (i && ui.displayMessage(Message.CannotPickUpWithItemsInside), !1) : e.defines[t.type].blockDig ? (i && ui.displayMessage(Message.CannotPickUpWhileLit), !1) : !(t.gatherReady || t.decay > 0 && e.defines[t.type].waterSource) || (i && ui.displayMessage(Message.CannotPickupWhenFull), !1)
    }

    function p(t, i, a) {
        var n = game.getTile(t, i, a);
        if (void 0 !== n.doodadId) {
            var o = game.doodads[n.doodadId];
            if (!l(o)) return;
            var r = e.defines[o.type];
            if (r && r.canPickupWithoutTool !== !0) {
                var p = Math.floor(10 * Utilities.Random.nextFloat());
                if (p <= 1) {
                    ui.displayMessage(Message.HurtHandsByGatheringWithNoTool, MessageType.Bad);
                    var d = Utilities.Random.randomFromInterval(player.strength / 50, player.strength / 25);
                    player.damage(-d, messages[Message.UsingBareHandsToGather]), ui.displayHint(HintType.UseATool)
                }
            }
            var u = terrains[Utilities.TileHelpers.getType(n)];
            game.createParticles(player.x + player.direction.x, player.y + player.direction.y, u.particles[0], u.particles[1], u.particles[2]), s(o)
        }
    }

    function d(t, i) {
        void 0 === i && (i = null);
        var n = e.defines[t.type],
            o = Math.ceil(100 * Utilities.Random.nextFloat());
        if (n.trample) {
            var r = 0;
            if (null === i) {
                var s = n.skillUse;
                s && player.skills[s].percent > 0 && (r = Math.floor(player.skills[s].percent / 20))
            }
            if (o + r <= 10) return t.spread -= 1, null === i && ui.displayMessage(Message.Trampling, MessageType.Bad, game.getName(n)), audio.queueEffect(SfxType.Trample), game.createParticles(t.x, t.y, 101, 68, 35), t.spread <= -1 && (null === i ? ui.displayMessage(Message.TrampleIntoGround, MessageType.Bad, game.getName(n)) : game.fov.canSeeTile(t.x, t.y) && ui.displayMessage(Message.TrampledIntoGround, MessageType.Bad, game.getName(monsters[game.monsters[i].type], TextCase.Sentence), game.getName(n)), a(t)), !0
        }
        return !1
    }

    function u(e) {
        return e < 1 ? Message.PlantIsNotFertile : e <= 4 ? Message.PlantIsFertile : Message.PlantVeryHealthy
    }

    function g(e) {
        var t = e.minDur / e.maxDur;
        return t >= 1 ? Message.DoodadAppearsUnscathed : t >= .75 ? Message.DoodadShowsSignsOfWear : t >= .5 ? Message.DoodadAppearsDamaged : Message.DoodadAppearsOnVergeOfBreaking
    }

    function m(e) {
        ui.displayMessage(u(e))
    }

    function y(t) {
        var i = [],
            a = e.defines[t.type];
        if (a.growing && t.growInto) {
            var n = e.defines[t.growInto];
            i.push({
                type: InspectType.Doodad,
                messagePack: {
                    message: Message.SeeGrowing,
                    args: [n.prefix, n.name]
                }
            })
        } else i.push({
            type: InspectType.Doodad,
            messagePack: {
                message: Message.YouSee,
                args: [game.getName(a)]
            }
        }); if (Item.isContainer(t)) {
            var o = t;
            o.containedItems.length > 0 && i.push({
                type: InspectType.Items,
                messagePack: {
                    message: Message.ItContains,
                    args: [Item.getItemsString(o.containedItems)]
                }
            })
        }
        if (a.weightCapacity) {
            var o = t;
            i.push({
                type: InspectType.Doodad,
                messagePack: {
                    message: Message.ItsWeightCapacity,
                    args: [Utilities.roundNumber(Item.computeContainerWeight(o), 1), o.weightCapacity]
                }
            })
        }
        return a.fire && void 0 !== t.decay ? i.push({
            type: InspectType.Doodad,
            messagePack: {
                message: game.getFireMessage(t.decay)
            }
        }) : a.garden && void 0 !== t.spread ? a.spreadMax && i.push({
            type: InspectType.Doodad,
            messagePack: {
                message: u(t.spread)
            }
        }) : a.waterSource && (t.decay > 0 && i.push({
            type: InspectType.Doodad,
            messagePack: {
                message: Message.UnpurifiedWaterInStill
            }
        }), t.gatherReady && i.push({
            type: InspectType.Doodad,
            messagePack: {
                message: Message.PurifiedWaterInStill
            }
        })), t.minDur && t.maxDur && i.push({
            type: InspectType.Doodad,
            messagePack: {
                message: g(t)
            }
        }), i
    }

    function c(e) {
        var t = e.causesStatus;
        if (t)
            for (var i = 0; i < t.length; i++) {
                var a = Math.floor(player.skills[SkillType.Anatomy].percent / 20),
                    n = 0;
                e.skillUse && (n = Math.floor(player.skills[e.skillUse].percent / 20));
                var o = Math.ceil(100 * Utilities.Random.nextFloat());
                switch (t[i]) {
                    case StatusType.Bleeding:
                        if (!player.status.bleeding && o <= 35 - a - n) {
                            var r = Utilities.Random.randomFromInterval(player.strength / 25, player.strength / 10);
                            ui.displayMessage(Message.DoodadCauseStatus, MessageType.Bad, e.description, messages[Message.Cut], r), player.damage(-r, messages[Message.ByBleedingOut]), player.skillGain(SkillType.Anatomy, .1, !1), player.status.bleeding = !0
                        }
                        break;
                    case StatusType.Poisoned:
                        if (!player.status.poisoned && o <= 35 - a - n) {
                            var s = Utilities.Random.randomFromInterval(player.strength / 25, player.strength / 10);
                            ui.displayMessage(Message.DoodadCauseStatus, MessageType.Bad, e.description, messages[Message.Poisoned], s), player.damage(-s, messages[Message.ByPoisoning]), player.skillGain(SkillType.Anatomy, .1, !1), player.status.poisoned = !0
                        }
                        break;
                    case StatusType.Burned:
                        if (o = Math.floor(5 * Utilities.Random.nextFloat()), 0 === o) {
                            var l = game.getBurned(!0);
                            null !== l && ui.displayMessage(Message.DoodadCauseStatus, MessageType.Bad, e.description, messages[Message.Burned], l)
                        }
                }
            }
    }

    function h(t, i) {
        if (void 0 === i && (i = !1), t.minDur <= 1 || i) {
            var n = e.defines[t.type].resource;
            if (n) {
                var o = Item.create(n[0].item, t.quality, Item.getTileContainer(t.x, t.y, t.z));
                o.minDur = t.minDur - 1, o.maxDur = t.maxDur
            }
            if (t.type === DoodadType.LockedWoodenChest && T(t), a(t), e.defines[t.type].weightCapacity)
                for (var r = t, s = r.containedItems.length - 1; s >= 0; s--) Item.placeOnTile(r.containedItems[s], t.x + Utilities.Random.randomFromInterval(-1, 1), t.y + Utilities.Random.randomFromInterval(-1, 1), t.z, !0)
        } else t.minDur--;
        game.fov.canSeeTile(t.x, t.y) && audio.queueEffect(SfxType.Hit)
    }

    function T(t) {
        t.type = DoodadType.WoodenChest;
        var i = t,
            a = game.getTile(t.x, t.y, t.z);
        i.containedItems = [], i.containedWithin = null, i.weightCapacity = e.defines[DoodadType.WoodenChest].weightCapacity, world.updateTile(t.x, t.y, t.z, a);
        var n, o;
        o = t.treasure ? [LootGroupType.High, LootGroupType.Treasure, LootGroupType.CaveChest] : [LootGroupType.Low, LootGroupType.High, LootGroupType.CaveChest, LootGroupType.CaveChest];
        for (var r = Math.floor(3 * Utilities.Random.nextFloat() + 3), s = 0; s <= r; s++) {
            var l = Math.floor(Utilities.Random.nextFloat() * o.length);
            n = Item.lootGroup[o[l]][Math.floor(Utilities.Random.nextFloat() * Item.lootGroup[o[l]].length)];
            var p = Item.Quality.createRandom(void 0 !== Item.defines[n].equip, 200);
            Item.create(n, p, t)
        }
    }
    var f = function() {
        function e(e, t, i, a, n) {
            this.type = e, this.tall = t, this.animated = n, this.topLeft = new Vec2([i, a]), this.topRight = new Vec2([i + 1, a]), this.bottomLeft = new Vec2([i, a + 1]), this.bottomRight = new Vec2([i + 1, a + 1])
        }
        return e
    }();
    e.DoodadInfo = f;
    var v = 0;
    e.create = i, e.remove = a, e.updateAll = n, e.update = o, e.canGrowInCaves = r, e.gather = s, e.canPickup = l, e.pickup = p, e.checkForTrampling = d, e.getGardenFertilityMessage = u, e.getDurabilityMessage = g, e.messageGardenFertility = m, e.inspect = y, e.causeStatus = c, e.damage = h, e.addTreasureChestLoot = T
}(Doodad || (Doodad = {}));
var Doodad;
! function(e) {
    e.defines = Array(), e.defines[DoodadType.WhiteMushrooms] = {
        spreadMax: 3,
        resource: [{
            item: ItemType.WhiteMushrooms
        }],
        skillUse: SkillType.Mycology,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        garden: !0,
        trample: !0,
        caveGrow: !0,
        growth: DoodadType.GrowingMushroom,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.SpottedRedMushroom] = {
        spreadMax: 3,
        resource: [{
            item: ItemType.SpottedRedMushroom
        }],
        skillUse: SkillType.Mycology,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        garden: !0,
        trample: !0,
        caveGrow: !0,
        growth: DoodadType.GrowingMushroom,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.YellowFlowers] = {
        spreadMax: 4,
        resource: [{
            item: ItemType.FlowerSeeds
        }, {
            item: ItemType.FlowerPetals
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        garden: !0,
        trample: !0,
        growth: DoodadType.GrowingPlant,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.GrowingGrass] = {
        spreadMax: 5,
        decayMax: 100,
        resource: [{
            item: ItemType.GrassSeeds
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Dirt],
        garden: !0,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.Thistles] = {
        spreadMax: 4,
        resource: [{
            item: ItemType.ThistleSeeds
        }, {
            item: ItemType.Thistles
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        garden: !0,
        trample: !0,
        growth: DoodadType.GrowingPlant,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.Vines] = {
        spreadMax: 5,
        resource: [{
            item: ItemType.VineSeeds
        }, {
            item: ItemType.Vine
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Swamp, TerrainType.Grass],
        garden: !0,
        growth: DoodadType.GrowingPlant,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.Seaweed] = {
        spreadMax: 3,
        resource: [{
            item: ItemType.Seaweed
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Seawater],
        graphicVariation: !0
    }, e.defines[DoodadType.Sapling] = {
        resource: [{
            item: ItemType.Sapling
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        decayMax: 275,
        flammable: !0,
        onBurn: ItemType.Charcoal,
        graphicVariation: !0,
        growth: DoodadType.GrowingPlant
    }, e.defines[DoodadType.DeadBush] = {
        resource: [{
            item: ItemType.Twigs
        }, {
            item: ItemType.Branch,
            chance: 90
        }, {
            item: ItemType.PlantRoots
        }],
        skillUse: SkillType.Botany,
        flammable: !0,
        onBurn: ItemType.Charcoal,
        graphicVariation: !0
    }, e.defines[DoodadType.Cacti] = {
        resource: [{
            item: ItemType.Nopal
        }, {
            item: ItemType.CactusSpines
        }],
        skillUse: SkillType.Botany,
        damage: 1,
        garden: !0,
        spreadMax: 1,
        growth: DoodadType.GrowingPlant,
        allowedTiles: [TerrainType.Sand, TerrainType.Gravel, TerrainType.Dirt, TerrainType.Grass],
        graphicVariation: !0
    }, e.defines[DoodadType.BerryBush] = {
        resource: [{
            item: ItemType.RedBerries
        }, {
            item: ItemType.Leaves
        }, {
            item: ItemType.Twigs
        }, {
            item: ItemType.PlantRoots
        }, {
            item: ItemType.BigRedBerry,
            chance: 1
        }],
        skillUse: SkillType.Botany,
        garden: !0,
        spreadMax: 1,
        growth: DoodadType.GrowingPlant,
        allowedTiles: [TerrainType.Dirt, TerrainType.Grass],
        flammable: !0,
        onBurn: ItemType.Charcoal,
        graphicVariation: !0
    }, e.defines[DoodadType.PileOfRocks] = {
        resource: [{
            item: ItemType.LargeRock
        }, {
            item: ItemType.Stones
        }],
        graphicVariation: !0
    }, e.defines[DoodadType.Campfire] = {
        resource: [{
            item: ItemType.Campfire
        }],
        lit: DoodadType.LitCampfire,
        canPickupWithoutTool: !0,
        repairable: !0
    }, e.defines[DoodadType.LitCampfire] = {
        decayMax: 8,
        blockDig: !0,
        fire: !0,
        revert: DoodadType.Campfire,
        animated: !0,
        repairable: !0
    }, e.defines[DoodadType.Furnace] = {
        resource: [{
            item: ItemType.Furnace
        }],
        blockMove: !0,
        lit: DoodadType.LitFurnace,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [130, 128, 128]
    }, e.defines[DoodadType.LitFurnace] = {
        decayMax: 8,
        blockDig: !0,
        fire: !0,
        blockMove: !0,
        revert: DoodadType.Furnace,
        animated: !0,
        repairable: !0,
        particles: [130, 128, 128]
    }, e.defines[DoodadType.Kiln] = {
        resource: [{
            item: ItemType.Kiln
        }],
        blockMove: !0,
        lit: DoodadType.LitKiln,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [173, 122, 78]
    }, e.defines[DoodadType.LitKiln] = {
        decayMax: 8,
        blockDig: !0,
        fire: !0,
        blockMove: !0,
        revert: DoodadType.Kiln,
        animated: !0,
        repairable: !0,
        particles: [173, 122, 78]
    }, e.defines[DoodadType.ForgeAndAnvil] = {
        resource: [{
            item: ItemType.ForgeAndAnvil
        }],
        lit: DoodadType.LitForgeAndAnvil,
        blockMove: !0,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [130, 128, 128]
    }, e.defines[DoodadType.LitForgeAndAnvil] = {
        decayMax: 8,
        blockDig: !0,
        fire: !0,
        blockMove: !0,
        revert: DoodadType.ForgeAndAnvil,
        animated: !0,
        repairable: !0,
        particles: [130, 128, 128]
    }, e.defines[DoodadType.WoodenChest] = {
        resource: [{
            item: ItemType.WoodenChest
        }],
        weightCapacity: 75,
        canPickupWithoutTool: !0,
        blockMove: !0,
        repairable: !0,
        flammable: !0,
        particles: [108, 71, 25]
    }, e.defines[DoodadType.LockedWoodenChest] = {
        resource: [{
            item: ItemType.WoodenChest
        }],
        blockDig: !0,
        blockMove: !0,
        isLocked: !0,
        flammable: !0,
        particles: [108, 71, 25]
    }, e.defines[DoodadType.TallGrass] = {
        spreadMax: 20,
        resource: [{
            item: ItemType.GrassSeeds
        }, {
            item: ItemType.GrassBlades
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Dirt, TerrainType.Grass, TerrainType.Gravel],
        garden: !0,
        flammable: !0,
        graphicVariation: !0,
        growth: DoodadType.GrowingPlant
    }, e.defines[DoodadType.PineapplePlant] = {
        resource: [{
            item: ItemType.Pineapple
        }],
        skillUse: SkillType.Botany,
        garden: !0,
        spreadMax: 1,
        growth: DoodadType.GrowingPlant,
        allowedTiles: [TerrainType.Sand, TerrainType.Gravel, TerrainType.Dirt, TerrainType.Grass],
        graphicVariation: !0
    }, e.defines[DoodadType.WildOnion] = {
        resource: [{
            item: ItemType.WildOnion
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        spreadMax: 2,
        garden: !0,
        trample: !0,
        growth: DoodadType.GrowingPlant,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.TorchStand] = {
        lit: DoodadType.LitTorchStand,
        canPickupWithoutTool: !0,
        repairable: !0
    }, e.defines[DoodadType.LitTorchStand] = {
        decayMax: 8,
        fire: !0,
        revert: DoodadType.TorchStand,
        animated: !0,
        canPickupWithoutTool: !0,
        repairable: !0
    }, e.defines[DoodadType.Cotton] = {
        spreadMax: 3,
        resource: [{
            item: ItemType.CottonSeeds
        }, {
            item: ItemType.Cotton
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        garden: !0,
        trample: !0,
        growth: DoodadType.GrowingPlant,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.SetDeadfall] = {
        skillUse: SkillType.Trapping,
        resource: [{
            item: ItemType.Deadfall
        }],
        trap: !0,
        flammable: !0,
        canPickupWithoutTool: !0,
        repairable: !0
    }, e.defines[DoodadType.SetSnare] = {
        skillUse: SkillType.Trapping,
        resource: [{
            item: ItemType.Snare
        }],
        trap: !0,
        flammable: !0,
        onBurn: ItemType.Charcoal,
        canPickupWithoutTool: !0,
        repairable: !0
    }, e.defines[DoodadType.SetHobgoblinSnare] = {
        resource: [{
            item: ItemType.Snare
        }],
        trap: !0,
        flammable: !0,
        onBurn: ItemType.Charcoal,
        repairable: !0
    }, e.defines[DoodadType.SolarStill] = {
        resource: [{
            item: ItemType.SolarStill
        }],
        decayMax: -1,
        waterSource: !0,
        canPickupWithoutTool: !0
    }, e.defines[DoodadType.StoneWaterStill] = {
        resource: [{
            item: ItemType.StoneWaterStill
        }],
        decayMax: -1,
        lit: DoodadType.LitStoneWaterStill,
        waterSource: !0,
        blockMove: !0,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [130, 128, 128]
    }, e.defines[DoodadType.LitStoneWaterStill] = {
        decayMax: 8,
        blockDig: !0,
        fire: !0,
        revert: DoodadType.StoneWaterStill,
        animated: !0,
        blockMove: !0,
        repairable: !0,
        stokable: !1,
        particles: [130, 128, 128]
    }, e.defines[DoodadType.MonsterIdol] = {
        resource: [{
            item: ItemType.MonsterIdol
        }],
        blockMove: !0,
        flammable: !0,
        onBurn: ItemType.Giblets,
        canPickupWithoutTool: !0,
        particles: [228, 132, 132]
    }, e.defines[DoodadType.WoodenDoor] = {
        resource: [{
            item: ItemType.WoodenDoor
        }],
        blockMove: !0,
        flammable: !0,
        onBurn: ItemType.Charcoal,
        blockJump: !0,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [108, 71, 25]
    }, e.defines[DoodadType.WoodenFence] = {
        resource: [{
            item: ItemType.WoodenFence
        }],
        blockMove: !0,
        flammable: !0,
        onBurn: ItemType.Charcoal,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [108, 71, 25]
    }, e.defines[DoodadType.WoodenWall] = {
        resource: [{
            item: ItemType.WoodenWall
        }],
        blockMove: !0,
        blockJump: !0,
        flammable: !0,
        onBurn: ItemType.Charcoal,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [108, 71, 25]
    }, e.defines[DoodadType.StoneWall] = {
        resource: [{
            item: ItemType.StoneWall
        }],
        blockMove: !0,
        blockJump: !0,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [130, 128, 128]
    }, e.defines[DoodadType.SandstoneWall] = {
        resource: [{
            item: ItemType.SandstoneWall
        }],
        blockMove: !0,
        blockJump: !0,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [173, 122, 78]
    }, e.defines[DoodadType.ClayBrickWall] = {
        resource: [{
            item: ItemType.ClayBrickWall
        }],
        blockMove: !0,
        blockJump: !0,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [171, 176, 179]
    }, e.defines[DoodadType.Acid] = {
        blockDig: !0,
        decayMax: 20,
        damage: 14,
        animated: !0,
        causesStatus: [StatusType.Burned]
    }, e.defines[DoodadType.GrowingMushroom] = {
        caveGrow: !0,
        decayMax: 100,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        skillUse: SkillType.Mycology,
        growing: !0,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.GrowingPlant] = {
        decayMax: 125,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        skillUse: SkillType.Botany,
        growing: !0,
        flammable: !0,
        graphicVariation: !0
    }, e.defines[DoodadType.CaveEntrance] = {}, e.defines[DoodadType.SetExplosiveTrap] = {
        skillUse: SkillType.Trapping,
        resource: [{
            item: ItemType.ExplosiveTrap
        }],
        trap: !0,
        canPickupWithoutTool: !0
    }, e.defines[DoodadType.WoodenDoorOpen] = {
        resource: [{
            item: ItemType.WoodenDoor
        }],
        flammable: !0,
        onBurn: ItemType.Charcoal,
        canPickupWithoutTool: !0,
        repairable: !0
    }, e.defines[DoodadType.Tree] = {
        tall: !0
    }, e.defines[DoodadType.BareTree] = {
        tall: !0
    }, e.defines[DoodadType.TreeWithBerries] = {
        tall: !0
    }, e.defines[DoodadType.TreeWithFungus] = {
        tall: !0
    }, e.defines[DoodadType.TreeWithVines] = {
        tall: !0
    }, e.defines[DoodadType.PalmTree] = {
        tall: !0
    }, e.defines[DoodadType.BarePalmTree] = {
        tall: !0
    }, e.defines[DoodadType.PalmTreeWithCoconuts] = {
        tall: !0
    }, e.defines[DoodadType.WoodenGate] = {
        resource: [{
            item: ItemType.WoodenGate
        }],
        blockMove: !0,
        flammable: !0,
        onBurn: ItemType.Charcoal,
        canPickupWithoutTool: !0,
        repairable: !0,
        particles: [108, 71, 25]
    }, e.defines[DoodadType.WoodenGateOpen] = {
        resource: [{
            item: ItemType.WoodenGate
        }],
        flammable: !0,
        onBurn: ItemType.Charcoal,
        canPickupWithoutTool: !0,
        repairable: !0
    }, e.defines[DoodadType.PoisonIvy] = {
        spreadMax: 3,
        resource: [{
            item: ItemType.PoisonIvySeeds
        }, {
            item: ItemType.PoisonIvyLeaves
        }],
        skillUse: SkillType.Botany,
        allowedTiles: [TerrainType.Grass, TerrainType.Dirt],
        garden: !0,
        trample: !0,
        growth: DoodadType.GrowingPlant,
        flammable: !0,
        graphicVariation: !0,
        causesStatus: [StatusType.Poisoned]
    }, e.defines[DoodadType.WroughtIronChest] = {
        resource: [{
            item: ItemType.WroughtIronChest
        }],
        weightCapacity: 100,
        canPickupWithoutTool: !0,
        blockMove: !0,
        repairable: !0,
        particles: [88, 95, 114]
    }, e.defines[DoodadType.IronChest] = {
        resource: [{
            item: ItemType.IronChest
        }],
        weightCapacity: 125,
        canPickupWithoutTool: !0,
        blockMove: !0,
        repairable: !0,
        particles: [220, 223, 231]
    }, e.defines[DoodadType.OrnateWoodenChest] = {
        resource: [{
            item: ItemType.OrnateWoodenChest
        }],
        weightCapacity: 100,
        canPickupWithoutTool: !0,
        blockMove: !0,
        repairable: !0,
        flammable: !0,
        particles: [108, 71, 25]
    }
}(Doodad || (Doodad = {}));
var Item;
! function(e) {
    function t(e, t, i, a, n) {
        return void 0 === a && (a = 0), void 0 === n && (n = !1), {
            type: e,
            requiredAmount: t,
            consumedAmount: i,
            disassembleAmount: a,
            ignoreWeight: n
        }
    }

    function i() {
        Utilities.Console.log(Source.Item, "generatingItemLookups");
        for (var t = ItemTypeGroup.Invalid + 1; t < ItemTypeGroup.Last; t++) e.groups[t].types.length = 0;
        for (var i = 1; i < e.defines.length; i++) {
            var a = e.defines[i];
            if (a) {
                if (a.group)
                    for (var n = 0; n < a.group.length; n++) e.groups[a.group[n]].types.push(i);
                a.recipes = [];
                for (var n = 1; n < e.defines.length; n++)
                    if (e.defines[n]) {
                        var o = e.defines[n].recipe;
                        if (o) {
                            if (o.baseComponent === i) {
                                a.recipes.push(n);
                                continue
                            }
                            for (var r = 0; r < o.components.length; r++) {
                                var s = o.components[r].type;
                                if (e.isItemTypeGroup(s) && e.isItemTypeInGroup(i, s) || i === s) {
                                    a.recipes.push(n);
                                    break
                                }
                            }
                        }
                    }
            }
        }
    }
    e.lootGroup = Array(), e.groups = Array(), e.actionDescriptions = Array(), e.defines = Array(), e.RecipeComponent = t, e.defines[ItemType.Amber] = {
            weight: .5,
            onBurn: ItemType.MeltedAmber
        }, e.defines[ItemType.AnimalSkull] = {
            weight: 1.5,
            onBurn: ItemType.None
        }, e.defines[ItemType.Arrow] = {
            group: [ItemTypeGroup.Arrow],
            recipe: {
                components: [t(ItemType.WoodenPole, 1, 1, 1), t(ItemType.Feather, 1, 1, 1), t(ItemType.StoneArrowhead, 1, 1, 1), t(ItemType.String, 1, 1, 1)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Advanced,
                malignity: 50
            },
            disassemble: !0,
            attack: 2,
            damageType: DamageType.Piercing,
            durability: 15,
            onBurn: ItemType.StoneArrowhead
        }, e.defines[ItemType.StoneArrowhead] = {
            reducedWeight: 2,
            group: [ItemTypeGroup.Sharpened],
            use: [ActionType.Carve],
            recipe: {
                components: [t(ItemTypeGroup.SharpenedRock, 2, 1)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Intermediate,
                malignity: 25
            }
        }, e.defines[ItemType.PileOfAsh] = {
            reducedWeight: .1,
            group: [ItemTypeGroup.Powder],
            recipe: {
                components: [t(ItemType.MortarAndPestle, 1, 0), t(ItemType.Charcoal, 1, 1)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.BarkLeggings] = {
            group: [ItemTypeGroup.Equipment],
            durability: 20,
            equip: EquipType.Legs,
            defense: new Defense(1, new Resistances(DamageType.Blunt, 1), new Vulnerabilities(DamageType.Fire, 2, DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TreeBark, 4, 4, 4), t(ItemType.String, 2, 2, 2)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Intermediate,
                malignity: 75
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.BarkShield] = {
            group: [ItemTypeGroup.Equipment],
            durability: 20,
            equip: EquipType.Held,
            defense: new Defense(1, new Resistances(DamageType.Blunt, 1), new Vulnerabilities(DamageType.Fire, 2, DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TreeBark, 4, 4, 4), t(ItemType.String, 2, 2, 2)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Intermediate,
                malignity: 75
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.BarkTunic] = {
            group: [ItemTypeGroup.Equipment],
            durability: 20,
            equip: EquipType.Chest,
            defense: new Defense(2, new Resistances(DamageType.Blunt, 1), new Vulnerabilities(DamageType.Fire, 2, DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TreeBark, 6, 6, 6), t(ItemType.String, 2, 2, 2)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Intermediate,
                malignity: 75
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.Bone] = {
            weight: .5,
            group: [ItemTypeGroup.Bone, ItemTypeGroup.Weapon],
            durability: 15,
            equip: EquipType.Held,
            attack: 2,
            damageType: DamageType.Blunt,
            use: [ActionType.Gather],
            onBurn: ItemType.None
        }, e.defines[ItemType.Branch] = {
            weight: .6,
            use: [ActionType.StokeFire, ActionType.Gather],
            onUse: [],
            group: [ItemTypeGroup.Skewer, ItemTypeGroup.Weapon],
            equip: EquipType.Held,
            attack: 1,
            damageType: DamageType.Blunt,
            onBurn: ItemType.Charcoal,
            dismantle: {
                items: [ItemType.StrippedBark, ItemType.WoodenPole, ItemType.Leaves, ItemType.Twigs],
                required: ItemTypeGroup.Sharpened
            }
        }, e.defines[ItemType.Branch].onUse[ActionType.StokeFire] = 4, e.defines[ItemType.CactusSpines] = {
            weight: .2,
            onBurn: ItemType.None
        }, e.defines[ItemType.Charcoal] = {
            weight: .3,
            group: [ItemTypeGroup.Carbon, ItemTypeGroup.Fuel, ItemTypeGroup.Medicinal],
            use: [ActionType.StokeFire],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.Charcoal].onUse[ActionType.StokeFire] = 10, e.defines[ItemType.CobblestoneFlooring] = {
            group: [ItemTypeGroup.Housing],
            use: [ActionType.SetDown],
            onUse: [],
            recipe: {
                components: [t(ItemType.Stones, 5, 5, 5)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            durability: 15
        }, e.defines[ItemType.CobblestoneFlooring].onUse[ActionType.SetDown] = TerrainType.CobblestoneFlooring, e.defines[ItemType.CookedMeat] = {
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 4750,
            decaysInto: ItemType.RottenMeat,
            recipe: {
                components: [t(ItemType.RawMeat, 1, 1), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Intermediate,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Meat, ItemTypeGroup.Food, ItemTypeGroup.CookedMeat],
            onBurn: ItemType.None
        }, e.defines[ItemType.CookedMeat].onUse[ActionType.Eat] = [2, 5, 8, -2], e.defines[ItemType.Earthworm] = {
            weight: .1,
            use: [ActionType.Eat],
            onUse: [],
            group: [ItemTypeGroup.Insect],
            decayMax: 2750,
            onBurn: ItemType.None
        }, e.defines[ItemType.Earthworm].onUse[ActionType.Eat] = [0, 2, 1, 0], e.defines[ItemType.Feather] = {
            weight: .1,
            onBurn: ItemType.None
        }, e.defines[ItemType.FertileSoil] = {
            group: [ItemTypeGroup.Gardening],
            use: [ActionType.Garden],
            onUse: [],
            recipe: {
                components: [t(ItemType.PileOfAsh, 1, 1), t(ItemType.Soil, 1, 1), t(ItemType.Peat, 1, 1)],
                skill: SkillType.Botany,
                level: RecipeLevel.Intermediate,
                malignity: -100
            },
            onBurn: ItemType.Soil
        }, e.defines[ItemType.FertileSoil].onUse[ActionType.Garden] = 4, e.defines[ItemType.WaterskinOfSeawater] = {
            inheritWeight: ItemType.Waterskin,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            durability: 20,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ContainerOfSeawater],
            returnOnUse: [ItemType.Waterskin, !1],
            onBurn: ItemType.None,
            repairable: !1
        }, e.defines[ItemType.WaterskinOfSeawater].onUse[ActionType.Drink] = [0, -15, 1, -2], e.defines[ItemType.FirePlough] = {
            group: [ItemTypeGroup.Firemaking],
            durability: 30,
            use: [ActionType.StartFire],
            recipe: {
                components: [t(ItemType.WoodenPole, 1, 1, 1), t(ItemType.Log, 1, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Camping,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Sharpened],
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.FlowerSeeds] = {
            weight: .1,
            use: [ActionType.Plant, ActionType.Eat],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.FlowerSeeds].onUse[ActionType.Plant] = DoodadType.YellowFlowers, e.defines[ItemType.FlowerSeeds].onUse[ActionType.Eat] = [1, 1, 1, -1], e.defines[ItemType.Fossil] = {
            group: [ItemTypeGroup.Carbon],
            weight: .8
        }, e.defines[ItemType.GoldCoins] = {
            weight: 2,
            group: [ItemTypeGroup.Treasure],
            onBurn: ItemType.None
        }, e.defines[ItemType.GoldenChalice] = {
            weight: 3,
            group: [ItemTypeGroup.Treasure],
            onBurn: ItemType.None
        }, e.defines[ItemType.GoldenRing] = {
            weight: .3,
            group: [ItemTypeGroup.Treasure],
            onBurn: ItemType.None
        }, e.defines[ItemType.GoldenSword] = {
            weight: 5,
            durability: 15,
            equip: EquipType.Held,
            attack: 8,
            damageType: DamageType.Piercing | DamageType.Slashing,
            use: [ActionType.Carve, ActionType.Gather],
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.Treasure],
            onBurn: ItemType.None,
            repairable: !1
        }, e.defines[ItemType.GrassSeeds] = {
            weight: .1,
            use: [ActionType.Plant, ActionType.Eat],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.GrassSeeds].onUse[ActionType.Plant] = DoodadType.GrowingGrass, e.defines[ItemType.GrassSeeds].onUse[ActionType.Eat] = [1, 1, 1, -1], e.defines[ItemType.IronOre] = {
            weight: 3
        }, e.defines[ItemType.Kindling] = {
            group: [ItemTypeGroup.Firemaking],
            use: [ActionType.StokeFire],
            onUse: [],
            recipe: {
                components: [t(ItemType.Twigs, 1, 1), t(ItemType.TreeBark, 1, 1)],
                skill: SkillType.Camping,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.Kindling].onUse[ActionType.StokeFire] = 4, e.defines[ItemType.LargeRock] = {
            weight: 3,
            group: [ItemTypeGroup.Rock],
            dismantle: {
                items: [ItemType.Stones, ItemType.Stones],
                required: ItemTypeGroup.Hammer
            }
        }, e.defines[ItemType.LeafBedroll] = {
            group: [ItemTypeGroup.Bedding],
            durability: 25,
            use: [ActionType.Rest, ActionType.Sleep],
            recipe: {
                components: [t(ItemType.Leaves, 10, 10, 10), t(ItemTypeGroup.Cordage, 2, 2, 2)],
                skill: SkillType.Camping,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.LeatherHide] = {
            weight: 1.5,
            onBurn: ItemType.None
        }, e.defines[ItemType.Leaves] = {
            group: [ItemTypeGroup.Compost],
            use: [ActionType.StokeFire],
            onUse: [],
            weight: .1,
            onBurn: ItemType.None
        }, e.defines[ItemType.Leaves].onUse[ActionType.StokeFire] = 2, e.defines[ItemType.Limestone] = {
            weight: 3
        }, e.defines[ItemType.Log] = {
            weight: 5,
            use: [ActionType.StokeFire],
            onUse: [],
            group: [ItemTypeGroup.Fuel],
            onBurn: ItemType.Charcoal,
            dismantle: {
                items: [ItemType.TreeBark, ItemType.WoodenPole, ItemType.WoodenPole, ItemType.WoodenPole, ItemType.WoodenPole, ItemType.WoodenPole],
                required: ItemTypeGroup.Sharpened
            }
        }, e.defines[ItemType.Log].onUse[ActionType.StokeFire] = 15, e.defines[ItemType.MortarAndPestle] = {
            reducedWeight: 2,
            group: [ItemTypeGroup.Tool],
            recipe: {
                components: [t(ItemType.SmoothRock, 2, 2)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            durability: 10
        }, e.defines[ItemType.WhiteMushrooms] = {
            weight: .3,
            use: [ActionType.Eat, ActionType.Plant],
            skillUse: SkillType.Mycology,
            onUse: [],
            decayMax: 19e3,
            group: [ItemTypeGroup.Food],
            doodadType: DoodadType.WhiteMushrooms,
            onBurn: ItemType.None
        }, e.defines[ItemType.WhiteMushrooms].onUse[ActionType.Eat] = [3, 2, 2, -1], e.defines[ItemType.WhiteMushrooms].onUse[ActionType.Plant] = DoodadType.WhiteMushrooms, e.defines[ItemType.Nopal] = {
            weight: .3,
            use: [ActionType.Eat],
            skillUse: SkillType.Botany,
            onUse: [],
            decayMax: 8750,
            decaysInto: ItemType.RottingVegetation,
            group: [ItemTypeGroup.Food],
            returnOnUse: [ItemType.CactiSeeds, !0],
            onBurn: ItemType.None
        }, e.defines[ItemType.Nopal].onUse[ActionType.Eat] = [0, 3, 3, 1], e.defines[ItemType.Peat] = {
            weight: .5,
            group: [ItemTypeGroup.Fuel, ItemTypeGroup.Compost],
            use: [ActionType.StokeFire],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.Peat].onUse[ActionType.StokeFire] = 12, e.defines[ItemType.Sandstone] = {
            weight: 2
        }, e.defines[ItemType.PileOfGravel] = {
            weight: 3,
            use: [ActionType.SetDown],
            onUse: []
        }, e.defines[ItemType.PileOfGravel].onUse[ActionType.SetDown] = TerrainType.Gravel, e.defines[ItemType.PileOfSand] = {
            weight: 3,
            use: [ActionType.SetDown],
            onUse: []
        }, e.defines[ItemType.PileOfSand].onUse[ActionType.SetDown] = TerrainType.Sand, e.defines[ItemType.WoodenArrow] = {
            group: [ItemTypeGroup.Arrow],
            recipe: {
                components: [t(ItemType.WoodenPole, 1, 1, 1), t(ItemType.Feather, 1, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Sharpened],
            attack: 1,
            damageType: DamageType.Piercing,
            durability: 10,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.StoneAxe] = {
            durability: 50,
            equip: EquipType.Held,
            attack: 3,
            damageType: DamageType.Slashing | DamageType.Blunt,
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.Weapon, ItemTypeGroup.Tool],
            use: [ActionType.Carve, ActionType.Gather],
            recipe: {
                components: [t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.SharpenedRock, 2, 2, 2)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: 75
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.Bandage] = {
            group: [ItemTypeGroup.Health],
            use: [ActionType.Heal],
            skillUse: SkillType.Anatomy,
            onUse: [],
            recipe: {
                components: [t(ItemTypeGroup.Fabric, 1, 1, 1)],
                skill: SkillType.Tailoring,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.Bandage].onUse[ActionType.Heal] = [12, 0, 0, 0], e.defines[ItemType.WovenFabric] = {
            group: [ItemTypeGroup.Fabric],
            recipe: {
                components: [t(ItemType.String, 5, 5, 5), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Tailoring,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.CactusNeedle] = {
            group: [ItemTypeGroup.Needle],
            recipe: {
                components: [t(ItemType.CactusSpines, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.StoneShovel] = {
            group: [ItemTypeGroup.Tool, ItemTypeGroup.Weapon],
            durability: 50,
            equip: EquipType.Held,
            attack: 2,
            damageType: DamageType.Slashing,
            use: [ActionType.Dig, ActionType.Gather, ActionType.GatherTreasure],
            recipe: {
                components: [t(ItemType.String, 2, 2, 2), t(ItemTypeGroup.SharpenedRock, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.WoodenSpear] = {
            durability: 10,
            equip: EquipType.Held,
            attack: 2,
            damageType: DamageType.Piercing,
            group: [ItemTypeGroup.Skewer, ItemTypeGroup.Weapon],
            recipe: {
                components: [t(ItemType.WoodenPole, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: 50
            },
            use: [ActionType.Gather],
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.Suture] = {
            group: [ItemTypeGroup.Health],
            use: [ActionType.Heal],
            skillUse: SkillType.Anatomy,
            onUse: [],
            recipe: {
                components: [t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Needle, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.Suture].onUse[ActionType.Heal] = [8, 0, 0, 0], e.defines[ItemType.Raft] = {
            group: [ItemTypeGroup.Travel],
            durability: 500,
            use: [ActionType.Paddle],
            recipe: {
                components: [t(ItemType.Rope, 2, 2, 2), t(ItemType.Log, 3, 3, 3), t(ItemType.BoatPaddle, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal,
            damageModifier: 25
        }, e.defines[ItemType.RawMeat] = {
            weight: .8,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 2750,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.CookedMeat,
            group: [ItemTypeGroup.Meat, ItemTypeGroup.RawMeat]
        }, e.defines[ItemType.RawMeat].onUse[ActionType.Eat] = [-2, 2, 7, -2], e.defines[ItemType.RedBerries] = {
            weight: .2,
            use: [ActionType.Eat],
            skillUse: SkillType.Botany,
            onUse: [],
            decayMax: 14e3,
            decaysInto: ItemType.RottingVegetation,
            group: [ItemTypeGroup.Food],
            returnOnUse: [ItemType.BerrySeeds, !0],
            onBurn: ItemType.None
        }, e.defines[ItemType.RedBerries].onUse[ActionType.Eat] = [1, 1, 2, 0], e.defines[ItemType.SpottedRedMushroom] = {
            weight: .3,
            use: [ActionType.Eat, ActionType.Plant],
            skillUse: SkillType.Mycology,
            onUse: [],
            decayMax: 19e3,
            group: [ItemTypeGroup.Food],
            doodadType: DoodadType.SpottedRedMushroom,
            onBurn: ItemType.None
        }, e.defines[ItemType.SpottedRedMushroom].onUse[ActionType.Eat] = [-5, 8, 2, -1], e.defines[ItemType.SpottedRedMushroom].onUse[ActionType.Plant] = DoodadType.SpottedRedMushroom, e.defines[ItemType.Rope] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.String, 4, 4, 4)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.Sapling] = {
            weight: 1.6,
            use: [ActionType.Plant, ActionType.StokeFire],
            onUse: [],
            onBurn: ItemType.Charcoal,
            dismantle: {
                items: [ItemType.Branch, ItemType.Branch, ItemType.Leaves, ItemType.PlantRoots]
            }
        }, e.defines[ItemType.Sapling].onUse[ActionType.StokeFire] = 6, e.defines[ItemType.Sapling].onUse[ActionType.Plant] = DoodadType.Sapling, e.defines[ItemType.Seaweed] = {
            weight: .2,
            use: [ActionType.Eat],
            skillUse: SkillType.Botany,
            onUse: [],
            decayMax: 19e3,
            decaysInto: ItemType.RottingVegetation,
            group: [ItemTypeGroup.Cordage, ItemTypeGroup.Food],
            onBurn: ItemType.None
        }, e.defines[ItemType.Seaweed].onUse[ActionType.Eat] = [0, 1, 1, -1], e.defines[ItemType.SharpGlass] = {
            reducedWeight: 2.3,
            use: [ActionType.Carve],
            group: [ItemTypeGroup.Sharpened],
            durability: 15,
            recipe: {
                components: [t(ItemType.PileOfSand, 1, 1)],
                skill: SkillType.Glassblowing,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: 25
            }
        }, e.defines[ItemType.SharpRock] = {
            reducedWeight: 1,
            durability: 10,
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.SharpenedRock],
            use: [ActionType.Carve],
            recipe: {
                components: [t(ItemType.LargeRock, 2, 1)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Simple,
                malignity: 25
            }
        }, e.defines[ItemType.Skullcap] = {
            group: [ItemTypeGroup.Equipment],
            durability: 15,
            equip: EquipType.Head,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1), new Vulnerabilities),
            recipe: {
                components: [t(ItemType.AnimalSkull, 1, 1), t(ItemTypeGroup.Rock, 1, 0)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Simple,
                malignity: 75
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.SmoothRock] = {
            group: [ItemTypeGroup.Rock],
            recipe: {
                components: [t(ItemType.LargeRock, 1, 1), t(ItemTypeGroup.SharpenedRock, 1, 1, 0, !0)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Simple,
                malignity: 25
            }
        }, e.defines[ItemType.Soil] = {
            weight: 3,
            use: [ActionType.SetDown],
            onUse: []
        }, e.defines[ItemType.Soil].onUse[ActionType.SetDown] = TerrainType.Dirt, e.defines[ItemType.StoneSpear] = {
            durability: 25,
            equip: EquipType.Held,
            attack: 3,
            damageType: DamageType.Piercing,
            group: [ItemTypeGroup.Skewer, ItemTypeGroup.Weapon],
            recipe: {
                components: [t(ItemType.WoodenPole, 1, 1, 1), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.SharpenedRock, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: 100
            },
            disassemble: !0,
            use: [ActionType.Gather],
            onBurn: ItemType.None
        }, e.defines[ItemType.Stones] = {
            weight: 1,
            group: [ItemTypeGroup.Other]
        }, e.defines[ItemType.StoneWall] = {
            group: [ItemTypeGroup.Housing],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemTypeGroup.Rock, 8, 8, 8)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            disassemble: !0,
            durability: 15
        }, e.defines[ItemType.StoneWall].onUse[ActionType.Build] = DoodadType.StoneWall, e.defines[ItemType.String] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemTypeGroup.Cordage, 2, 2, 2)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.StrippedBark] = {
            weight: .1,
            group: [ItemTypeGroup.Cordage],
            use: [ActionType.StokeFire],
            onUse: [],
            onBurn: ItemType.None,
            recipe: {
                components: [t(ItemType.TreeBark, 1, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Simple,
                malignity: -25
            }
        }, e.defines[ItemType.StrippedBark].onUse[ActionType.StokeFire] = 3, e.defines[ItemType.TannedLeather] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.Tannin, 1, 1, 0, !0), t(ItemType.LeatherHide, 1, 1)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.Tannin] = {
            reducedWeight: .1,
            group: [ItemTypeGroup.Powder],
            recipe: {
                components: [t(ItemType.MortarAndPestle, 1, 0), t(ItemType.TreeBark, 1, 1)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.ThistleSeeds] = {
            weight: .1,
            use: [ActionType.Eat, ActionType.Plant],
            skillUse: SkillType.Botany,
            onUse: [],
            group: [ItemTypeGroup.Food],
            onBurn: ItemType.None
        }, e.defines[ItemType.ThistleSeeds].onUse[ActionType.Plant] = DoodadType.Thistles, e.defines[ItemType.ThistleSeeds].onUse[ActionType.Eat] = [2, 0, 1, 0], e.defines[ItemType.TreeBark] = {
            weight: .2,
            use: [ActionType.StokeFire],
            onUse: [],
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.TreeBark].onUse[ActionType.StokeFire] = 4, e.defines[ItemType.TreeFungus] = {
            weight: .3,
            use: [ActionType.Eat],
            skillUse: SkillType.Mycology,
            onUse: [],
            decayMax: 19e3,
            group: [ItemTypeGroup.Food],
            onBurn: ItemType.None
        }, e.defines[ItemType.TreeFungus].onUse[ActionType.Eat] = [0, 7, 3, -1], e.defines[ItemType.Vine] = {
            weight: .7,
            group: [ItemTypeGroup.Cordage],
            onBurn: ItemType.None
        }, e.defines[ItemType.Twigs] = {
            weight: .1,
            group: [ItemTypeGroup.Other],
            use: [ActionType.StokeFire],
            onUse: [],
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.Twigs].onUse[ActionType.StokeFire] = 4, e.defines[ItemType.Waterskin] = {
            use: [ActionType.GatherWater],
            recipe: {
                components: [t(ItemType.TannedLeather, 1, 1, 1), t(ItemType.String, 2, 2, 2), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            durability: 20,
            group: [ItemTypeGroup.Container],
            onBurn: ItemType.None
        }, e.defines[ItemType.WoodenPole] = {
            weight: .5,
            group: [ItemTypeGroup.Pole, ItemTypeGroup.Skewer, ItemTypeGroup.Weapon],
            durability: 10,
            equip: EquipType.Held,
            attack: 2,
            damageType: DamageType.Blunt,
            use: [ActionType.Ignite, ActionType.Gather],
            lit: ItemType.LitPoleTorch,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.PeatBandage] = {
            group: [ItemTypeGroup.Health],
            use: [ActionType.Heal],
            skillUse: SkillType.Anatomy,
            onUse: [],
            recipe: {
                components: [t(ItemType.Bandage, 1, 1, 1), t(ItemType.Peat, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.PeatBandage].onUse[ActionType.Heal] = [15, 0, 0, 0], e.defines[ItemType.Bow] = {
            group: [ItemTypeGroup.Weapon],
            durability: 15,
            use: [ActionType.Shoot],
            equip: EquipType.Held,
            twoHanded: !0,
            attack: 1,
            damageType: DamageType.Blunt,
            ranged: {
                range: 4,
                attack: 1
            },
            recipe: {
                components: [t(ItemType.WoodenPole, 1, 1, 1), t(ItemType.String, 1, 1, 1)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Intermediate,
                malignity: 75
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.BowDrill] = {
            group: [ItemTypeGroup.Firemaking],
            durability: 45,
            use: [ActionType.StartFire],
            recipe: {
                components: [t(ItemType.Bow, 1, 1, 1), t(ItemType.HandDrill, 1, 1, 1)],
                skill: SkillType.Camping,
                level: RecipeLevel.Intermediate,
                malignity: 50
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.FishingNet] = {
            group: [ItemTypeGroup.Tool],
            durability: 50,
            ranged: {
                range: 2,
                attack: 0
            },
            use: [ActionType.Cast, ActionType.GatherTreasure],
            recipe: {
                components: [t(ItemType.String, 6, 6, 6), t(ItemType.Stones, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.RawCod] = {
            weight: .8,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 2750,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.CookedCod,
            group: [ItemTypeGroup.Meat, ItemTypeGroup.RawMeat]
        }, e.defines[ItemType.RawCod].onUse[ActionType.Eat] = [1, 1, 5, -1], e.defines[ItemType.CookedCod] = {
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 4750,
            decaysInto: ItemType.RottenMeat,
            recipe: {
                components: [t(ItemType.RawCod, 1, 1), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Meat, ItemTypeGroup.Food, ItemTypeGroup.CookedMeat],
            onBurn: ItemType.None
        }, e.defines[ItemType.CookedCod].onUse[ActionType.Eat] = [2, 4, 6, -1], e.defines[ItemType.Campfire] = {
            group: [ItemTypeGroup.Firemaking, ItemTypeGroup.Heating],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemTypeGroup.Rock, 5, 5, 5)],
                skill: SkillType.Camping,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            disassemble: !0,
            durability: 10
        }, e.defines[ItemType.Campfire].onUse[ActionType.Build] = DoodadType.Campfire, e.defines[ItemType.VineWhip] = {
            group: [ItemTypeGroup.Weapon],
            durability: 10,
            equip: EquipType.Held,
            attack: 2,
            damageType: DamageType.Slashing,
            recipe: {
                components: [t(ItemType.Vine, 2, 2)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Simple,
                malignity: 50
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.PileOfSnow] = {
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            group: [ItemTypeGroup.Water],
            weight: .3,
            decayMax: 750,
            onBurn: ItemType.None
        }, e.defines[ItemType.PileOfSnow].onUse[ActionType.Drink] = [-4, 8, 1, 8], e.defines[ItemType.BarkTorch] = {
            durability: 15,
            attack: 1,
            damageType: DamageType.Blunt,
            equip: EquipType.Held,
            use: [ActionType.Ignite, ActionType.Build],
            onUse: [],
            isTorch: !0,
            group: [ItemTypeGroup.LightSource, ItemTypeGroup.Weapon],
            lit: ItemType.LitBarkTorch,
            recipe: {
                components: [t(ItemType.StrippedBark, 5, 5), t(ItemTypeGroup.Pole, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.BarkTorch].onUse[ActionType.Build] = DoodadType.TorchStand, e.defines[ItemType.LitBarkTorch] = {
            inheritWeight: ItemType.BarkTorch,
            durability: 15,
            equip: EquipType.Held,
            onEquipEffect: [OnEquipType.LightSource, 2],
            attack: 3,
            damageType: DamageType.Fire | DamageType.Blunt,
            use: [ActionType.StartFire, ActionType.Extinguish, ActionType.Build],
            onUse: [],
            isTorch: !0,
            revert: ItemType.BarkTorch,
            decayMax: 1e3,
            decaysInto: ItemType.PileOfAsh,
            onBurn: ItemType.Charcoal,
            repairable: !1
        }, e.defines[ItemType.LitBarkTorch].onUse[ActionType.Build] = DoodadType.LitTorchStand, e.defines[ItemType.HandDrill] = {
            group: [ItemTypeGroup.Firemaking],
            durability: 15,
            use: [ActionType.StartFire],
            recipe: {
                components: [t(ItemType.WoodenPole, 2, 2, 1)],
                skill: SkillType.Camping,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.SmallBag] = {
            durability: 10,
            group: [ItemTypeGroup.Equipment, ItemTypeGroup.Storage],
            weightCapacity: 25,
            use: [ActionType.OpenContainer],
            equip: EquipType.Belt,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 1, 1, 1), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.Shale] = {
            weight: .8,
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.SharpenedRock],
            use: [ActionType.Carve]
        }, e.defines[ItemType.SharpenedBone] = {
            reducedWeight: .1,
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.Skewer, ItemTypeGroup.Weapon],
            use: [ActionType.Carve, ActionType.Gather],
            equip: EquipType.Held,
            attack: 3,
            damageType: DamageType.Piercing,
            recipe: {
                components: [t(ItemType.BonePole, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.Grindstone] = {
            use: [ActionType.Repair],
            recipe: {
                components: [t(ItemType.Sandstone, 2, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            group: [ItemTypeGroup.Repair, ItemTypeGroup.Tool]
        }, e.defines[ItemType.RawFishSteak] = {
            weight: .8,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 2750,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.CookedFishSteak,
            group: [ItemTypeGroup.Meat, ItemTypeGroup.RawMeat]
        }, e.defines[ItemType.RawFishSteak].onUse[ActionType.Eat] = [1, 1, 6, -1], e.defines[ItemType.CookedFishSteak] = {
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 4750,
            decaysInto: ItemType.RottenMeat,
            recipe: {
                components: [t(ItemType.RawFishSteak, 1, 1), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Meat, ItemTypeGroup.Food, ItemTypeGroup.CookedMeat],
            onBurn: ItemType.None
        }, e.defines[ItemType.CookedFishSteak].onUse[ActionType.Eat] = [2, 4, 6, -1], e.defines[ItemType.WaterskinOfDesalinatedWater] = {
            inheritWeight: ItemType.Waterskin,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            recipe: {
                baseComponent: ItemType.WaterskinOfSeawater,
                components: [t(ItemType.Flask, 1, 0)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            durability: 20,
            group: [ItemTypeGroup.Water, ItemTypeGroup.WaterskinOfPotableWater, ItemTypeGroup.ContainerOfDesalinatedWater],
            returnOnUse: [ItemType.Waterskin, !1],
            onBurn: ItemType.None,
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.WaterskinOfDesalinatedWater].onUse[ActionType.Drink] = [2, 15, 1, 10], e.defines[ItemType.BoatPaddle] = {
            group: [ItemTypeGroup.Travel, ItemTypeGroup.Weapon],
            durability: 15,
            equip: EquipType.Held,
            attack: 2,
            damageType: DamageType.Blunt,
            recipe: {
                components: [t(ItemType.TreeBark, 2, 2, 2), t(ItemType.String, 2, 2, 2), t(ItemTypeGroup.Pole, 1, 1, 1)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.BullBoat] = {
            group: [ItemTypeGroup.Travel],
            use: [ActionType.TraverseTheSea],
            recipe: {
                components: [t(ItemType.WoodenPole, 8, 8, 8), t(ItemType.TannedLeather, 1, 1, 1), t(ItemType.Rope, 2, 2, 2), t(ItemType.BoatPaddle, 1, 1, 1)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.RefinedSand] = {
            reducedWeight: 2.3,
            group: [ItemTypeGroup.Powder],
            recipe: {
                components: [t(ItemType.MortarAndPestle, 1, 0), t(ItemType.PileOfSand, 1, 1)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            onBurn: ItemType.SharpGlass
        }, e.defines[ItemType.Spyglass] = {
            reducedWeight: 2.5,
            group: [ItemTypeGroup.Tool],
            attack: 1,
            damageType: DamageType.Blunt,
            equip: EquipType.Held,
            onEquipEffect: [OnEquipType.Telescopy, 20],
            recipe: {
                components: [t(ItemType.Lens, 2, 2, 2), t(ItemType.Log, 1, 1, 1), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            durability: 1e3,
            damageModifier: 25,
            onBurn: ItemType.None
        }, e.defines[ItemType.Flask] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.ClayBlowpipe, 1, 0), t(ItemType.RefinedSand, 2, 2), t(ItemType.LimestonePowder, 1, 1, 0, !0)],
                skill: SkillType.Glassblowing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitFurnace,
                malignity: -25
            },
            durability: 15
        }, e.defines[ItemType.RawClay] = {
            weight: 2.5,
            use: [ActionType.SetDown],
            onUse: [],
            onBurn: ItemType.ClayBrick
        }, e.defines[ItemType.RawClay].onUse[ActionType.SetDown] = TerrainType.Clay, e.defines[ItemType.RawClayBlowpipe] = {
            reducedWeight: .5,
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.RawClay, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 0)],
                skill: SkillType.Claythrowing,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.ClayBlowpipe
        }, e.defines[ItemType.ClayBlowpipe] = {
            reducedWeight: .5,
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.RawClayBlowpipe, 1, 1)],
                skill: SkillType.Claythrowing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitKiln,
                malignity: -25
            },
            durability: 15
        }, e.defines[ItemType.LeatherBelt] = {
            group: [ItemTypeGroup.Equipment],
            durability: 25,
            equip: EquipType.Belt,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 1, 1, 1), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Simple,
                malignity: 100
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.LeatherTunic] = {
            group: [ItemTypeGroup.Equipment],
            durability: 25,
            equip: EquipType.Chest,
            defense: new Defense(3, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 2, 2, 2), t(ItemType.String, 4, 4, 4), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Advanced,
                malignity: 100
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.LeatherBoots] = {
            group: [ItemTypeGroup.Equipment],
            durability: 25,
            equip: EquipType.Feet,
            defense: new Defense(2, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 2, 2, 2), t(ItemType.String, 2, 2, 2), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Advanced,
                malignity: 100
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.LeatherCap] = {
            group: [ItemTypeGroup.Equipment],
            durability: 25,
            equip: EquipType.Head,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 1, 1, 1), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Intermediate,
                malignity: 100
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.LeatherGorget] = {
            group: [ItemTypeGroup.Equipment],
            durability: 25,
            equip: EquipType.Neck,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 1, 1, 1), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Simple,
                malignity: 100
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.LeatherPants] = {
            group: [ItemTypeGroup.Equipment],
            durability: 25,
            equip: EquipType.Legs,
            defense: new Defense(2, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 2, 2, 2), t(ItemType.String, 4, 4, 4), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Advanced,
                malignity: 100
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.LeatherGloves] = {
            group: [ItemTypeGroup.Equipment],
            durability: 25,
            equip: EquipType.Hands,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 2, 2, 2), t(ItemType.String, 3, 3, 3), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Expert,
                malignity: 100
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.Furnace] = {
            group: [ItemTypeGroup.Heating],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemTypeGroup.Rock, 8, 8, 8)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Advanced,
                malignity: 25
            },
            disassemble: !0,
            durability: 15
        }, e.defines[ItemType.Furnace].onUse[ActionType.Build] = DoodadType.Furnace, e.defines[ItemType.Kiln] = {
            group: [ItemTypeGroup.Heating],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.Sandstone, 8, 8, 8)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Advanced,
                malignity: 25
            },
            disassemble: !0,
            durability: 10
        }, e.defines[ItemType.Kiln].onUse[ActionType.Build] = DoodadType.Kiln, e.defines[ItemType.IronTongs] = {
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 1, 1, 1), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 100
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask],
            group: [ItemTypeGroup.Tongs, ItemTypeGroup.Skewer],
            durability: 50
        }, e.defines[ItemType.Talc] = {
            weight: 1
        }, e.defines[ItemType.TalcumPowder] = {
            reducedWeight: .2,
            group: [ItemTypeGroup.Powder],
            recipe: {
                components: [t(ItemType.Talc, 1, 1), t(ItemType.MortarAndPestle, 1, 0)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.SandCastFlask] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.Log, 1, 1), t(ItemType.GreenSand, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Intermediate,
                malignity: 50
            },
            durability: 30,
            onBurn: ItemType.None
        }, e.defines[ItemType.Lens] = {
            group: [ItemTypeGroup.Other],
            durability: 45,
            use: [ActionType.StartFire],
            recipe: {
                components: [t(ItemType.RefinedSand, 1, 1), t(ItemType.LimestonePowder, 1, 1, 0, !0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Glassblowing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitFurnace,
                malignity: 25
            }
        }, e.defines[ItemType.PlantRoots] = {
            weight: .2,
            group: [ItemTypeGroup.Cordage, ItemTypeGroup.Medicinal, ItemTypeGroup.Food],
            use: [ActionType.Eat],
            skillUse: SkillType.Botany,
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.PlantRoots].onUse[ActionType.Eat] = [1, 2, 1, 0], e.defines[ItemType.LockPick] = {
            group: [ItemTypeGroup.Other],
            durability: 5,
            use: [ActionType.LockPick],
            recipe: {
                components: [t(ItemTypeGroup.Sharpened, 1, 0), t(ItemTypeGroup.Needle, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: 50
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.BoneNeedle] = {
            reducedWeight: .1,
            group: [ItemTypeGroup.Needle],
            recipe: {
                components: [t(ItemType.SharpenedBone, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            durability: 10,
            onBurn: ItemType.None
        }, e.defines[ItemType.Pineapple] = {
            weight: 1.3,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 8750,
            decaysInto: ItemType.RottingVegetation,
            group: [ItemTypeGroup.Food],
            returnOnUse: [ItemType.PineappleSeeds, !0],
            onBurn: ItemType.None
        }, e.defines[ItemType.Pineapple].onUse[ActionType.Eat] = [5, 5, 5, 3], e.defines[ItemType.TatteredMap] = {
            weight: .2,
            durability: 50,
            use: [ActionType.Decode],
            onBurn: ItemType.None,
            repairable: !1
        }, e.defines[ItemType.Coal] = {
            weight: 1,
            group: [ItemTypeGroup.Carbon, ItemTypeGroup.Fuel],
            use: [ActionType.StokeFire],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.Coal].onUse[ActionType.StokeFire] = 10, e.defines[ItemType.WroughtIron] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.IronOre, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitFurnace,
                malignity: 50
            }
        }, e.defines[ItemType.LimestonePowder] = {
            reducedWeight: .4,
            group: [ItemTypeGroup.Powder],
            recipe: {
                components: [t(ItemType.Limestone, 1, 1), t(ItemType.MortarAndPestle, 1, 0)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.IronIngot] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.CarbonPowder, 1, 1, 0, !0), t(ItemType.LimestonePowder, 1, 1, 0, !0), t(ItemType.WroughtIron, 1, 1), t(ItemType.SandCastFlask, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitFurnace,
                malignity: 100
            }
        }, e.defines[ItemType.Backpack] = {
            durability: 15,
            group: [ItemTypeGroup.Equipment, ItemTypeGroup.Storage],
            weightCapacity: 50,
            use: [ActionType.OpenContainer],
            equip: EquipType.Back,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 2, 2, 2), t(ItemType.String, 2, 2, 2), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Advanced,
                malignity: 50
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.RottenMeat] = {
            weight: .7,
            group: [ItemTypeGroup.Compost],
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 4750,
            onBurn: ItemType.None
        }, e.defines[ItemType.RottenMeat].onUse[ActionType.Eat] = [-10, -20, 1, -1], e.defines[ItemType.StoneHammer] = {
            durability: 15,
            equip: EquipType.Held,
            attack: 2,
            damageType: DamageType.Blunt,
            use: [ActionType.Repair, ActionType.Gather],
            group: [ItemTypeGroup.Hammer, ItemTypeGroup.Repair, ItemTypeGroup.Weapon, ItemTypeGroup.Tool],
            recipe: {
                components: [t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Rock, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: 50
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.RawChicken] = {
            weight: 1.2,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 2250,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.CookedChicken,
            group: [ItemTypeGroup.Meat, ItemTypeGroup.RawMeat]
        }, e.defines[ItemType.RawChicken].onUse[ActionType.Eat] = [-10, -10, 6, -1], e.defines[ItemType.CookedChicken] = {
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 3250,
            decaysInto: ItemType.RottenMeat,
            recipe: {
                components: [t(ItemType.RawChicken, 1, 1), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Advanced,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Meat, ItemTypeGroup.Food, ItemTypeGroup.CookedMeat],
            onBurn: ItemType.None
        }, e.defines[ItemType.CookedChicken].onUse[ActionType.Eat] = [5, 5, 8, -2], e.defines[ItemType.ForgeAndAnvil] = {
            group: [ItemTypeGroup.Heating],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.Log, 1, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0), t(ItemTypeGroup.Rock, 7, 7, 7)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Advanced,
                malignity: 50
            },
            disassemble: !0,
            durability: 15
        }, e.defines[ItemType.ForgeAndAnvil].onUse[ActionType.Build] = DoodadType.ForgeAndAnvil, e.defines[ItemType.WoodenChest] = {
            group: [ItemTypeGroup.Storage],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.Log, 3, 3), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            onBurn: ItemType.Charcoal,
            durability: 10,
            doodadContainer: DoodadType.WoodenChest
        }, e.defines[ItemType.WoodenChest].onUse[ActionType.Build] = DoodadType.WoodenChest, e.defines[ItemType.IronSword] = {
            durability: 100,
            use: [ActionType.Carve, ActionType.Gather],
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.Weapon],
            equip: EquipType.Held,
            attack: 6,
            damageType: DamageType.Piercing | DamageType.Slashing,
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 2, 2, 2), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Expert,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronBreastplate] = {
            group: [ItemTypeGroup.Equipment],
            durability: 100,
            equip: EquipType.Chest,
            defense: new Defense(4, new Resistances(DamageType.Slashing, 1, DamageType.Blunt, 1, DamageType.Piercing, 1), new Vulnerabilities),
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 3, 3, 3), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Expert,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1e3
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronBoots] = {
            group: [ItemTypeGroup.Equipment],
            durability: 100,
            equip: EquipType.Feet,
            defense: new Defense(3, new Resistances(DamageType.Slashing, 1, DamageType.Blunt, 1, DamageType.Piercing, 1), new Vulnerabilities),
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 3, 3, 3), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Expert,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1e3
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronHelmet] = {
            group: [ItemTypeGroup.Equipment],
            durability: 100,
            equip: EquipType.Head,
            defense: new Defense(3, new Resistances(DamageType.Slashing, 1, DamageType.Blunt, 1, DamageType.Piercing, 1), new Vulnerabilities),
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 2, 2, 2), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Expert,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1e3
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronGorget] = {
            group: [ItemTypeGroup.Equipment],
            durability: 100,
            equip: EquipType.Neck,
            defense: new Defense(2, new Resistances(DamageType.Slashing, 1, DamageType.Blunt, 1, DamageType.Piercing, 1), new Vulnerabilities),
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 2, 2, 2), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1e3
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronGreaves] = {
            group: [ItemTypeGroup.Equipment],
            durability: 100,
            equip: EquipType.Legs,
            defense: new Defense(4, new Resistances(DamageType.Slashing, 1, DamageType.Blunt, 1, DamageType.Piercing, 1), new Vulnerabilities),
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 3, 3, 3), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Expert,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1e3
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronGauntlets] = {
            group: [ItemTypeGroup.Equipment],
            durability: 100,
            equip: EquipType.Hands,
            defense: new Defense(2, new Resistances(DamageType.Slashing, 1, DamageType.Blunt, 1, DamageType.Piercing, 1), new Vulnerabilities),
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 2, 2, 2), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Expert,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1e3
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronShield] = {
            group: [ItemTypeGroup.Equipment],
            durability: 100,
            equip: EquipType.Held,
            defense: new Defense(3, new Resistances(DamageType.Slashing, 1, DamageType.Blunt, 1, DamageType.Piercing, 1), new Vulnerabilities),
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 3, 3, 3), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Expert,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1e3
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.SandstoneWall] = {
            group: [ItemTypeGroup.Housing],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.Sandstone, 8, 8, 8)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            disassemble: !0,
            durability: 15
        }, e.defines[ItemType.SandstoneWall].onUse[ActionType.Build] = DoodadType.SandstoneWall, e.defines[ItemType.SandstoneFlooring] = {
            group: [ItemTypeGroup.Housing],
            use: [ActionType.SetDown],
            onUse: [],
            recipe: {
                components: [t(ItemType.Sandstone, 5, 5, 5)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            durability: 15
        }, e.defines[ItemType.SandstoneFlooring].onUse[ActionType.SetDown] = TerrainType.SandstoneFlooring, e.defines[ItemType.SpiderSilk] = {
            weight: .1,
            group: [ItemTypeGroup.Cordage],
            onBurn: ItemType.None
        }, e.defines[ItemType.AnimalFat] = {
            weight: .8,
            use: [ActionType.Eat, ActionType.StokeFire],
            onUse: [],
            group: [ItemTypeGroup.Fuel],
            decayMax: 4750,
            onBurn: ItemType.None
        }, e.defines[ItemType.AnimalFat].onUse[ActionType.Eat] = [0, -6, 2, -1], e.defines[ItemType.AnimalFat].onUse[ActionType.StokeFire] = 6, e.defines[ItemType.AnimalFatTorch] = {
            durability: 25,
            equip: EquipType.Held,
            attack: 1,
            damageType: DamageType.Blunt,
            use: [ActionType.Ignite, ActionType.Build],
            onUse: [],
            isTorch: !0,
            group: [ItemTypeGroup.LightSource, ItemTypeGroup.Weapon],
            lit: ItemType.LitAnimalFatTorch,
            recipe: {
                components: [t(ItemType.AnimalFat, 1, 1), t(ItemTypeGroup.Pole, 1, 1), t(ItemTypeGroup.Fabric, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.AnimalFatTorch].onUse[ActionType.Build] = DoodadType.TorchStand, e.defines[ItemType.ClayFlakes] = {
            reducedWeight: 1.5,
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.RawClay, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Claythrowing,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.GreenSand] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.ClayFlakes, 1, 1), t(ItemType.RefinedSand, 2, 2)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.OldInstructionalScroll] = {
            weight: .2,
            use: [ActionType.Read],
            group: [ItemTypeGroup.Pulp],
            onBurn: ItemType.None
        }, e.defines[ItemType.SlimeGelatin] = {
            weight: .5,
            use: [ActionType.Eat, ActionType.Preserve],
            group: [ItemTypeGroup.Preservative],
            onUse: [],
            decayMax: 4750,
            onBurn: ItemType.None
        }, e.defines[ItemType.SlimeGelatin].onUse[ActionType.Eat] = [-1, -2, 2, -1], e.defines[ItemType.Glue] = {
            use: [ActionType.Reinforce],
            recipe: {
                components: [t(ItemType.SlimeGelatin, 1, 1), t(ItemTypeGroup.Water, 1, 0)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Advanced,
                requiresFire: !0,
                malignity: 25
            },
            decayMax: 750,
            group: [ItemTypeGroup.Reinforce],
            onBurn: ItemType.None
        }, e.defines[ItemType.CookedSpider] = {
            use: [ActionType.Eat],
            onUse: [],
            recipe: {
                components: [t(ItemType.DeadSpider, 1, 1), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Intermediate,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Insect, ItemTypeGroup.Food, ItemTypeGroup.CookedMeat],
            decayMax: 4750,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.None
        }, e.defines[ItemType.CookedSpider].onUse[ActionType.Eat] = [3, 5, 2, 0], e.defines[ItemType.DeadSpider] = {
            weight: .4,
            use: [ActionType.Eat],
            onUse: [],
            group: [ItemTypeGroup.Insect, ItemTypeGroup.RawMeat],
            decayMax: 4750,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.CookedSpider
        }, e.defines[ItemType.DeadSpider].onUse[ActionType.Eat] = [-1, -2, 2, -1], e.defines[ItemType.IronLockPick] = {
            group: [ItemTypeGroup.Other],
            durability: 40,
            use: [ActionType.LockPick],
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 1, 1, 1), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 250
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.RottingVegetation] = {
            group: [ItemTypeGroup.Compost],
            weight: .5,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 4750,
            onBurn: ItemType.None
        }, e.defines[ItemType.RottingVegetation].onUse[ActionType.Eat] = [-10, -15, 1, -1], e.defines[ItemType.WildOnion] = {
            weight: .6,
            use: [ActionType.Eat, ActionType.Plant],
            skillUse: SkillType.Botany,
            onUse: [],
            decayMax: 14e3,
            decaysInto: ItemType.RottingVegetation,
            group: [ItemTypeGroup.Food],
            onBurn: ItemType.None
        }, e.defines[ItemType.WildOnion].onUse[ActionType.Eat] = [4, 4, 3, 0], e.defines[ItemType.WildOnion].onUse[ActionType.Plant] = DoodadType.WildOnion, e.defines[ItemType.IronHammer] = {
            durability: 60,
            attack: 4,
            damageType: DamageType.Blunt,
            equip: EquipType.Held,
            group: [ItemTypeGroup.Hammer, ItemTypeGroup.Repair, ItemTypeGroup.Weapon, ItemTypeGroup.Tool],
            use: [ActionType.Repair, ActionType.Gather],
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 1, 1, 1), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Pole, 1, 1), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 250
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronSpear] = {
            durability: 100,
            equip: EquipType.Held,
            attack: 5,
            damageType: DamageType.Piercing,
            group: [ItemTypeGroup.Skewer, ItemTypeGroup.Weapon],
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 1, 1, 1), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Pole, 1, 1), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1e3
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask],
            use: [ActionType.Gather]
        }, e.defines[ItemType.IronShovel] = {
            group: [ItemTypeGroup.Tool, ItemTypeGroup.Weapon],
            durability: 200,
            equip: EquipType.Held,
            attack: 4,
            damageType: DamageType.Slashing,
            use: [ActionType.Dig, ActionType.Gather, ActionType.GatherTreasure],
            recipe: {
                components: [t(ItemType.String, 2, 2, 2), t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 1, 1, 1), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 250
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronDoubleAxe] = {
            durability: 200,
            equip: EquipType.Held,
            twoHanded: !0,
            attack: 6,
            damageType: DamageType.Slashing,
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.Weapon, ItemTypeGroup.Tool],
            use: [ActionType.Carve, ActionType.Gather],
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 2, 2, 2), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 1500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.IronPickaxe] = {
            group: [ItemTypeGroup.Weapon, ItemTypeGroup.Tool],
            durability: 200,
            equip: EquipType.Held,
            attack: 5,
            damageType: DamageType.Blunt | DamageType.Piercing,
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 1, 1, 1), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask],
            use: [ActionType.Gather]
        }, e.defines[ItemType.Inkstick] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.Glue, 1, 1), t(ItemTypeGroup.Water, 1, 0), t(ItemTypeGroup.Carbon, 2, 2)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            durability: 10,
            onBurn: ItemType.None
        }, e.defines[ItemType.Coconut] = {
            weight: 1.5,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 8750,
            decaysInto: ItemType.RottingVegetation,
            group: [ItemTypeGroup.Food],
            onBurn: ItemType.None
        }, e.defines[ItemType.Coconut].onUse[ActionType.Eat] = [5, 5, 5, 4], e.defines[ItemType.PalmLeaf] = {
            weight: .3,
            group: [ItemTypeGroup.Cordage, ItemTypeGroup.Compost],
            onBurn: ItemType.None,
            use: [ActionType.StokeFire],
            onUse: []
        }, e.defines[ItemType.PalmLeaf].onUse[ActionType.StokeFire] = 3, e.defines[ItemType.Offal] = {
            group: [ItemTypeGroup.Compost, ItemTypeGroup.Meat, ItemTypeGroup.RawMeat],
            weight: .8,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 750,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.None
        }, e.defines[ItemType.Offal].onUse[ActionType.Eat] = [-2, -6, 3, -1], e.defines[ItemType.Bones] = {
            weight: .5,
            group: [ItemTypeGroup.Bone],
            onBurn: ItemType.None
        }, e.defines[ItemType.LitPoleTorch] = {
            inheritWeight: ItemType.Branch,
            durability: 10,
            equip: EquipType.Held,
            attack: 2,
            damageType: DamageType.Fire | DamageType.Blunt,
            use: [ActionType.StartFire, ActionType.Extinguish, ActionType.Build],
            onUse: [],
            isTorch: !0,
            revert: ItemType.WoodenPole,
            onEquipEffect: [OnEquipType.LightSource, 1],
            decayMax: 250,
            decaysInto: ItemType.PileOfAsh,
            onBurn: ItemType.Charcoal,
            repairable: !1
        }, e.defines[ItemType.LitPoleTorch].onUse[ActionType.Build] = DoodadType.LitTorchStand, e.defines[ItemType.Cotton] = {
            weight: .2,
            group: [ItemTypeGroup.Pulp],
            onBurn: ItemType.None
        }, e.defines[ItemType.CottonSeeds] = {
            weight: .1,
            skillUse: SkillType.Botany,
            use: [ActionType.Plant, ActionType.Eat],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.CottonSeeds].onUse[ActionType.Plant] = DoodadType.Cotton, e.defines[ItemType.CottonSeeds].onUse[ActionType.Eat] = [1, 1, 1, -1], e.defines[ItemType.CottonFabric] = {
            group: [ItemTypeGroup.Fabric],
            recipe: {
                components: [t(ItemType.Cotton, 3, 3)],
                skill: SkillType.Tailoring,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.BonePole] = {
            reducedWeight: .1,
            durability: 20,
            equip: EquipType.Held,
            attack: 2,
            damageType: DamageType.Blunt,
            group: [ItemTypeGroup.Pole, ItemTypeGroup.Skewer, ItemTypeGroup.Weapon],
            recipe: {
                components: [t(ItemTypeGroup.Sharpened, 1, 0), t(ItemTypeGroup.Bone, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            use: [ActionType.Gather],
            onBurn: ItemType.None
        }, e.defines[ItemType.Tourniquet] = {
            group: [ItemTypeGroup.Health],
            use: [ActionType.Heal],
            skillUse: SkillType.Anatomy,
            onUse: [],
            recipe: {
                components: [t(ItemType.String, 2, 2, 2), t(ItemTypeGroup.Pole, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.Tourniquet].onUse[ActionType.Heal] = [2, 0, 0, 0], e.defines[ItemType.WroughtIronPickaxe] = {
            group: [ItemTypeGroup.Weapon, ItemTypeGroup.Tool],
            durability: 100,
            equip: EquipType.Held,
            attack: 4,
            damageType: DamageType.Blunt | DamageType.Piercing,
            recipe: {
                components: [t(ItemType.WroughtIron, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 250
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer],
            use: [ActionType.Gather]
        }, e.defines[ItemType.WroughtIronDoubleAxe] = {
            durability: 100,
            equip: EquipType.Held,
            twoHanded: !0,
            attack: 5,
            damageType: DamageType.Slashing,
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.Weapon, ItemTypeGroup.Tool],
            use: [ActionType.Carve, ActionType.Gather],
            recipe: {
                components: [t(ItemType.WroughtIron, 2, 2, 2), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 750
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronShovel] = {
            group: [ItemTypeGroup.Tool, ItemTypeGroup.Weapon],
            durability: 100,
            equip: EquipType.Held,
            attack: 3,
            damageType: DamageType.Slashing,
            use: [ActionType.Dig, ActionType.Gather, ActionType.GatherTreasure],
            recipe: {
                components: [t(ItemType.String, 2, 2, 2), t(ItemType.WroughtIron, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 175
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronSpear] = {
            durability: 50,
            equip: EquipType.Held,
            attack: 4,
            damageType: DamageType.Piercing,
            group: [ItemTypeGroup.Skewer, ItemTypeGroup.Weapon],
            recipe: {
                components: [t(ItemType.WroughtIron, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer],
            use: [ActionType.Gather]
        }, e.defines[ItemType.WroughtIronHammer] = {
            durability: 30,
            equip: EquipType.Held,
            attack: 3,
            damageType: DamageType.Blunt,
            group: [ItemTypeGroup.Hammer, ItemTypeGroup.Repair, ItemTypeGroup.Weapon, ItemTypeGroup.Tool],
            use: [ActionType.Repair, ActionType.Gather],
            recipe: {
                components: [t(ItemType.WroughtIron, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 175
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronLockPick] = {
            group: [ItemTypeGroup.Other],
            durability: 20,
            use: [ActionType.LockPick],
            recipe: {
                components: [t(ItemType.WroughtIron, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Simple,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 175
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronShield] = {
            group: [ItemTypeGroup.Equipment],
            durability: 50,
            equip: EquipType.Held,
            defense: new Defense(2, new Resistances(DamageType.Slashing, 1, DamageType.Piercing, 1), new Vulnerabilities(DamageType.Blunt, 1)),
            recipe: {
                components: [t(ItemType.WroughtIron, 3, 3, 3), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronGauntlets] = {
            group: [ItemTypeGroup.Equipment],
            durability: 50,
            equip: EquipType.Hands,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1, DamageType.Piercing, 1), new Vulnerabilities(DamageType.Blunt, 1)),
            recipe: {
                components: [t(ItemType.WroughtIron, 2, 2, 2), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronGreaves] = {
            group: [ItemTypeGroup.Equipment],
            durability: 50,
            equip: EquipType.Legs,
            defense: new Defense(3, new Resistances(DamageType.Slashing, 1, DamageType.Piercing, 1), new Vulnerabilities(DamageType.Blunt, 1)),
            recipe: {
                components: [t(ItemType.WroughtIron, 3, 3, 3), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronGorget] = {
            group: [ItemTypeGroup.Equipment],
            durability: 50,
            equip: EquipType.Neck,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1, DamageType.Piercing, 1), new Vulnerabilities(DamageType.Blunt, 1)),
            recipe: {
                components: [t(ItemType.WroughtIron, 2, 2, 2), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronHelmet] = {
            group: [ItemTypeGroup.Equipment],
            durability: 50,
            equip: EquipType.Head,
            defense: new Defense(2, new Resistances(DamageType.Slashing, 1, DamageType.Piercing, 1), new Vulnerabilities(DamageType.Blunt, 1)),
            recipe: {
                components: [t(ItemType.WroughtIron, 2, 2, 2), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronBoots] = {
            group: [ItemTypeGroup.Equipment],
            durability: 50,
            equip: EquipType.Feet,
            defense: new Defense(2, new Resistances(DamageType.Slashing, 1, DamageType.Piercing, 1), new Vulnerabilities(DamageType.Blunt, 1)),
            recipe: {
                components: [t(ItemType.WroughtIron, 3, 3, 3), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronBreastPlate] = {
            group: [ItemTypeGroup.Equipment],
            durability: 50,
            equip: EquipType.Chest,
            defense: new Defense(3, new Resistances(DamageType.Slashing, 1, DamageType.Piercing, 1), new Vulnerabilities(DamageType.Blunt, 1)),
            recipe: {
                components: [t(ItemType.WroughtIron, 3, 3, 3), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WroughtIronSword] = {
            durability: 50,
            equip: EquipType.Held,
            attack: 6,
            damageType: DamageType.Piercing | DamageType.Slashing,
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.Weapon],
            use: [ActionType.Carve, ActionType.Gather],
            recipe: {
                components: [t(ItemType.WroughtIron, 2, 2, 2), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 500
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.WoodenWall] = {
            group: [ItemTypeGroup.Housing],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.Log, 3, 3, 3), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            disassemble: !0,
            durability: 15,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.WoodenWall].onUse[ActionType.Build] = DoodadType.WoodenWall, e.defines[ItemType.WoodenFlooring] = {
            group: [ItemTypeGroup.Housing],
            use: [ActionType.SetDown],
            onUse: [],
            recipe: {
                components: [t(ItemType.Log, 2, 2), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            durability: 15,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.WoodenFlooring].onUse[ActionType.SetDown] = TerrainType.WoodenFlooring, e.defines[ItemType.WoodenDoor] = {
            group: [ItemTypeGroup.Housing],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.Log, 3, 3), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            durability: 15,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.WoodenDoor].onUse[ActionType.Build] = DoodadType.WoodenDoor, e.defines[ItemType.FishingRod] = {
            group: [ItemTypeGroup.Tool, ItemTypeGroup.Weapon],
            durability: 20,
            equip: EquipType.Held,
            attack: 1,
            damageType: DamageType.Slashing,
            ranged: {
                range: 5,
                attack: 0
            },
            use: [ActionType.Cast],
            recipe: {
                components: [t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Needle, 1, 1, 1), t(ItemTypeGroup.Insect, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.MessageInABottle] = {
            weight: 2,
            use: [ActionType.Open]
        }, e.defines[ItemType.CarbonPowder] = {
            reducedWeight: .1,
            group: [ItemTypeGroup.Powder],
            recipe: {
                components: [t(ItemType.MortarAndPestle, 1, 0), t(ItemTypeGroup.Carbon, 1, 1)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.PileOfCompost] = {
            group: [ItemTypeGroup.Gardening],
            use: [ActionType.Garden],
            onUse: [],
            recipe: {
                components: [t(ItemType.Soil, 1, 1), t(ItemTypeGroup.Compost, 2, 2)],
                skill: SkillType.Botany,
                level: RecipeLevel.Intermediate,
                malignity: -100
            },
            onBurn: ItemType.Soil
        }, e.defines[ItemType.PileOfCompost].onUse[ActionType.Garden] = 3, e.defines[ItemType.MeltedAmber] = {
            use: [ActionType.Reinforce],
            recipe: {
                components: [t(ItemType.Amber, 1, 1)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: 25
            },
            decayMax: 100,
            decaysInto: ItemType.Amber,
            group: [ItemTypeGroup.Reinforce],
            onBurn: ItemType.None
        }, e.defines[ItemType.Tinder] = {
            use: [ActionType.StokeFire],
            onUse: [],
            recipe: {
                components: [t(ItemType.Twigs, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Camping,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            group: [ItemTypeGroup.Pulp, ItemTypeGroup.Firemaking],
            onBurn: ItemType.None
        }, e.defines[ItemType.Tinder].onUse[ActionType.StokeFire] = 4, e.defines[ItemType.Deadfall] = {
            group: [ItemTypeGroup.Trap],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.LargeRock, 1, 1, 1), t(ItemTypeGroup.Pole, 3, 3, 3)],
                skill: SkillType.Trapping,
                level: RecipeLevel.Simple,
                malignity: 100
            },
            disassemble: !0,
            durability: 5,
            onBurn: ItemType.LargeRock
        }, e.defines[ItemType.Deadfall].onUse[ActionType.Build] = DoodadType.SetDeadfall, e.defines[ItemType.Snare] = {
            group: [ItemTypeGroup.Trap],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Pole, 2, 2, 2)],
                skill: SkillType.Trapping,
                level: RecipeLevel.Simple,
                malignity: 100
            },
            disassemble: !0,
            durability: 5,
            onBurn: ItemType.None
        }, e.defines[ItemType.Snare].onUse[ActionType.Build] = DoodadType.SetSnare, e.defines[ItemType.WaterskinOfMedicinalWater] = {
            inheritWeight: ItemType.Waterskin,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ContainerOfMedicinalWater],
            use: [ActionType.DrinkCure],
            onUse: [],
            recipe: {
                baseComponent: ItemTypeGroup.WaterskinOfPotableWater,
                components: [t(ItemTypeGroup.Medicinal, 2, 2)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            durability: 20,
            returnOnUse: [ItemType.Waterskin, !1],
            onBurn: ItemType.None,
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.WaterskinOfMedicinalWater].onUse[ActionType.DrinkCure] = [3, 8, 1, 9], e.defines[ItemType.CharcoalBandage] = {
            group: [ItemTypeGroup.Health],
            use: [ActionType.Heal],
            skillUse: SkillType.Anatomy,
            onUse: [],
            recipe: {
                components: [t(ItemType.Bandage, 1, 1, 1), t(ItemType.Charcoal, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.CharcoalBandage].onUse[ActionType.Heal] = [14, 0, 0, 0], e.defines[ItemType.WoodenTongs] = {
            recipe: {
                components: [t(ItemType.WoodenPole, 1, 1, 1), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            disassemble: !0,
            group: [ItemTypeGroup.Tongs, ItemTypeGroup.Skewer],
            durability: 10,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.WroughtIronTongs] = {
            recipe: {
                components: [t(ItemType.WroughtIron, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Simple,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 50
            },
            group: [ItemTypeGroup.Tongs, ItemTypeGroup.Skewer],
            durability: 25,
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.SheetOfGlass] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.RefinedSand, 3, 3), t(ItemType.LimestonePowder, 1, 1, 0, !0), t(ItemTypeGroup.Tongs, 1, 0)],
                skill: SkillType.Glassblowing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitFurnace,
                malignity: 25
            }
        }, e.defines[ItemType.SolarStill] = {
            group: [ItemTypeGroup.Other],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.SheetOfGlass, 1, 1, 1), t(ItemTypeGroup.Container, 1, 1, 1)],
                skill: SkillType.Tinkering,
                level: RecipeLevel.Advanced,
                malignity: -100
            },
            disassemble: !0,
            durability: 10,
            onBurn: ItemType.SheetOfGlass
        }, e.defines[ItemType.SolarStill].onUse[ActionType.Build] = DoodadType.SolarStill, e.defines[ItemType.StoneWaterStill] = {
            group: [ItemTypeGroup.Other],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Rock, 3, 3, 2), t(ItemTypeGroup.Sharpened, 1, 0), t(ItemTypeGroup.Pole, 1, 1, 1), t(ItemTypeGroup.Container, 1, 1, 1)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            disassemble: !0,
            durability: 15,
            onBurn: ItemType.LargeRock
        }, e.defines[ItemType.StoneWaterStill].onUse[ActionType.Build] = DoodadType.StoneWaterStill, e.defines[ItemType.Sundial] = {
            reducedWeight: 2,
            group: [ItemTypeGroup.Tool],
            use: [ActionType.TellTime],
            recipe: {
                components: [t(ItemType.LargeRock, 1, 1), t(ItemTypeGroup.SharpenedRock, 1, 1)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            durability: 50
        }, e.defines[ItemType.LitAnimalFatTorch] = {
            inheritWeight: ItemType.AnimalFatTorch,
            durability: 25,
            equip: EquipType.Held,
            attack: 3,
            damageType: DamageType.Fire | DamageType.Blunt,
            use: [ActionType.StartFire, ActionType.Extinguish, ActionType.Build],
            onUse: [],
            isTorch: !0,
            onEquipEffect: [OnEquipType.LightSource, 3],
            revert: ItemType.AnimalFatTorch,
            decayMax: 3500,
            decaysInto: ItemType.PileOfAsh,
            onBurn: ItemType.Charcoal,
            repairable: !1
        }, e.defines[ItemType.LitAnimalFatTorch].onUse[ActionType.Build] = DoodadType.LitTorchStand, e.defines[ItemType.Sinew] = {
            reducedWeight: .5,
            group: [ItemTypeGroup.Cordage],
            recipe: {
                components: [t(ItemType.Offal, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Simple,
                malignity: 25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.ShortBow] = {
            group: [ItemTypeGroup.Weapon],
            durability: 25,
            use: [ActionType.Shoot],
            equip: EquipType.Held,
            twoHanded: !0,
            attack: 2,
            damageType: DamageType.Blunt,
            ranged: {
                range: 4,
                attack: 3
            },
            recipe: {
                components: [t(ItemType.WoodenPole, 1, 1), t(ItemType.Sinew, 1, 1)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Advanced,
                malignity: 100
            },
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.LongBow] = {
            group: [ItemTypeGroup.Weapon],
            durability: 30,
            use: [ActionType.Shoot],
            equip: EquipType.Held,
            twoHanded: !0,
            attack: 2,
            damageType: DamageType.Blunt,
            ranged: {
                range: 8,
                attack: 5
            },
            recipe: {
                components: [t(ItemType.WoodenPole, 1, 1), t(ItemType.Sinew, 2, 2), t(ItemType.Glue, 1, 1)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Advanced,
                malignity: 250
            },
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.CompositeBow] = {
            group: [ItemTypeGroup.Weapon],
            durability: 65,
            use: [ActionType.Shoot],
            equip: EquipType.Held,
            twoHanded: !0,
            attack: 3,
            damageType: DamageType.Blunt,
            ranged: {
                range: 5,
                attack: 7
            },
            recipe: {
                components: [t(ItemType.WoodenPole, 2, 2), t(ItemType.Sinew, 2, 2), t(ItemType.Glue, 1, 1), t(ItemTypeGroup.Water, 1, 0)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Expert,
                requiresFire: !0,
                malignity: 500
            },
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.WaterskinOfPurifiedFreshWater] = {
            inheritWeight: ItemType.Waterskin,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            recipe: {
                baseComponent: ItemType.WaterskinOfUnpurifiedFreshWater,
                components: [],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            durability: 20,
            group: [ItemTypeGroup.Water, ItemTypeGroup.WaterskinOfPotableWater, ItemTypeGroup.ContainerOfPurifiedFreshWater],
            returnOnUse: [ItemType.Waterskin, !1],
            onBurn: ItemType.None,
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.WaterskinOfPurifiedFreshWater].onUse[ActionType.Drink] = [2, 15, 1, 10], e.defines[ItemType.WaterskinOfUnpurifiedFreshWater] = {
            inheritWeight: ItemType.Waterskin,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            recipe: {
                baseComponent: ItemType.Waterskin,
                components: [t(ItemType.PileOfSnow, 1, 1)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            durability: 20,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ContainerOfUnpurifiedFreshWater],
            returnOnUse: [ItemType.Waterskin, !1],
            onBurn: ItemType.None,
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.WaterskinOfUnpurifiedFreshWater].onUse[ActionType.Drink] = [-4, 8, 1, 8], e.defines[ItemType.GlassBottle] = {
            use: [ActionType.GatherWater],
            recipe: {
                components: [t(ItemType.ClayBlowpipe, 1, 0), t(ItemType.RefinedSand, 2, 2), t(ItemType.LimestonePowder, 1, 1, 0, !0), t(ItemType.Cork, 1, 1)],
                skill: SkillType.Glassblowing,
                level: RecipeLevel.Advanced,
                requiredDoodadType: DoodadType.LitFurnace,
                malignity: -25
            },
            durability: 15,
            group: [ItemTypeGroup.Container]
        }, e.defines[ItemType.Cork] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.TreeBark, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.GlassBottleOfSeawater] = {
            inheritWeight: ItemType.GlassBottle,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            durability: 15,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ContainerOfSeawater],
            returnOnUse: [ItemType.GlassBottle, !1],
            repairable: !1
        }, e.defines[ItemType.GlassBottleOfSeawater].onUse[ActionType.Drink] = [0, -15, 1, -2], e.defines[ItemType.GlassBottleOfDesalinatedWater] = {
            inheritWeight: ItemType.GlassBottle,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            recipe: {
                baseComponent: ItemType.GlassBottleOfSeawater,
                components: [t(ItemType.Flask, 1, 0)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            durability: 15,
            group: [ItemTypeGroup.Water, ItemTypeGroup.GlassBottleOfPotableWater, ItemTypeGroup.ContainerOfDesalinatedWater],
            returnOnUse: [ItemType.GlassBottle, !1],
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.GlassBottleOfDesalinatedWater].onUse[ActionType.Drink] = [2, 15, 1, 10], e.defines[ItemType.GlassBottleOfMedicinalWater] = {
            inheritWeight: ItemType.GlassBottle,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ContainerOfMedicinalWater],
            use: [ActionType.DrinkCure],
            onUse: [],
            recipe: {
                baseComponent: ItemTypeGroup.GlassBottleOfPotableWater,
                components: [t(ItemTypeGroup.Medicinal, 2, 2)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            durability: 15,
            returnOnUse: [ItemType.GlassBottle, !1],
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.GlassBottleOfMedicinalWater].onUse[ActionType.DrinkCure] = [3, 8, 1, 9], e.defines[ItemType.GlassBottleOfPurifiedFreshWater] = {
            inheritWeight: ItemType.GlassBottle,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            recipe: {
                baseComponent: ItemType.GlassBottleOfUnpurifiedFreshWater,
                components: [],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            durability: 15,
            group: [ItemTypeGroup.Water, ItemTypeGroup.GlassBottleOfPotableWater, ItemTypeGroup.ContainerOfPurifiedFreshWater],
            returnOnUse: [ItemType.GlassBottle, !1],
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.GlassBottleOfPurifiedFreshWater].onUse[ActionType.Drink] = [2, 15, 1, 10], e.defines[ItemType.GlassBottleOfUnpurifiedFreshWater] = {
            inheritWeight: ItemType.GlassBottle,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            recipe: {
                baseComponent: ItemType.GlassBottle,
                components: [t(ItemType.PileOfSnow, 1, 1)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            durability: 15,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ContainerOfUnpurifiedFreshWater],
            returnOnUse: [ItemType.GlassBottle, !1],
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.GlassBottleOfUnpurifiedFreshWater].onUse[ActionType.Drink] = [-4, 8, 1, 8], e.defines[ItemType.WroughtIronArrow] = {
            group: [ItemTypeGroup.Arrow],
            recipe: {
                components: [t(ItemType.Feather, 1, 1, 1), t(ItemType.WroughtIronArrowhead, 1, 1, 1), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Advanced,
                malignity: 75
            },
            disassemble: !0,
            attack: 3,
            damageType: DamageType.Piercing,
            durability: 25,
            onBurn: ItemType.WroughtIronArrowhead
        }, e.defines[ItemType.IronArrow] = {
            group: [ItemTypeGroup.Arrow],
            recipe: {
                components: [t(ItemType.Feather, 1, 1, 1), t(ItemType.IronArrowhead, 1, 1, 1), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Pole, 1, 1, 1)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Expert,
                malignity: 100
            },
            disassemble: !0,
            attack: 4,
            damageType: DamageType.Piercing,
            durability: 50,
            onBurn: ItemType.IronArrowhead
        }, e.defines[ItemType.StoneBullet] = {
            group: [ItemTypeGroup.Bullet],
            recipe: {
                components: [t(ItemType.SmoothRock, 1, 1), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            attack: 1,
            damageType: DamageType.Blunt,
            durability: 10
        }, e.defines[ItemType.WroughtIronBullet] = {
            group: [ItemTypeGroup.Bullet],
            recipe: {
                components: [t(ItemType.WroughtIron, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Simple,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 50
            },
            attack: 2,
            damageType: DamageType.Blunt,
            durability: 25,
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.IronBullet] = {
            group: [ItemTypeGroup.Bullet],
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 1, 1, 1), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 100
            },
            attack: 3,
            damageType: DamageType.Blunt,
            durability: 50,
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.LeatherQuiver] = {
            durability: 20,
            group: [ItemTypeGroup.Equipment, ItemTypeGroup.Storage],
            weightCapacity: 25,
            use: [ActionType.OpenContainer],
            equip: EquipType.Back,
            defense: new Defense(1, new Resistances(DamageType.Slashing, 1), new Vulnerabilities(DamageType.Piercing, 1)),
            recipe: {
                components: [t(ItemType.TannedLeather, 1, 1, 1), t(ItemType.String, 2, 2, 2), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Leatherworking,
                level: RecipeLevel.Intermediate,
                malignity: 50
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.Ectoplasm] = {
            weight: 0,
            decayMax: 25
        }, e.defines[ItemType.MagicalEssence] = {
            use: [ActionType.Transmogrify],
            decayMax: 100,
            recipe: {
                components: [t(ItemType.PileOfAsh, 1, 1), t(ItemType.Offal, 1, 1), t(ItemType.Ectoplasm, 1, 1)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Expert,
                malignity: 500
            },
            group: [ItemTypeGroup.Transmogrify],
            onBurn: ItemType.Ectoplasm
        }, e.defines[ItemType.WoodenFence] = {
            group: [ItemTypeGroup.Housing],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.Log, 3, 3), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            durability: 10,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.WoodenFence].onUse[ActionType.Build] = DoodadType.WoodenFence, e.defines[ItemType.MonsterIdol] = {
            weight: 3,
            use: [ActionType.Build],
            onUse: [],
            onBurn: ItemType.MagicalEssence
        }, e.defines[ItemType.MonsterIdol].onUse[ActionType.Build] = DoodadType.MonsterIdol, e.defines[ItemType.CordedSling] = {
            group: [ItemTypeGroup.Weapon],
            durability: 20,
            use: [ActionType.Sling],
            equip: EquipType.Held,
            twoHanded: !0,
            attack: 1,
            damageType: DamageType.Blunt,
            ranged: {
                range: 4,
                attack: 1
            },
            recipe: {
                components: [t(ItemType.String, 4, 4, 4)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Intermediate,
                malignity: 50
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.LeatherSling] = {
            group: [ItemTypeGroup.Weapon],
            durability: 40,
            use: [ActionType.Sling],
            equip: EquipType.Held,
            twoHanded: !0,
            attack: 2,
            damageType: DamageType.Blunt,
            ranged: {
                range: 5,
                attack: 2
            },
            recipe: {
                components: [t(ItemType.TannedLeather, 1, 1, 1), t(ItemType.String, 4, 4, 4), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Fletching,
                level: RecipeLevel.Advanced,
                malignity: 100
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.WroughtIronArrowhead] = {
            reducedWeight: 2,
            group: [ItemTypeGroup.Sharpened],
            use: [ActionType.Carve],
            recipe: {
                components: [t(ItemType.WroughtIron, 1, 1, 1), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Simple,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 50
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer]
        }, e.defines[ItemType.IronArrowhead] = {
            reducedWeight: 2,
            group: [ItemTypeGroup.Sharpened],
            use: [ActionType.Carve],
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 1, 1, 1), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: 100
            },
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask]
        }, e.defines[ItemType.Hammock] = {
            use: [ActionType.Rest, ActionType.Sleep],
            durability: 25,
            group: [ItemTypeGroup.Bedding],
            recipe: {
                components: [t(ItemType.Rope, 2, 2, 2), t(ItemType.String, 2, 2, 2)],
                skill: SkillType.Camping,
                level: RecipeLevel.Advanced,
                malignity: -50
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.CottonBedroll] = {
            use: [ActionType.Rest, ActionType.Sleep],
            durability: 75,
            group: [ItemTypeGroup.Bedding],
            recipe: {
                components: [t(ItemType.CottonFabric, 2, 2, 2), t(ItemType.Cotton, 4, 4, 4), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Tailoring,
                level: RecipeLevel.Advanced,
                malignity: -50
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.FeatherBedroll] = {
            use: [ActionType.Rest, ActionType.Sleep],
            durability: 75,
            group: [ItemTypeGroup.Bedding],
            recipe: {
                components: [t(ItemType.WovenFabric, 2, 2, 2), t(ItemType.Feather, 6, 6, 6), t(ItemType.String, 1, 1, 1), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Tailoring,
                level: RecipeLevel.Intermediate,
                malignity: -50
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.RawTaintedMeat] = {
            weight: .8,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 750,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.CookedTaintedMeat,
            group: [ItemTypeGroup.Meat, ItemTypeGroup.RawMeat]
        }, e.defines[ItemType.RawTaintedMeat].onUse[ActionType.Eat] = [-8, 1, 7, -3], e.defines[ItemType.CookedTaintedMeat] = {
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 1750,
            decaysInto: ItemType.RottenMeat,
            recipe: {
                components: [t(ItemType.RawTaintedMeat, 1, 1), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Intermediate,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Meat, ItemTypeGroup.CookedMeat],
            onBurn: ItemType.None
        }, e.defines[ItemType.CookedTaintedMeat].onUse[ActionType.Eat] = [-4, 2, 8, -2], e.defines[ItemType.StoneKnife] = {
            reducedWeight: .2,
            durability: 20,
            equip: EquipType.Held,
            attack: 1,
            damageType: DamageType.Slashing,
            group: [ItemTypeGroup.Sharpened, ItemTypeGroup.Weapon],
            use: [ActionType.Carve, ActionType.Gather],
            recipe: {
                components: [t(ItemTypeGroup.SharpenedRock, 2, 1)],
                skill: SkillType.Stonecrafting,
                level: RecipeLevel.Simple,
                malignity: 50
            }
        }, e.defines[ItemType.RawBlindfish] = {
            weight: .8,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 2500,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.CookedBlindfish,
            group: [ItemTypeGroup.Meat, ItemTypeGroup.RawMeat]
        }, e.defines[ItemType.RawBlindfish].onUse[ActionType.Eat] = [0, 2, 4, -1], e.defines[ItemType.CookedBlindfish] = {
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 4500,
            decaysInto: ItemType.RottenMeat,
            recipe: {
                components: [t(ItemType.RawBlindfish, 1, 1), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Meat, ItemTypeGroup.Food, ItemTypeGroup.CookedMeat],
            onBurn: ItemType.None
        }, e.defines[ItemType.CookedBlindfish].onUse[ActionType.Eat] = [1, 5, 5, -1], e.defines[ItemType.Pemmican] = {
            reducedWeight: .5,
            use: [ActionType.Eat],
            onUse: [],
            recipe: {
                components: [t(ItemTypeGroup.Meat, 2, 2), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Advanced,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Food, ItemTypeGroup.CookedMeat],
            onBurn: ItemType.None
        }, e.defines[ItemType.Pemmican].onUse[ActionType.Eat] = [1, 2, 4, -2], e.defines[ItemType.PreparedPemmican] = {
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 5250,
            decaysInto: ItemType.RottenMeat,
            recipe: {
                components: [t(ItemType.Pemmican, 1, 1), t(ItemType.AnimalFat, 1, 1), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Advanced,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Food, ItemTypeGroup.CookedMeat],
            onBurn: ItemType.None
        }, e.defines[ItemType.PreparedPemmican].onUse[ActionType.Eat] = [2, 6, 6, -2],
        e.defines[ItemType.Sail] = {
            group: [ItemTypeGroup.Travel],
            recipe: {
                components: [t(ItemType.String, 3, 3, 3), t(ItemTypeGroup.Fabric, 3, 3, 3), t(ItemTypeGroup.Needle, 1, 0)],
                skill: SkillType.Tailoring,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.None
        }, e.defines[ItemType.Sailboat] = {
            group: [ItemTypeGroup.Travel],
            use: [ActionType.TraverseTheSea, ActionType.SailToCivilization],
            recipe: {
                components: [t(ItemType.Sail, 1, 1, 1), t(ItemType.BoatPaddle, 1, 1, 1), t(ItemType.Rope, 2, 2, 2), t(ItemType.Log, 3, 3, 3), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Expert,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.Egg] = {
            weight: .2,
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 6250,
            group: [ItemTypeGroup.Food],
            onBurn: ItemType.BoiledEgg,
            decaySpawn: MonsterType.Chicken
        }, e.defines[ItemType.Egg].onUse[ActionType.Eat] = [-1, 6, 3, 1], e.defines[ItemType.BoiledEgg] = {
            use: [ActionType.Eat],
            onUse: [],
            decayMax: 5250,
            recipe: {
                components: [t(ItemType.Egg, 1, 1), t(ItemTypeGroup.Skewer, 1, 0), t(ItemTypeGroup.Water, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            group: [ItemTypeGroup.Food],
            onBurn: ItemType.None
        }, e.defines[ItemType.BoiledEgg].onUse[ActionType.Eat] = [2, 6, 3, 0], e.defines[ItemType.GrassBlades] = {
            weight: .1,
            group: [ItemTypeGroup.Compost, ItemTypeGroup.Cordage],
            use: [ActionType.StokeFire],
            onBurn: ItemType.None,
            onUse: []
        }, e.defines[ItemType.GrassBlades].onUse[ActionType.StokeFire] = 2, e.defines[ItemType.Niter] = {
            weight: .4
        }, e.defines[ItemType.Saltpeter] = {
            reducedWeight: .1,
            use: [ActionType.Preserve],
            group: [ItemTypeGroup.Preservative, ItemTypeGroup.Powder],
            recipe: {
                components: [t(ItemType.Niter, 1, 1), t(ItemType.MortarAndPestle, 1, 0)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.BlackPowder] = {
            group: [ItemTypeGroup.Powder],
            recipe: {
                components: [t(ItemType.Saltpeter, 1, 1), t(ItemType.CarbonPowder, 1, 1), t(ItemType.MortarAndPestle, 1, 0)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Advanced,
                malignity: 50
            },
            onBurn: ItemType.None
        }, e.defines[ItemType.FlintlockPistol] = {
            weight: .9,
            group: [ItemTypeGroup.Weapon],
            durability: 40,
            use: [ActionType.Fire],
            equip: EquipType.Held,
            attack: 3,
            damageType: DamageType.Blunt,
            ranged: {
                range: 8,
                attack: 7
            },
            onBurn: ItemType.None,
            repairable: !1
        }, e.defines[ItemType.Giblets] = {
            group: [ItemTypeGroup.Compost, ItemTypeGroup.Meat, ItemTypeGroup.CookedMeat],
            use: [ActionType.Eat],
            onUse: [],
            recipe: {
                components: [t(ItemType.Offal, 1, 1), t(ItemTypeGroup.Skewer, 1, 0)],
                skill: SkillType.Cooking,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            decayMax: 1e3,
            decaysInto: ItemType.RottenMeat,
            onBurn: ItemType.None
        }, e.defines[ItemType.Giblets].onUse[ActionType.Eat] = [0, -1, 4, -1], e.defines[ItemType.ExplosiveTrap] = {
            group: [ItemTypeGroup.Trap],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.Leaves, 4, 4, 4), t(ItemType.IronIngot, 1, 1, 1), t(ItemType.BlackPowder, 1, 1, 1), t(ItemTypeGroup.Rock, 1, 1, 1)],
                skill: SkillType.Trapping,
                level: RecipeLevel.Expert,
                malignity: 25
            },
            disassemble: !0,
            durability: 5,
            onBurn: ItemType.None
        }, e.defines[ItemType.ExplosiveTrap].onUse[ActionType.Build] = DoodadType.SetExplosiveTrap, e.defines[ItemType.SkeletalMageWand] = {
            weight: .9,
            equip: EquipType.Held,
            attack: 3,
            damageType: DamageType.Blunt,
            use: [ActionType.Teleport],
            durability: 5,
            onBurn: ItemType.Charcoal,
            repairable: !1
        }, e.defines[ItemType.RawClayJug] = {
            reducedWeight: .5,
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.RawClay, 1, 1, 1)],
                skill: SkillType.Claythrowing,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            disassemble: !0
        }, e.defines[ItemType.ClayJug] = {
            reducedWeight: .5,
            use: [ActionType.GatherWater],
            recipe: {
                components: [t(ItemType.RawClayJug, 1, 1), t(ItemType.Cork, 1, 1)],
                skill: SkillType.Claythrowing,
                level: RecipeLevel.Expert,
                requiredDoodadType: DoodadType.LitKiln,
                malignity: -25
            },
            durability: 10,
            group: [ItemTypeGroup.Container]
        }, e.defines[ItemType.ClayJugOfSeawater] = {
            inheritWeight: ItemType.ClayJug,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            durability: 10,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ContainerOfSeawater],
            returnOnUse: [ItemType.ClayJug, !1],
            repairable: !1
        }, e.defines[ItemType.ClayJugOfSeawater].onUse[ActionType.Drink] = [0, -15, 1, -2], e.defines[ItemType.ClayJugOfDesalinatedWater] = {
            inheritWeight: ItemType.ClayJug,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            recipe: {
                baseComponent: ItemType.ClayJugOfSeawater,
                components: [t(ItemType.Flask, 1, 0)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            durability: 10,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ClayJugOfPotableWater, ItemTypeGroup.ContainerOfDesalinatedWater],
            returnOnUse: [ItemType.ClayJug, !1],
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.ClayJugOfDesalinatedWater].onUse[ActionType.Drink] = [2, 15, 1, 10], e.defines[ItemType.ClayJugOfMedicinalWater] = {
            inheritWeight: ItemType.ClayJug,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ContainerOfMedicinalWater],
            use: [ActionType.DrinkCure],
            onUse: [],
            recipe: {
                baseComponent: ItemTypeGroup.ClayJugOfPotableWater,
                components: [t(ItemTypeGroup.Medicinal, 2, 2)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            durability: 10,
            returnOnUse: [ItemType.ClayJug, !1],
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.ClayJugOfMedicinalWater].onUse[ActionType.DrinkCure] = [3, 8, 1, 9], e.defines[ItemType.ClayJugOfPurifiedFreshWater] = {
            inheritWeight: ItemType.ClayJug,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            recipe: {
                baseComponent: ItemType.ClayJugOfUnpurifiedFreshWater,
                components: [],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                requiresFire: !0,
                malignity: -25
            },
            durability: 10,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ClayJugOfPotableWater, ItemTypeGroup.ContainerOfPurifiedFreshWater],
            returnOnUse: [ItemType.ClayJug, !1],
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.ClayJugOfPurifiedFreshWater].onUse[ActionType.Drink] = [2, 15, 1, 10], e.defines[ItemType.ClayJugOfUnpurifiedFreshWater] = {
            inheritWeight: ItemType.ClayJug,
            use: [ActionType.Drink, ActionType.Pour, ActionType.PourOnYourself],
            onUse: [],
            recipe: {
                baseComponent: ItemType.ClayJug,
                components: [t(ItemType.PileOfSnow, 1, 1)],
                skill: SkillType.Chemistry,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            durability: 10,
            group: [ItemTypeGroup.Water, ItemTypeGroup.ContainerOfUnpurifiedFreshWater],
            returnOnUse: [ItemType.ClayJug, !1],
            keepDurabilityOnCraft: !0,
            repairable: !1
        }, e.defines[ItemType.ClayJugOfUnpurifiedFreshWater].onUse[ActionType.Drink] = [-4, 8, 1, 8], e.defines[ItemType.RawClayBrick] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.RawClay, 1, 1, 1)],
                skill: SkillType.Claythrowing,
                level: RecipeLevel.Simple,
                malignity: -25
            },
            disassemble: !0,
            onBurn: ItemType.ClayBrick
        }, e.defines[ItemType.ClayBrick] = {
            reducedWeight: .5,
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.RawClayBrick, 1, 1)],
                skill: SkillType.Claythrowing,
                level: RecipeLevel.Intermediate,
                requiredDoodadType: DoodadType.LitKiln,
                malignity: -25
            }
        }, e.defines[ItemType.ClayBrickWall] = {
            use: [ActionType.Build],
            group: [ItemTypeGroup.Housing],
            onUse: [],
            recipe: {
                components: [t(ItemType.ClayBrick, 8, 8, 8)],
                skill: SkillType.Claythrowing,
                level: RecipeLevel.Advanced,
                malignity: 25
            },
            disassemble: !0,
            durability: 15
        }, e.defines[ItemType.ClayBrickWall].onUse[ActionType.Build] = DoodadType.ClayBrickWall, e.defines[ItemType.ClayBrickFlooring] = {
            use: [ActionType.SetDown],
            group: [ItemTypeGroup.Housing],
            onUse: [],
            recipe: {
                components: [t(ItemType.ClayBrick, 8, 8, 8)],
                skill: SkillType.Claythrowing,
                level: RecipeLevel.Intermediate,
                malignity: 25
            },
            disassemble: !0,
            durability: 15
        }, e.defines[ItemType.ClayBrickFlooring].onUse[ActionType.SetDown] = TerrainType.ClayBrickFlooring, e.defines[ItemType.PineappleSeeds] = {
            weight: .1,
            use: [ActionType.Plant, ActionType.Eat],
            skillUse: SkillType.Botany,
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.PineappleSeeds].onUse[ActionType.Plant] = DoodadType.PineapplePlant, e.defines[ItemType.PineappleSeeds].onUse[ActionType.Eat] = [1, 1, 1, -1], e.defines[ItemType.BerrySeeds] = {
            weight: .1,
            use: [ActionType.Plant, ActionType.Eat],
            skillUse: SkillType.Botany,
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.BerrySeeds].onUse[ActionType.Plant] = DoodadType.BerryBush, e.defines[ItemType.BerrySeeds].onUse[ActionType.Eat] = [1, 1, 1, -1], e.defines[ItemType.CactiSeeds] = {
            weight: .1,
            use: [ActionType.Plant, ActionType.Eat],
            skillUse: SkillType.Botany,
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.CactiSeeds].onUse[ActionType.Plant] = DoodadType.Cacti, e.defines[ItemType.CactiSeeds].onUse[ActionType.Eat] = [1, 1, 1, -1], e.defines[ItemType.VineSeeds] = {
            weight: .1,
            use: [ActionType.Plant, ActionType.Eat],
            skillUse: SkillType.Botany,
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.VineSeeds].onUse[ActionType.Plant] = DoodadType.Vines, e.defines[ItemType.VineSeeds].onUse[ActionType.Eat] = [1, 1, 1, -1], e.defines[ItemType.PaperSheet] = {
            group: [ItemTypeGroup.Other],
            use: [ActionType.DrawMap],
            recipe: {
                components: [t(ItemType.PaperMold, 1, 0), t(ItemTypeGroup.Pulp, 2, 2), t(ItemTypeGroup.Water, 1, 0)],
                skill: SkillType.Cartography,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            durability: 25,
            onBurn: ItemType.None
        }, e.defines[ItemType.PaperMold] = {
            group: [ItemTypeGroup.Other],
            recipe: {
                components: [t(ItemType.Log, 2, 2, 1), t(ItemTypeGroup.Cordage, 8, 8, 8), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            durability: 20,
            disassemble: !0,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.FlowerPetals] = {
            weight: .1,
            group: [ItemTypeGroup.Medicinal],
            use: [ActionType.Eat],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.FlowerPetals].onUse[ActionType.Eat] = [1, 1, 1, -1], e.defines[ItemType.Thistles] = {
            weight: .2,
            group: [ItemTypeGroup.Medicinal],
            use: [ActionType.Eat],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.Thistles].onUse[ActionType.Eat] = [1, 1, 1, 1], e.defines[ItemType.DrawnMap] = {
            weight: .2,
            durability: 25,
            use: [ActionType.Decode],
            onBurn: ItemType.None,
            repairable: !1
        }, e.defines[ItemType.TatteredShirt] = {
            group: [ItemTypeGroup.Equipment],
            durability: 15,
            equip: EquipType.Chest,
            onBurn: ItemType.None,
            recipe: {
                components: [t(ItemType.CottonFabric, 1, 1, 1)],
                skill: SkillType.Tailoring,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            defense: new Defense(1, new Resistances, new Vulnerabilities(DamageType.Fire, 2, DamageType.Piercing, 1, DamageType.Blunt, 1, DamageType.Slashing, 1)),
            disassemble: !0,
            craftable: !1
        }, e.defines[ItemType.TatteredPants] = {
            group: [ItemTypeGroup.Equipment],
            durability: 15,
            equip: EquipType.Legs,
            onBurn: ItemType.None,
            recipe: {
                components: [t(ItemType.CottonFabric, 1, 1, 1)],
                skill: SkillType.Tailoring,
                level: RecipeLevel.Intermediate,
                malignity: -25
            },
            defense: new Defense(1, new Resistances, new Vulnerabilities(DamageType.Fire, 2, DamageType.Piercing, 1, DamageType.Blunt, 1, DamageType.Slashing, 1)),
            disassemble: !0,
            craftable: !1
        }, e.defines[ItemType.WoodenGate] = {
            group: [ItemTypeGroup.Housing],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.Log, 3, 3), t(ItemTypeGroup.Sharpened, 1, 0)],
                skill: SkillType.Woodworking,
                level: RecipeLevel.Expert,
                malignity: -25
            },
            durability: 10,
            onBurn: ItemType.Charcoal
        }, e.defines[ItemType.WoodenGate].onUse[ActionType.Build] = DoodadType.WoodenGate, e.defines[ItemType.PoisonIvyLeaves] = {
            weight: .1,
            group: [ItemTypeGroup.Compost],
            use: [ActionType.Eat, ActionType.StokeFire],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.PoisonIvyLeaves].onUse[ActionType.Eat] = [-3, -2, 1, -2], e.defines[ItemType.PoisonIvyLeaves].onUse[ActionType.StokeFire] = 2, e.defines[ItemType.PoisonIvySeeds] = {
            weight: .1,
            use: [ActionType.Eat, ActionType.Plant],
            skillUse: SkillType.Botany,
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.PoisonIvySeeds].onUse[ActionType.Plant] = DoodadType.PoisonIvy, e.defines[ItemType.PoisonIvySeeds].onUse[ActionType.Eat] = [-2, -1, 1, -1], e.defines[ItemType.WroughtIronChest] = {
            group: [ItemTypeGroup.Storage],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.WroughtIron, 5, 5, 5), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Advanced,
                malignity: -25
            },
            durability: 25,
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer],
            doodadContainer: DoodadType.WroughtIronChest
        }, e.defines[ItemType.WroughtIronChest].onUse[ActionType.Build] = DoodadType.WroughtIronChest, e.defines[ItemType.IronChest] = {
            group: [ItemTypeGroup.Storage],
            use: [ActionType.Build],
            onUse: [],
            recipe: {
                components: [t(ItemType.TalcumPowder, 1, 1, 0, !0), t(ItemType.IronIngot, 5, 5, 5), t(ItemType.SandCastFlask, 1, 0), t(ItemTypeGroup.Hammer, 1, 0)],
                skill: SkillType.Blacksmithing,
                level: RecipeLevel.Expert,
                requiredDoodadType: DoodadType.LitForgeAndAnvil,
                malignity: -25
            },
            durability: 50,
            disassemble: !0,
            requiredForDisassembly: [ItemTypeGroup.Hammer, ItemType.SandCastFlask],
            doodadContainer: DoodadType.IronChest
        }, e.defines[ItemType.IronChest].onUse[ActionType.Build] = DoodadType.IronChest, e.defines[ItemType.TallGrassSeeds] = {
            weight: .1,
            use: [ActionType.Plant, ActionType.Eat],
            onUse: [],
            onBurn: ItemType.None
        }, e.defines[ItemType.TallGrassSeeds].onUse[ActionType.Plant] = DoodadType.TallGrass, e.defines[ItemType.TallGrassSeeds].onUse[ActionType.Eat] = [1, 1, 1, -1], e.defines[ItemType.Acorn] = {
            use: [ActionType.Eat, ActionType.Plant],
            onUse: [],
            weight: .2,
            onBurn: ItemType.None
        }, e.defines[ItemType.Acorn].onUse[ActionType.Eat] = [-1, -1, 1, -1], e.defines[ItemType.Acorn].onUse[ActionType.Plant] = DoodadType.Sapling, e.defines[ItemType.SpiderEggs] = {
            decaysInto: ItemType.SpiderSilk,
            decaySpawn: MonsterType.GiantSpider,
            use: [ActionType.Eat],
            onUse: [],
            weight: .3,
            onBurn: ItemType.None,
            decayMax: 3e3
        }, e.defines[ItemType.SpiderEggs].onUse[ActionType.Eat] = [-1, -2, 2, -1], e.defines[ItemType.TailFeathers] = {
            weight: .5,
            onBurn: ItemType.None,
            dismantle: {
                items: [ItemType.Feather, ItemType.Feather, ItemType.Feather, ItemType.Feather, ItemType.Feather]
            }
        }, e.defines[ItemType.BigRedBerry] = {
            weight: .5,
            use: [ActionType.Eat],
            skillUse: SkillType.Botany,
            onUse: [],
            decayMax: 16e3,
            decaysInto: ItemType.RottingVegetation,
            group: [ItemTypeGroup.Food],
            returnOnUse: [ItemType.BerrySeeds, !0],
            onBurn: ItemType.None
        }, e.defines[ItemType.BigRedBerry].onUse[ActionType.Eat] = [2, 4, 5, 1], e.defines[ItemType.VenomGland] = {
            weight: .1,
            use: [ActionType.Eat],
            skillUse: SkillType.Anatomy,
            onUse: [],
            decayMax: 4750,
            group: [ItemTypeGroup.Medicinal],
            onBurn: ItemType.None
        }, e.defines[ItemType.VenomGland].onUse[ActionType.Eat] = [-10, -20, 1, 0], e.defines[ItemType.OrnateWoodenChest] = {
            weight: 18,
            group: [ItemTypeGroup.Storage],
            use: [ActionType.Build],
            onUse: [],
            onBurn: ItemType.Charcoal,
            durability: 25,
            doodadContainer: DoodadType.OrnateWoodenChest
        }, e.defines[ItemType.OrnateWoodenChest].onUse[ActionType.Build] = DoodadType.OrnateWoodenChest, e.defines[ItemType.RollOfRedCarpet] = {
            weight: 2.5,
            group: [ItemTypeGroup.Housing],
            use: [ActionType.SetDown],
            onUse: [],
            durability: 15,
            onBurn: ItemType.None
        }, e.defines[ItemType.RollOfRedCarpet].onUse[ActionType.SetDown] = TerrainType.RedCarpet, e.defines[ItemType.OrnateCape] = {
            weight: .3,
            durability: 20,
            group: [ItemTypeGroup.Equipment],
            equip: EquipType.Back,
            onBurn: ItemType.None,
            defense: new Defense(1, new Resistances, new Vulnerabilities(DamageType.Fire, 2))
        }, e.defines[ItemType.FireBladder] = {
            weight: .8,
            onBurn: ItemType.None,
            use: [ActionType.Squeeze],
            decayMax: 1e3,
            decaysInto: ItemType.RottenMeat
        }, e.defines[ItemType.GoldenKey] = {
            weight: 1,
            group: [ItemTypeGroup.Treasure],
            onBurn: ItemType.None
        };
    for (var a = ItemTypeGroup.Invalid + 1; a < ItemTypeGroup.Last; a++) e.groups[a] = {
        name: "",
        types: new Array
    };
    e.generateLookups = i, e.actionDescriptions[ActionType.Rest] = {}, e.actionDescriptions[ActionType.Sleep] = {}, e.actionDescriptions[ActionType.Eat] = {}, e.actionDescriptions[ActionType.Drink] = {}, e.actionDescriptions[ActionType.Carve] = {}, e.actionDescriptions[ActionType.Dig] = {}, e.actionDescriptions[ActionType.Cast] = {}, e.actionDescriptions[ActionType.Shoot] = {}, e.actionDescriptions[ActionType.SetDown] = {}, e.actionDescriptions[ActionType.Sling] = {}, e.actionDescriptions[ActionType.Paddle] = {}, e.actionDescriptions[ActionType.StartFire] = {}, e.actionDescriptions[ActionType.GatherWater] = {}, e.actionDescriptions[ActionType.LockPick] = {}, e.actionDescriptions[ActionType.Repair] = {}, e.actionDescriptions[ActionType.Heal] = {}, e.actionDescriptions[ActionType.TraverseTheSea] = {}, e.actionDescriptions[ActionType.Decode] = {}, e.actionDescriptions[ActionType.Ignite] = {}, e.actionDescriptions[ActionType.Read] = {}, e.actionDescriptions[ActionType.Reinforce] = {}, e.actionDescriptions[ActionType.OpenContainer] = {}, e.actionDescriptions[ActionType.Open] = {}, e.actionDescriptions[ActionType.DrinkCure] = {}, e.actionDescriptions[ActionType.TellTime] = {}, e.actionDescriptions[ActionType.Transmogrify] = {}, e.actionDescriptions[ActionType.StokeFire] = {}, e.actionDescriptions[ActionType.Pour] = {}, e.actionDescriptions[ActionType.Plant] = {}, e.actionDescriptions[ActionType.Garden] = {}, e.actionDescriptions[ActionType.Build] = {}, e.actionDescriptions[ActionType.GatherTreasure] = {}, e.actionDescriptions[ActionType.SailToCivilization] = {}, e.actionDescriptions[ActionType.Preserve] = {}, e.actionDescriptions[ActionType.Fire] = {}, e.actionDescriptions[ActionType.Gather] = {}, e.actionDescriptions[ActionType.Teleport] = {}, e.actionDescriptions[ActionType.Extinguish] = {}, e.actionDescriptions[ActionType.DrawMap] = {}, e.lootGroup[LootGroupType.Low] = [ItemType.StoneAxe, ItemType.WoodenSpear, ItemType.BarkTunic, ItemType.BarkLeggings, ItemType.BarkShield, ItemType.Skullcap, ItemType.LeatherHide, ItemType.String, ItemType.StoneShovel, ItemType.MessageInABottle, ItemType.OldInstructionalScroll, ItemType.TatteredMap, ItemType.Tourniquet, ItemType.WovenFabric, ItemType.SmallBag, ItemType.Bow, ItemType.Amber, ItemType.Fossil, ItemType.StoneHammer, ItemType.LockPick, ItemType.Waterskin, ItemType.WoodenArrow, ItemType.StoneBullet, ItemType.CordedSling], e.lootGroup[LootGroupType.High] = [ItemType.GoldCoins, ItemType.Rope, ItemType.Spyglass, ItemType.LeatherBelt, ItemType.LeatherCap, ItemType.LeatherBoots, ItemType.LeatherGorget, ItemType.LeatherPants, ItemType.LeatherTunic, ItemType.LeatherGloves, ItemType.StoneSpear, ItemType.TatteredMap, ItemType.OldInstructionalScroll, ItemType.BarkTorch, ItemType.CottonFabric, ItemType.Backpack, ItemType.Suture, ItemType.Bandage, ItemType.TannedLeather, ItemType.Arrow, ItemType.GlassBottle], e.lootGroup[LootGroupType.CaveChest] = [ItemType.GoldenRing, ItemType.GoldCoins, ItemType.WroughtIron, ItemType.AnimalFatTorch, ItemType.OldInstructionalScroll, ItemType.TatteredMap, ItemType.IronOre, ItemType.Limestone, ItemType.Niter, ItemType.Talc, ItemType.WroughtIronPickaxe, ItemType.WroughtIronShovel, ItemType.WroughtIronHammer, ItemType.WroughtIronLockPick, ItemType.WroughtIronTongs, ItemType.WroughtIronBullet, ItemType.WroughtIronArrow, ItemType.LeatherBelt, ItemType.LeatherCap, ItemType.LeatherBoots, ItemType.LeatherGorget, ItemType.LeatherPants, ItemType.LeatherTunic, ItemType.LeatherGloves, ItemType.RollOfRedCarpet, ItemType.OrnateCape], e.lootGroup[LootGroupType.Treasure] = [ItemType.GoldenRing, ItemType.GoldenChalice, ItemType.GoldCoins, ItemType.WroughtIron, ItemType.AnimalFatTorch, ItemType.OldInstructionalScroll, ItemType.TatteredMap, ItemType.IronOre, ItemType.Limestone, ItemType.Niter, ItemType.Talc, ItemType.IronIngot, ItemType.WroughtIronBoots, ItemType.WroughtIronHelmet, ItemType.WroughtIronGorget, ItemType.WroughtIronGauntlets, ItemType.WroughtIronGreaves, ItemType.WroughtIronShield, ItemType.WroughtIronPickaxe, ItemType.WroughtIronDoubleAxe, ItemType.WroughtIronShovel, ItemType.WroughtIronSpear, ItemType.WroughtIronHammer, ItemType.WroughtIronLockPick, ItemType.WroughtIronTongs, ItemType.WroughtIronBreastPlate, ItemType.WroughtIronSword, ItemType.WroughtIronBullet, ItemType.WroughtIronArrow, ItemType.FlintlockPistol, ItemType.RollOfRedCarpet], e.lootGroup[LootGroupType.SeaTreasure] = [ItemType.MessageInABottle, ItemType.Seaweed, ItemType.LeatherBoots, ItemType.FishingNet, ItemType.FishingRod, ItemType.GoldCoins, ItemType.TatteredMap, ItemType.GoldenSword]
}(Item || (Item = {}));
var MilestoneType;
! function(e) {
    e[e.Abnormalizer = 0] = "Abnormalizer", e[e.Chef = 1] = "Chef", e[e.Extincteur = 2] = "Extincteur", e[e.Crafter = 3] = "Crafter", e[e.Gardener = 4] = "Gardener", e[e.Gatherer = 5] = "Gatherer", e[e.Hunter = 6] = "Hunter", e[e.Locksmith = 7] = "Locksmith", e[e.ReaperOfSouls = 8] = "ReaperOfSouls", e[e.Survivor = 9] = "Survivor", e[e.Thrower = 10] = "Thrower", e[e.Trapper = 11] = "Trapper", e[e.TreasureHunter = 12] = "TreasureHunter", e[e.Collector = 13] = "Collector", e[e.Explorer = 14] = "Explorer", e[e.Grandmaster = 15] = "Grandmaster", e[e.Prepared = 16] = "Prepared", e[e.Doctor = 17] = "Doctor", e[e.Artificer = 18] = "Artificer", e[e.Seafarer = 19] = "Seafarer", e[e.Navigator = 20] = "Navigator", e[e.DragonSlayer = 21] = "DragonSlayer", e[e.Treasurer = 22] = "Treasurer"
}(MilestoneType || (MilestoneType = {}));
var MilestoneVisibilityType;
! function(e) {
    e[e.Visible = 0] = "Visible", e[e.Invisibile = 1] = "Invisibile", e[e.Hidden = 2] = "Hidden"
}(MilestoneVisibilityType || (MilestoneVisibilityType = {}));
var MilestoneDataType;
! function(e) {
    e[e.Counter = 0] = "Counter", e[e.Check = 1] = "Check"
}(MilestoneDataType || (MilestoneDataType = {}));
var milestones = Array(),
    milestoneData = Array();
milestones[MilestoneType.Abnormalizer] = {
    amount: 25,
    skills: [SkillType.Tactics, SkillType.Parrying, SkillType.Trapping, SkillType.Archery],
    visibility: MilestoneVisibilityType.Invisibile
}, milestones[MilestoneType.Chef] = {
    amount: 25,
    skills: [SkillType.Cooking]
}, milestones[MilestoneType.Crafter] = {
    amount: 250,
    skills: [SkillType.Tinkering, SkillType.Fletching, SkillType.Woodworking, SkillType.Blacksmithing, SkillType.Stonecrafting, SkillType.Tailoring, SkillType.Leatherworking, SkillType.Claythrowing, SkillType.Glassblowing, SkillType.Cooking]
}, milestones[MilestoneType.Extincteur] = {
    amount: 1e3,
    skills: [SkillType.Tactics, SkillType.Parrying, SkillType.Trapping, SkillType.Archery]
}, milestones[MilestoneType.Gardener] = {
    amount: 50,
    skills: [SkillType.Botany, SkillType.Mycology]
}, milestones[MilestoneType.Gatherer] = {
    amount: 1e3,
    skills: [SkillType.Mining, SkillType.Lumberjacking, SkillType.Fishing]
}, milestones[MilestoneType.Hunter] = {
    amount: 100,
    skills: [SkillType.Tactics, SkillType.Parrying, SkillType.Trapping, SkillType.Archery]
}, milestones[MilestoneType.Locksmith] = {
    amount: 10,
    skills: [SkillType.LockPicking]
}, milestones[MilestoneType.ReaperOfSouls] = {
    amount: 50,
    visibility: MilestoneVisibilityType.Invisibile
}, milestones[MilestoneType.Survivor] = {
    amount: 1e4,
    skills: [SkillType.Swimming, SkillType.Camping, SkillType.Anatomy]
}, milestones[MilestoneType.Thrower] = {
    amount: 500,
    skills: [SkillType.Throwing]
}, milestones[MilestoneType.Trapper] = {
    amount: 10,
    skills: [SkillType.Trapping]
}, milestones[MilestoneType.TreasureHunter] = {
    amount: 10,
    skills: [SkillType.Cartography, SkillType.Mining, SkillType.Fishing]
}, milestones[MilestoneType.Collector] = {
    amount: Item.defines.length,
    dataType: MilestoneDataType.Counter
}, milestones[MilestoneType.Explorer] = {
    amount: terrains.length,
    dataType: MilestoneDataType.Counter
}, milestones[MilestoneType.Grandmaster] = {
    amount: 100,
    dataType: MilestoneDataType.Check
}, milestones[MilestoneType.Prepared] = {
    amount: 10,
    dataType: MilestoneDataType.Counter
}, milestones[MilestoneType.Doctor] = {
    amount: 3,
    dataType: MilestoneDataType.Counter
}, milestones[MilestoneType.Artificer] = {
    amount: 1,
    visibility: MilestoneVisibilityType.Hidden
}, milestones[MilestoneType.Seafarer] = {
    amount: 1,
    visibility: MilestoneVisibilityType.Hidden
}, milestones[MilestoneType.Navigator] = {
    amount: 1,
    visibility: MilestoneVisibilityType.Hidden
}, milestones[MilestoneType.DragonSlayer] = {
    amount: 1,
    visibility: MilestoneVisibilityType.Invisibile
}, milestones[MilestoneType.Treasurer] = {
    amount: 5,
    dataType: MilestoneDataType.Counter,
    visibility: MilestoneVisibilityType.Invisibile
}, milestoneData[MilestoneType.Abnormalizer] = {
    amount: 0
}, milestoneData[MilestoneType.Chef] = {
    amount: 0
}, milestoneData[MilestoneType.Crafter] = {
    amount: 0
}, milestoneData[MilestoneType.Extincteur] = {
    amount: 0
}, milestoneData[MilestoneType.Gardener] = {
    amount: 0
}, milestoneData[MilestoneType.Gatherer] = {
    amount: 0
}, milestoneData[MilestoneType.Hunter] = {
    amount: 0
}, milestoneData[MilestoneType.Locksmith] = {
    amount: 0
}, milestoneData[MilestoneType.ReaperOfSouls] = {
    amount: 0
}, milestoneData[MilestoneType.Survivor] = {
    amount: 0
}, milestoneData[MilestoneType.Thrower] = {
    amount: 0
}, milestoneData[MilestoneType.Trapper] = {
    amount: 0
}, milestoneData[MilestoneType.TreasureHunter] = {
    amount: 0
}, milestoneData[MilestoneType.Collector] = {
    amount: 0,
    data: []
}, milestoneData[MilestoneType.Explorer] = {
    amount: 0,
    data: []
}, milestoneData[MilestoneType.Grandmaster] = {
    amount: 0
}, milestoneData[MilestoneType.Prepared] = {
    amount: 0,
    data: []
}, milestoneData[MilestoneType.Doctor] = {
    amount: 0,
    data: []
}, milestoneData[MilestoneType.Artificer] = {
    amount: 0
}, milestoneData[MilestoneType.Seafarer] = {
    amount: 0
}, milestoneData[MilestoneType.Navigator] = {
    amount: 0
}, milestoneData[MilestoneType.DragonSlayer] = {
    amount: 0
}, milestoneData[MilestoneType.Treasurer] = {
    amount: 0,
    data: []
};
var Languages;
! function(Languages) {
    function add(e) {
        languages.push(e)
    }

    function remove(e) {
        for (var t = 0; t < languages.length; t++) languages[t].getName() === e && languages.splice(t, 1)
    }

    function addTranslateSelector(e, t, i, a, n) {
        uiTranslationsToSelector[e] = {
            selector: t,
            html: a,
            attribute: i,
            func: n
        }
    }

    function getLanguages() {
        return languages
    }

    function getLoaded() {
        return languages[loaded]
    }

    function reload() {
        load(languages[loaded].getName())
    }

    function refreshUiTranslation(e) {
        var t = getLoaded().getDictionary(Dictionary.Ui),
            i = uiTranslationsToSelector[e],
            a = t[e];
        if (!a) return void Utilities.Console.warn(Source.Languages, "Missing entry for UiTranslation " + UiTranslation[e].toString() + " in language " + getLoaded().getName());
        var n;
        n = "object" == typeof i.selector ? i.selector : [i.selector];
        for (var o = 0; o < n.length; o++) {
            var r = $(n[o]);
            if (0 !== r.length) {
                var s = a.name;
                if (i.func && (s = i.func(s)), i.attribute) {
                    if ("title" === i.attribute) try {
                        r.dialog("option", "title", s);
                        continue
                    } catch (l) {}
                    r.attr(i.attribute, s)
                } else if (i.html) {
                    for (var p = s.split(","), d = "", u = 0; u < p.length; u++) d += "<li>" + p[u] + "</li>";
                    r.html(d)
                } else r.text(s)
            } else "EnableHints" !== UiTranslation[e] && "DisableHints" !== UiTranslation[e] && Utilities.Console.warn(Source.Languages, "Invalid selector for UiTranslation " + UiTranslation[e].toString() + " in language " + getLoaded().getName() + ", " + n.join(","))
        }
    }

    function shouldWarn(e) {
        return !("Max" === e || "OfficialMax" === e || "ModStart" === e)
    }

    function evalString(str) {
        for (var regex = /\{.*?\}/g, matches = [], matchArray = regex.exec(str); null !== matchArray;) matches.push(matchArray), matchArray = regex.exec(str);
        if (matches.length > 0)
            for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
                var match = matches_1[_i],
                    matchedString = match[0];
                str = str.replace(matchedString, eval(matchedString))
            }
        return str
    }

    function load(e) {
        var t, i = null;
        for ("English" !== e && load("English"), t = 0; t < languages.length; t++)
            if (languages[t].getName() === e) {
                i = languages[t];
                break
            }
        if (!i) return Utilities.Console.error(Source.Languages, "Failed to load language", e), !1;
        loaded = t;
        var a, n, o, r = i.getDictionary(Dictionary.ItemTypes),
            s = i.getDictionary(Dictionary.Doodads),
            l = i.getDictionary(Dictionary.ActionTypes),
            p = i.getDictionary(Dictionary.Messages),
            d = i.getDictionary(Dictionary.Terrains),
            u = i.getDictionary(Dictionary.Monsters),
            g = i.getDictionary(Dictionary.Corpses),
            m = i.getDictionary(Dictionary.Skills),
            y = i.getDictionary(Dictionary.Milestones),
            c = i.getDictionary(Dictionary.Hints),
            h = i.getDictionary(Dictionary.TileEvents),
            T = i.getDictionary(Dictionary.OnEquipTypes);
        if ("English" === e)
            for (n = Object.keys(Message), t = 0; t < n.length; t++) isNaN(n[t]) || (a = parseInt(n[t], 10), 0 !== a && (o = p[a], o ? messages[a] = o.name : a !== Message.None && shouldWarn(Message[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for messages Message " + Message[a] + " in language " + e)));
        else
            for (n = Object.keys(p), t = 0; t < n.length; t++)
                if (!isNaN(n[t])) {
                    a = parseInt(n[t], 10);
                    var f = p[a];
                    f && (messages[a] = f.name)
                } for (i.useAlternateFontStyle() && game.options.fontStyle && (game.options.fontStyle = !1, ui.setFontStyle()), n = Object.keys(uiTranslationsToSelector), t = 0; t < n.length; t++) refreshUiTranslation(parseInt(n[t], 10));
        for (n = Object.keys(Item.defines), t = 0; t < n.length; t++)
            if (a = parseInt(n[t], 10), o = r[a]) {
                var v = Item.defines[a];
                v.name = o.name, v.description = o.description, v.prefix = o.prefix
            } else shouldWarn(ItemType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for items ItemType " + ItemType[a] + " in language " + e);
        for (n = Object.keys(Item.groups), t = 0; t < n.length; t++) a = parseInt(n[t], 10), o = r[a], o ? (Item.groups[a].name = o.name, Item.groups[a].prefix = o.prefix, Item.groups[a].suffix = o.suffix) : shouldWarn(ItemTypeGroup[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for groups ItemType " + ItemTypeGroup[a] + " in language " + e);
        for (n = Object.keys(Doodad.defines), t = 0; t < n.length; t++) a = parseInt(n[t], 10), o = s[a], o ? (Doodad.defines[a].name = o.name, Doodad.defines[a].prefix = o.prefix) : shouldWarn(DoodadType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for doodad DoodadType " + DoodadType[a] + " in language " + e);
        for (n = Object.keys(ActionType), t = 0; t < n.length; t++)
            if (!isNaN(n[t]))
                if (a = parseInt(n[t], 10), o = l[a]) {
                    var I = Item.actionDescriptions[a];
                    I || (I = Item.actionDescriptions[a] = {}), I.name = o.name, I.description = o.description
                } else shouldWarn(ActionType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for ActionType " + ActionType[a] + " in language " + e);
        for (n = Object.keys(terrains), t = 0; t < n.length; t++) a = parseInt(n[t], 10), o = d[a], o ? (terrains[a].name = o.name, terrains[a].prefix = o.prefix) : shouldWarn(MonsterType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for terrains TerrainType " + TerrainType[a] + " in language " + e);
        for (n = Object.keys(monsters), t = 0; t < n.length; t++) a = parseInt(n[t], 10), o = u[a], o ? (monsters[a].name = o.name, monsters[a].prefix = o.prefix) : shouldWarn(MonsterType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for monsters MonsterType " + MonsterType[a] + " in language " + e);
        for (n = Object.keys(corpses), t = 0; t < n.length; t++) a = parseInt(n[t], 10), o = g[a], o ? (corpses[a].name = o.name, corpses[a].prefix = o.prefix) : monsters[a] ? corpses[a].name = game.getName(monsters[a]) + " " + messages[Message.Corpse] : MonsterType[a] ? corpses[a].name = MonsterType[a].toString() : shouldWarn(MonsterType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry with corpse for monster type " + MonsterType[a] + " in language " + e);
        for (n = Object.keys(skillDescriptions), t = 0; t < n.length; t++)
            if (a = parseInt(n[t], 10), o = m[a]) {
                var S = skillDescriptions[a];
                S.name = o.name, S.description = o.description
            } else shouldWarn(SkillType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for skillDescriptions SkillType " + SkillType[a] + " in language " + e);
        for (n = Object.keys(milestones), t = 0; t < n.length; t++)
            if (a = parseInt(n[t], 10), o = y[a]) {
                var M = milestones[a];
                M.name = o.name, M.description = o.description
            } else shouldWarn(MilestoneType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for milestones MilestoneType " + MilestoneType[a] + " in language " + e);
        for (n = Object.keys(hints), t = 0; t < n.length; t++)
            if (a = parseInt(n[t], 10), o = c[a]) {
                var k = hints[a];
                k.name = o.name, k.description = o.description
            } else shouldWarn(HintType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for hints HintType " + HintType[a] + " in language " + e);
        for (n = Object.keys(TileEvent.tileEvents), t = 0; t < n.length; t++) a = parseInt(n[t], 10), o = h[a], o ? TileEvent.tileEvents[a].name = o.name : shouldWarn(DoodadType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for tileEvents DoodadType " + DoodadType[a] + " in language " + e);
        for (n = Object.keys(onEquipTypes), t = 0; t < n.length; t++) a = parseInt(n[t], 10), o = T[a], o ? onEquipTypes[a] = o.name : shouldWarn(OnEquipType[a]) && Utilities.Console.warn(Source.Languages, "Missing entry for OnEquipType " + OnEquipType[a] + " in language " + e);
        return !0
    }
    var languages = [],
        loaded;
    Languages.saveData = {
            language: null
        },
        function(e) {
            e[e.Bleeding = 0] = "Bleeding", e[e.Burned = 1] = "Burned", e[e.Dehydrated = 2] = "Dehydrated", e[e.DisableHints = 3] = "DisableHints", e[e.EnableHints = 4] = "EnableHints", e[e.Encumbered = 5] = "Encumbered", e[e.EquipmentBack = 6] = "EquipmentBack", e[e.EquipmentBelt = 7] = "EquipmentBelt", e[e.EquipmentChest = 8] = "EquipmentChest", e[e.EquipmentFeet = 9] = "EquipmentFeet", e[e.EquipmentHands = 10] = "EquipmentHands", e[e.EquipmentHead = 11] = "EquipmentHead", e[e.EquipmentLeftHand = 12] = "EquipmentLeftHand", e[e.EquipmentLegs = 13] = "EquipmentLegs", e[e.EquipmentNeck = 14] = "EquipmentNeck", e[e.EquipmentRightHand = 15] = "EquipmentRightHand", e[e.Exhausted = 16] = "Exhausted", e[e.Health = 17] = "Health", e[e.Healthy = 18] = "Healthy", e[e.HudActions = 19] = "HudActions", e[e.HudCrafting = 20] = "HudCrafting", e[e.HudEquipment = 21] = "HudEquipment", e[e.HudFilter = 22] = "HudFilter", e[e.HudHelp = 23] = "HudHelp", e[e.HudInventory = 24] = "HudInventory", e[e.HudMessages = 25] = "HudMessages", e[e.HudMilestones = 26] = "HudMilestones", e[e.HudOptions = 27] = "HudOptions", e[e.HudSave = 28] = "HudSave", e[e.HudSkills = 29] = "HudSkills", e[e.HudTitleScreen = 30] = "HudTitleScreen", e[e.Hunger = 31] = "Hunger", e[e.Malignity = 32] = "Malignity", e[e.MenuAbout = 33] = "MenuAbout", e[e.MenuAboutCredits = 34] = "MenuAboutCredits",
                e[e.MenuAboutDonators = 35] = "MenuAboutDonators", e[e.MenuAboutIntro = 36] = "MenuAboutIntro", e[e.MenuAboutLibraries = 37] = "MenuAboutLibraries", e[e.MenuAboutLibrariesIntro = 38] = "MenuAboutLibrariesIntro", e[e.MenuAboutMessage = 39] = "MenuAboutMessage", e[e.MenuAboutThanks = 40] = "MenuAboutThanks", e[e.MenuAboutThanksIntro = 41] = "MenuAboutThanksIntro", e[e.MenuDailyChallenge = 42] = "MenuDailyChallenge", e[e.MenuDeleteAllGameData = 43] = "MenuDeleteAllGameData", e[e.MenuDeleteGame = 44] = "MenuDeleteGame", e[e.MenuEditGame = 45] = "MenuEditGame", e[e.MenuEndGameDead = 46] = "MenuEndGameDead", e[e.MenuEndGameWon = 47] = "MenuEndGameWon", e[e.MenuExportGame = 48] = "MenuExportGame", e[e.MenuExportSave = 49] = "MenuExportSave", e[e.MenuImportGame = 50] = "MenuImportGame", e[e.MenuImportSave = 51] = "MenuImportSave", e[e.MenuManageMods = 52] = "MenuManageMods", e[e.MenuManageModsInternal = 53] = "MenuManageModsInternal", e[e.MenuManageModsLocal = 54] = "MenuManageModsLocal", e[e.MenuManageModsMessage = 55] = "MenuManageModsMessage", e[e.MenuManageModsPublishMod = 56] = "MenuManageModsPublishMod", e[e.MenuManageModsUninstallMod = 57] = "MenuManageModsUninstallMod", e[e.MenuManageModsViewInSteamWorkshop = 58] = "MenuManageModsViewInSteamWorkshop", e[e.MenuManageModsWorkshop = 59] = "MenuManageModsWorkshop", e[e.MenuModdingGuide = 60] = "MenuModdingGuide", e[e.MenuNoHighscores = 61] = "MenuNoHighscores", e[e.MenuNoMods = 62] = "MenuNoMods", e[e.MenuOpenLogsFolder = 63] = "MenuOpenLogsFolder", e[e.MenuOpenModsFolder = 64] = "MenuOpenModsFolder", e[e.MenuOptions = 65] = "MenuOptions", e[e.MenuOptionsMessage = 66] = "MenuOptionsMessage", e[e.MenuPlayGame = 67] = "MenuPlayGame", e[e.MenuPlayGameMessage = 68] = "MenuPlayGameMessage", e[e.MenuPlayGameNewGame = 69] = "MenuPlayGameNewGame", e[e.MenuPostATweet = 70] = "MenuPostATweet", e[e.MenuQuitGame = 71] = "MenuQuitGame", e[e.MenuReloadGame = 72] = "MenuReloadGame", e[e.MenuShareOnFacebook = 73] = "MenuShareOnFacebook", e[e.MenuToggleDeveloperTools = 74] = "MenuToggleDeveloperTools", e[e.MenuViewHighscores = 75] = "MenuViewHighscores", e[e.MenuViewHighscoresMessage = 76] = "MenuViewHighscoresMessage", e[e.MenuVisitSteamWorkshop = 77] = "MenuVisitSteamWorkshop", e[e.NearDeath = 78] = "NearDeath", e[e.NextHint = 79] = "NextHint", e[e.OptionsAlternateContextMenu = 80] = "OptionsAlternateContextMenu", e[e.OptionsAlternateContextMenuTooltip = 81] = "OptionsAlternateContextMenuTooltip", e[e.OptionsAlternateFont = 82] = "OptionsAlternateFont", e[e.OptionsAudio = 83] = "OptionsAudio", e[e.OptionsAutoGather = 84] = "OptionsAutoGather", e[e.OptionsAutoGatherTooltip = 85] = "OptionsAutoGatherTooltip", e[e.OptionsAutoPickup = 86] = "OptionsAutoPickup", e[e.OptionsAutoPickupTooltip = 87] = "OptionsAutoPickupTooltip", e[e.OptionsDeveloper = 88] = "OptionsDeveloper", e[e.OptionsDialogOpacity = 89] = "OptionsDialogOpacity", e[e.OptionsDropOnGather = 90] = "OptionsDropOnGather", e[e.OptionsDropOnGatherTooltip = 91] = "OptionsDropOnGatherTooltip", e[e.OptionsEffects = 92] = "OptionsEffects", e[e.OptionsEnableHints = 93] = "OptionsEnableHints", e[e.OptionsEnableHintsTooltip = 94] = "OptionsEnableHintsTooltip", e[e.OptionsFullscreenMode = 95] = "OptionsFullscreenMode", e[e.OptionsGame = 96] = "OptionsGame", e[e.OptionsGraphics = 97] = "OptionsGraphics", e[e.OptionsKeepSortActive = 98] = "OptionsKeepSortActive", e[e.OptionsKeepSortActiveTooltip = 99] = "OptionsKeepSortActiveTooltip", e[e.OptionsBindDefault = 100] = "OptionsBindDefault", e[e.OptionsKeyBindRebinding = 101] = "OptionsKeyBindRebinding", e[e.OptionsBinds = 102] = "OptionsBinds", e[e.OptionsLanguage = 103] = "OptionsLanguage", e[e.OptionsMouseClickMovement = 104] = "OptionsMouseClickMovement", e[e.OptionsMouseClickMovementTooltip = 105] = "OptionsMouseClickMovementTooltip", e[e.OptionsMusic = 106] = "OptionsMusic", e[e.OptionsMute = 107] = "OptionsMute", e[e.OptionsNextSong = 108] = "OptionsNextSong", e[e.OptionsPixelFont = 109] = "OptionsPixelFont", e[e.OptionsSaveData = 110] = "OptionsSaveData", e[e.OptionsScaleDefault = 111] = "OptionsScaleDefault", e[e.OptionsScaleIn = 112] = "OptionsScaleIn", e[e.OptionsScaleOut = 113] = "OptionsScaleOut", e[e.OptionsSkipIntro = 114] = "OptionsSkipIntro", e[e.OptionsSkipIntroTooltip = 115] = "OptionsSkipIntroTooltip", e[e.OptionsVisionDither = 116] = "OptionsVisionDither", e[e.OptionsVisionFade = 117] = "OptionsVisionFade", e[e.OptionsWindowedMode = 118] = "OptionsWindowedMode", e[e.OptionsWorldTooltips = 119] = "OptionsWorldTooltips", e[e.OptionsWorldTooltipsTooltip = 120] = "OptionsWorldTooltipsTooltip", e[e.OptionsZoomIn = 121] = "OptionsZoomIn", e[e.OptionsZoomOnScroll = 122] = "OptionsZoomOnScroll", e[e.OptionsZoomOnScrollTooltip = 123] = "OptionsZoomOnScrollTooltip", e[e.OptionsZoomOut = 124] = "OptionsZoomOut", e[e.Overburdened = 125] = "Overburdened", e[e.Poisoned = 126] = "Poisoned", e[e.PreviousHint = 127] = "PreviousHint", e[e.QuickSlot1 = 128] = "QuickSlot1", e[e.QuickSlot2 = 129] = "QuickSlot2", e[e.QuickSlot3 = 130] = "QuickSlot3", e[e.QuickSlot4 = 131] = "QuickSlot4", e[e.QuickSlot5 = 132] = "QuickSlot5", e[e.QuickSlot6 = 133] = "QuickSlot6", e[e.QuickSlot7 = 134] = "QuickSlot7", e[e.QuickSlot8 = 135] = "QuickSlot8", e[e.QuickSlot9 = 136] = "QuickSlot9", e[e.ReturnToTitleScreen = 137] = "ReturnToTitleScreen", e[e.Stamina = 138] = "Stamina", e[e.Starving = 139] = "Starving", e[e.Thirst = 140] = "Thirst", e[e.Version = 141] = "Version", e[e.Weight = 142] = "Weight", e[e.WindowTitleContainer = 143] = "WindowTitleContainer", e[e.WindowTitleCrafting = 144] = "WindowTitleCrafting", e[e.WindowTitleEquipment = 145] = "WindowTitleEquipment", e[e.WindowTitleHighscores = 146] = "WindowTitleHighscores", e[e.WindowTitleInventory = 147] = "WindowTitleInventory", e[e.WindowTitleMap = 148] = "WindowTitleMap", e[e.WindowTitleMessages = 149] = "WindowTitleMessages", e[e.WindowTitleMilestones = 150] = "WindowTitleMilestones", e[e.WindowTitleOptions = 151] = "WindowTitleOptions", e[e.WindowTitleSkills = 152] = "WindowTitleSkills"
        }(Languages.UiTranslation || (Languages.UiTranslation = {}));
    var UiTranslation = Languages.UiTranslation;
    ! function(e) {
        e[e.ItemTypes = 0] = "ItemTypes", e[e.Doodads = 1] = "Doodads", e[e.ActionTypes = 2] = "ActionTypes", e[e.Ui = 3] = "Ui", e[e.Messages = 4] = "Messages", e[e.Terrains = 5] = "Terrains", e[e.Monsters = 6] = "Monsters", e[e.Skills = 7] = "Skills", e[e.Corpses = 8] = "Corpses", e[e.Hints = 9] = "Hints", e[e.Milestones = 10] = "Milestones", e[e.OnEquipTypes = 11] = "OnEquipTypes", e[e.TileEvents = 12] = "TileEvents"
    }(Languages.Dictionary || (Languages.Dictionary = {}));
    var Dictionary = Languages.Dictionary,
        uiTranslationsToSelector = [],
        Language = function() {
            function e(e, t, i) {
                void 0 === t && (t = !1), void 0 === i && (i = !1), this.dictionary = [], this.name = e, this.alternateFontStyle = t, this.shouldPluralize = i;
                for (var a in Dictionary) this.dictionary[a] = [];
                this.dictionary[Dictionary.ItemTypes][ItemType.None] = null
            }
            return e.prototype.getName = function() {
                return this.name
            }, e.prototype.useAlternateFontStyle = function() {
                return this.alternateFontStyle
            }, e.prototype.plural = function(e) {
                return this.shouldPluralize ? pluralize.plural(e) : e
            }, e.prototype.addPluralRule = function(e, t) {
                pluralize.addPluralRule(e, t)
            }, e.prototype.item = function(e, t, i, a) {
                void 0 === i && (i = ""), void 0 === a && (a = ""), this.dictionary[Dictionary.ItemTypes][e] = {
                    name: t,
                    description: i,
                    prefix: a
                }
            }, e.prototype.itemGroup = function(e, t, i, a) {
                void 0 === i && (i = ""), void 0 === a && (a = ""), this.dictionary[Dictionary.ItemTypes][e] = {
                    name: t,
                    prefix: i,
                    suffix: a
                }
            }, e.prototype.doodad = function(e, t, i) {
                void 0 === i && (i = ""), this.dictionary[Dictionary.Doodads][e] = {
                    name: t,
                    prefix: i
                }
            }, e.prototype.use = function(e, t, i) {
                this.dictionary[Dictionary.ActionTypes][e] = {
                    name: t,
                    description: i
                }
            }, e.prototype.ui = function(e, t) {
                this.dictionary[Dictionary.Ui][e] = {
                    name: t
                }
            }, e.prototype.message = function(e, t) {
                this.dictionary[Dictionary.Messages][e] = {
                    name: t
                }
            }, e.prototype.terrain = function(e, t, i) {
                void 0 === i && (i = ""), this.dictionary[Dictionary.Terrains][e] = {
                    name: t,
                    prefix: i
                }
            }, e.prototype.monster = function(e, t, i) {
                void 0 === i && (i = ""), this.dictionary[Dictionary.Monsters][e] = {
                    name: t,
                    prefix: i
                }
            }, e.prototype.monsterCorpse = function(e, t, i) {
                void 0 === i && (i = ""), this.dictionary[Dictionary.Corpses][e] = {
                    name: t,
                    prefix: i
                }
            }, e.prototype.skill = function(e, t, i) {
                this.dictionary[Dictionary.Skills][e] = {
                    name: t,
                    description: i
                }
            }, e.prototype.milestone = function(e, t, i) {
                this.dictionary[Dictionary.Milestones][e] = {
                    name: t,
                    description: i
                }
            }, e.prototype.hint = function(e, t, i) {
                this.dictionary[Dictionary.Hints][e] = {
                    name: t,
                    description: i
                }
            }, e.prototype.tileEvent = function(e, t) {
                this.dictionary[Dictionary.TileEvents][e] = {
                    name: t
                }
            }, e.prototype.onEquipType = function(e, t) {
                this.dictionary[Dictionary.OnEquipTypes][e] = {
                    name: t
                }
            }, e.prototype.getDictionary = function(e) {
                return this.dictionary[e]
            }, e
        }();
    Languages.Language = Language, Languages.add = add, Languages.remove = remove, Languages.addTranslateSelector = addTranslateSelector, Languages.getLanguages = getLanguages, Languages.getLoaded = getLoaded, Languages.reload = reload, Languages.refreshUiTranslation = refreshUiTranslation, Languages.evalString = evalString, Languages.load = load
}(Languages || (Languages = {})), Languages.addTranslateSelector(Languages.UiTranslation.Bleeding, ".icon.bleed", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.Burned, ".icon.burn", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.DisableHints, "#help button[data-button-id='DisableHints']"), Languages.addTranslateSelector(Languages.UiTranslation.EnableHints, "#help button[data-button-id='EnableHints']"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentBack, "ul[data-equip-slot='Back']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentBelt, "ul[data-equip-slot='Belt']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentChest, "ul[data-equip-slot='Chest']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentChest, "ul[data-equip-slot='Chest']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentFeet, "ul[data-equip-slot='Feet']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentHands, "ul[data-equip-slot='Hands']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentHead, "ul[data-equip-slot='Head']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentLeftHand, "ul[data-equip-slot='LeftHand']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentLegs, "ul[data-equip-slot='Legs']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentNeck, "ul[data-equip-slot='Neck']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.EquipmentRightHand, "ul[data-equip-slot='RightHand']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.Health, ".container[data-bar='Health']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.HudActions, "#buttons img[data-button='Actions']", "data-tooltip", !1, function(e) {
    return e + " (" + ui.getStringForKeyBind(KeyBind.Actions) + ")"
}), Languages.addTranslateSelector(Languages.UiTranslation.HudCrafting, "#buttons img[data-button='Crafting']", "data-tooltip", !1, function(e) {
    return e + " (" + ui.getStringForKeyBind(KeyBind.Crafting) + ")"
}), Languages.addTranslateSelector(Languages.UiTranslation.HudEquipment, "#buttons img[data-button='Equipment']", "data-tooltip", !1, function(e) {
    return e + " (" + ui.getStringForKeyBind(KeyBind.Equipment) + ")"
}), Languages.addTranslateSelector(Languages.UiTranslation.HudFilter, ".filter", "placeholder"), Languages.addTranslateSelector(Languages.UiTranslation.HudHelp, "#buttons img[data-button='Help']", "data-tooltip", !1, function(e) {
    return e + " (" + ui.getStringForKeyBind(KeyBind.Help) + ")"
}), Languages.addTranslateSelector(Languages.UiTranslation.HudInventory, "#buttons img[data-button='Inventory']", "data-tooltip", !1, function(e) {
    return e + " (" + ui.getStringForKeyBind(KeyBind.Inventory) + ")"
}), Languages.addTranslateSelector(Languages.UiTranslation.HudMessages, "#buttons img[data-button='Messages']", "data-tooltip", !1, function(e) {
    return e + " (" + ui.getStringForKeyBind(KeyBind.Messages) + ")"
}), Languages.addTranslateSelector(Languages.UiTranslation.HudMilestones, "#buttons img[data-button='Milestones']", "data-tooltip", !1, function(e) {
    return e + " (" + ui.getStringForKeyBind(KeyBind.Milestones) + ")"
}), Languages.addTranslateSelector(Languages.UiTranslation.HudOptions, "#buttons img[data-button='Options']", "data-tooltip", !1, function(e) {
    return e + " (" + ui.getStringForKeyBind(KeyBind.Options) + ")"
}), Languages.addTranslateSelector(Languages.UiTranslation.HudSave, "#buttons img[data-button='Save']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.HudSkills, "#buttons img[data-button='Skills']", "data-tooltip", !1, function(e) {
    return e + " (" + ui.getStringForKeyBind(KeyBind.Skills) + ")"
}), Languages.addTranslateSelector(Languages.UiTranslation.HudTitleScreen, "#buttons img[data-button='TitleScreen']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.Hunger, ".container[data-bar='Hunger']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.MenuAbout, ["div[data-mainmenu-switch-id='About'] .text", "div[data-mainmenu-id='About'] .header .top"]), Languages.addTranslateSelector(Languages.UiTranslation.MenuAboutCredits, "div[data-mainmenu-id='About'] .container .credits", "", !0), Languages.addTranslateSelector(Languages.UiTranslation.MenuAboutDonators, "div[data-mainmenu-id='About'] .container .donators"), Languages.addTranslateSelector(Languages.UiTranslation.MenuAboutIntro, "div[data-mainmenu-id='About'] .container .intro"), Languages.addTranslateSelector(Languages.UiTranslation.MenuAboutLibraries, "div[data-mainmenu-id='About'] .container .libraries", "", !0), Languages.addTranslateSelector(Languages.UiTranslation.MenuAboutLibrariesIntro, "div[data-mainmenu-id='About'] .container .libraries-intro"), Languages.addTranslateSelector(Languages.UiTranslation.MenuAboutMessage, "div[data-mainmenu-id='About'] .header .bottom"), Languages.addTranslateSelector(Languages.UiTranslation.MenuAboutThanks, "div[data-mainmenu-id='About'] .container .thanks", "", !0), Languages.addTranslateSelector(Languages.UiTranslation.MenuAboutThanksIntro, "div[data-mainmenu-id='About'] .container .thanks-intro"), Languages.addTranslateSelector(Languages.UiTranslation.MenuDailyChallenge, "div[data-mainmenu-action-id='DailyChallenge'] .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuDeleteAllGameData, "#options button[data-button-id='ClearSaveData']"), Languages.addTranslateSelector(Languages.UiTranslation.MenuDeleteGame, "div[data-mainmenu-action-id='DeleteGame']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.MenuEditGame, "div[data-mainmenu-action-id='EditGame']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.MenuEndGameDead, "div[data-mainmenu-id='EndGame'] .header .top"), Languages.addTranslateSelector(Languages.UiTranslation.MenuEndGameWon, "div[data-mainmenu-id='EndGame'] .header .top"), Languages.addTranslateSelector(Languages.UiTranslation.MenuExportGame, "div[data-mainmenu-action-id='ExportGame']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.MenuImportGame, "label[data-mainmenu-action-id='ImportGame']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.MenuManageMods, "#manage-mods"), Languages.addTranslateSelector(Languages.UiTranslation.MenuManageMods, ["div[data-mainmenu-switch-id='ManageMods'] .text", "div[data-mainmenu-id='ManageMods'] .header .top"]), Languages.addTranslateSelector(Languages.UiTranslation.MenuManageModsInternal, "div.row-text[data-mod-type='Internal'] .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuManageModsLocal, "div.row-text[data-mod-type='Local'] .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuManageModsMessage, "div[data-mainmenu-id='ManageMods'] .header .bottom"), Languages.addTranslateSelector(Languages.UiTranslation.MenuManageModsPublishMod, "div[data-mainmenu-action-id='PublishMod']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.MenuManageModsUninstallMod, "div[data-mainmenu-action-id='UninstallMod']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.MenuManageModsViewInSteamWorkshop, "div[data-mainmenu-action-id='ViewInSteamWorkshop']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.MenuManageModsWorkshop, "div.row-text[data-mod-type='Workshop'] .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuModdingGuide, "div[data-mainmenu-action-id='ModdingGuide'] .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuNoHighscores, "div[data-mainmenu-id='ViewHighscores'] div.no-highscores .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuNoMods, "div[data-mainmenu-id='ManageMods'] div.no-mods .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuOpenLogsFolder, "#options button[data-button-id='OpenLogsFolder']"), Languages.addTranslateSelector(Languages.UiTranslation.MenuOpenModsFolder, "div[data-mainmenu-action-id='OpenModsFolder'] .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuOptions, "#options-extra"), Languages.addTranslateSelector(Languages.UiTranslation.MenuOptions, ["div[data-mainmenu-switch-id='Options'] .text", "div[data-mainmenu-id='Options'] .header .top", "#options .header .label"]), Languages.addTranslateSelector(Languages.UiTranslation.MenuOptionsMessage, "div[data-mainmenu-id='Options'] .header .bottom"), Languages.addTranslateSelector(Languages.UiTranslation.MenuPlayGame, ["div[data-mainmenu-switch-id='PlayGame'] .text", "div[data-mainmenu-id='PlayGame'] .header .top"]), Languages.addTranslateSelector(Languages.UiTranslation.MenuPlayGameMessage, "div[data-mainmenu-id='PlayGame'] .header .bottom"), Languages.addTranslateSelector(Languages.UiTranslation.MenuPlayGameNewGame, "div[data-mainmenu-id='PlayGame'] .new-game .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuPostATweet, "div[data-mainmenu-id='EndGame'] .twitter .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuQuitGame, "div[data-mainmenu-action-id='QuitGame'] .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuReloadGame, "#options button[data-button-id='ReloadGame']"), Languages.addTranslateSelector(Languages.UiTranslation.MenuShareOnFacebook, "div[data-mainmenu-id='EndGame'] .facebook .text"), Languages.addTranslateSelector(Languages.UiTranslation.MenuToggleDeveloperTools, "#options button[data-button-id='ToggleDeveloperTools']"), Languages.addTranslateSelector(Languages.UiTranslation.MenuViewHighscores, ["div[data-mainmenu-switch-id='ViewHighscores'] .text", "div[data-mainmenu-id='ViewHighscores'] .header .top"]), Languages.addTranslateSelector(Languages.UiTranslation.MenuViewHighscoresMessage, "div[data-mainmenu-id='ViewHighscores'] .header .bottom"), Languages.addTranslateSelector(Languages.UiTranslation.MenuVisitSteamWorkshop, "div[data-mainmenu-action-id='VisitSteamWorkshop'] .text"), Languages.addTranslateSelector(Languages.UiTranslation.NextHint, "#help button[data-button-id='NextHint']"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsAlternateContextMenu, "#options div[data-checkbox-id='AlternateContextMenu'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsAlternateContextMenuTooltip, "#options div[data-checkbox-id='AlternateContextMenu']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsAlternateFont, "#options .alternate-font"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsAudio, "#options .audio"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsAutoGather, "#options div[data-checkbox-id='AutoGather'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsAutoGatherTooltip, "#options div[data-checkbox-id='AutoGather']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsAutoPickup, "#options div[data-checkbox-id='AutoPickup'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsAutoPickupTooltip, "#options div[data-checkbox-id='AutoPickup']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsDeveloper, "#options .developer"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsDialogOpacity, "#options .dialog-opacity"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsDropOnGather, "#options div[data-checkbox-id='DropOnGather'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsDropOnGatherTooltip, "#options div[data-checkbox-id='DropOnGather']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsEffects, "#options .effects"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsEnableHints, "#options div[data-checkbox-id='EnableHints'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsEnableHintsTooltip, "#options div[data-checkbox-id='EnableHints']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsFullscreenMode, "#options .fullscreen-mode"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsGame, "#options .game"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsGraphics, "#options .graphics"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsKeepSortActive, "#options div[data-checkbox-id='KeepSortActive'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsKeepSortActiveTooltip, "#options div[data-checkbox-id='KeepSortActive']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsBindDefault, "#options .bind-default"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsBinds, "#options .binds"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsLanguage, "#options .language"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsMouseClickMovement, "#options div[data-checkbox-id='MouseClickMovement'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsMouseClickMovementTooltip, "#options div[data-checkbox-id='MouseClickMovement']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsMusic, "#options .music"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsMute, "#options .mute"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsNextSong, "#options .next-song"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsPixelFont, "#options .pixel-font"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsSaveData, "#options .save-data"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsScaleDefault, "#options .scale-default"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsScaleIn, "#options .scale-in"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsScaleOut, "#options .scale-out"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsSkipIntro, "#options div[data-checkbox-id='SkipIntro'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsSkipIntroTooltip, "#options div[data-checkbox-id='SkipIntro']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsVisionDither, "#options .vision-dither"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsVisionFade, "#options .vision-fade"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsWorldTooltips, "#options div[data-checkbox-id='WorldTooltips'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsWorldTooltipsTooltip, "#options div[data-checkbox-id='WorldTooltips']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsWindowedMode, "#options .windowed-mode"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsZoomIn, "#options .zoom-in"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsZoomOnScroll, "#options div[data-checkbox-id='ZoomOnScroll'] .label"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsZoomOnScrollTooltip, "#options div[data-checkbox-id='ZoomOnScroll']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.OptionsZoomOut, "#options .zoom-out"), Languages.addTranslateSelector(Languages.UiTranslation.Poisoned, ".icon.poison", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.PreviousHint, "#help button[data-button-id='PreviousHint']"), Languages.addTranslateSelector(Languages.UiTranslation.QuickSlot1, "ul[data-quick-slot='1'] .number"), Languages.addTranslateSelector(Languages.UiTranslation.QuickSlot2, "ul[data-quick-slot='2'] .number"), Languages.addTranslateSelector(Languages.UiTranslation.QuickSlot3, "ul[data-quick-slot='3'] .number"), Languages.addTranslateSelector(Languages.UiTranslation.QuickSlot4, "ul[data-quick-slot='4'] .number"), Languages.addTranslateSelector(Languages.UiTranslation.QuickSlot5, "ul[data-quick-slot='5'] .number"), Languages.addTranslateSelector(Languages.UiTranslation.QuickSlot6, "ul[data-quick-slot='6'] .number"), Languages.addTranslateSelector(Languages.UiTranslation.QuickSlot7, "ul[data-quick-slot='7'] .number"), Languages.addTranslateSelector(Languages.UiTranslation.QuickSlot8, "ul[data-quick-slot='8'] .number"), Languages.addTranslateSelector(Languages.UiTranslation.QuickSlot9, "ul[data-quick-slot='9'] .number"), Languages.addTranslateSelector(Languages.UiTranslation.Stamina, ".container[data-bar='Stamina']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.Thirst, ".container[data-bar='Thirst']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.Version, "#version .info"), Languages.addTranslateSelector(Languages.UiTranslation.Weight, ".container[data-attribute='Weight']", "data-tooltip"), Languages.addTranslateSelector(Languages.UiTranslation.WindowTitleContainer, "#dialogs #container", "title"), Languages.addTranslateSelector(Languages.UiTranslation.WindowTitleCrafting, "#dialogs #crafting", "title"), Languages.addTranslateSelector(Languages.UiTranslation.WindowTitleEquipment, "#dialogs #equipment", "title"), Languages.addTranslateSelector(Languages.UiTranslation.WindowTitleInventory, "#dialogs #inventory", "title"), Languages.addTranslateSelector(Languages.UiTranslation.WindowTitleMap, "#dialogs #map", "title"), Languages.addTranslateSelector(Languages.UiTranslation.WindowTitleMessages, "#dialogs #messages", "title"), Languages.addTranslateSelector(Languages.UiTranslation.WindowTitleMilestones, "#dialogs #milestones", "title"), Languages.addTranslateSelector(Languages.UiTranslation.WindowTitleSkills, "#dialogs #skills", "title");
var TileEvent;
! function(e) {
    function t(t, i, a, n) {
        var o = e.tileEvents[t].decayMax;
        if (!o) throw "Tile event is missing decayMax";
        return {
            type: t,
            x: i,
            y: a,
            z: n,
            spread: e.tileEvents[t].spreadMax,
            decay: o
        }
    }

    function i(e) {
        var t = game.tileEvents[e],
            i = t.x,
            a = t.y,
            n = t.z,
            o = game.getTile(i, a, n);
        delete game.tileEvents[e], o.eventId === e && (delete o.eventId, world.updateTile(i, a, n, o))
    }

    function a(t) {
        var i = game.getTile(t.x, t.y, t.z),
            a = Utilities.TileHelpers.getType(i);
        if (t.spread > 0) {
            var n = Math.floor(4 * Utilities.Random.nextFloat());
            if (0 === n) {
                var o = Math.floor(2 * Utilities.Random.nextFloat()) - 1 + t.x,
                    r = Math.floor(2 * Utilities.Random.nextFloat()) - 1 + t.y,
                    s = game.getTile(o, r, t.z);
                if (!s) return;
                if (void 0 !== s.eventId) return;
                var l = e.create(t.type, o, r, t.z);
                l.spread = Math.round(Utilities.Random.nextFloat()), (!s.doodadId && terrains[Utilities.TileHelpers.getType(s)].flammable || s.doodadId && Doodad.defines[game.doodads[s.doodadId].type].flammable) && (game.placeTileEvent(l), t.spread--)
            }
        }
        if (t.decay >= 1) {
            var p = Item.getTileContainer(t.x, t.y, t.z);
            if (void 0 !== i.doodadId) {
                var d = game.doodads[i.doodadId];
                if (Doodad.damage(d), d.minDur > 1) t.decay += 1;
                else {
                    var u = Doodad.defines[d.type].onBurn;
                    u ? Item.create(u, d.quality, p) : Item.create(ItemType.PileOfAsh, d.quality, p)
                }
            }
            var g = i;
            if (g.containedItems)
                for (var m = 0; m < g.containedItems.length; m++) {
                    var y = g.containedItems[m],
                        c = Item.defines[y.type];
                    if (c.onBurn || c.onBurn === ItemType.None) {
                        y.type !== ItemType.PileOfAsh && (c.onUse && c.onUse[ActionType.StokeFire] ? t.decay += c.onUse[ActionType.StokeFire] : t.decay += 1, c.onBurn ? Item.create(c.onBurn, y.quality, g) : Item.create(ItemType.PileOfAsh, y.quality, g), Item.isInGroup(y.type, ItemTypeGroup.Water) && (game.isOnScreen(t.x, t.y, t.z) && ui.displayMessage(Message.WaterPutOutFire), t.decay = 0)), Item.breakContainerOnTile(y, t.x, t.y, t.z);
                        var h = Math.floor(6 * Utilities.Random.nextFloat());
                        0 === h && terrains[a].passable && game.changeTile({
                            type: TerrainType.Ash
                        }, t.x, t.y, t.z, !0);
                        break
                    }
                }
            Actions.hurtTerrain(t.x, t.y, t.z, i) && (a !== TerrainType.BareTree && a !== TerrainType.BarePalmTree || game.changeTile({
                type: TerrainType.Ash
            }, t.x, t.y, t.z, !1), t.decay += 1, Item.create(ItemType.Charcoal, ItemQuality.Random, p));
            var T = Math.floor(6 * Utilities.Random.nextFloat());
            0 === T && i.doodadId && Doodad.defines[game.doodads[i.doodadId].type].flammable && a !== TerrainType.Ash && game.changeTile({
                type: TerrainType.Ash
            }, t.x, t.y, t.z, !0), t.decay--
        }
        t.decay <= 0 && a !== TerrainType.Ash && (terrains[a].flammable ? game.changeTile({
            type: TerrainType.Ash
        }, t.x, t.y, t.z, !1) : i.doodadId && Doodad.defines[game.doodads[i.doodadId].type].flammable && game.changeTile({
            type: TerrainType.Ash
        }, t.x, t.y, t.z, !0))
    }

    function n(e) {
        for (var t = 0, n = e.length; t < n; t++) {
            var o = e[t];
            void 0 !== o && (a(o), o.decay <= 0 && i(t))
        }
    }
    e.tileEvents = Array(),
        function(e) {
            e[e.None = 0] = "None", e[e.Fire = 1] = "Fire"
        }(e.Type || (e.Type = {}));
    var o = e.Type;
    e.tileEvents[o.Fire] = {
        spreadMax: 12,
        decayMax: 8
    }, e.create = t, e.remove = i, e.updateAll = n
}(TileEvent || (TileEvent = {}));
var english = new Languages.Language("English", (!1), (!0));
english.ui(Languages.UiTranslation.Bleeding, "Bleeding"), english.ui(Languages.UiTranslation.Burned, "Burned"), english.ui(Languages.UiTranslation.DisableHints, "Disable Hints"), english.ui(Languages.UiTranslation.EnableHints, "Enable Hints"), english.ui(Languages.UiTranslation.EquipmentBack, "Back"), english.ui(Languages.UiTranslation.EquipmentBelt, "Belt"), english.ui(Languages.UiTranslation.EquipmentChest, "Chest"), english.ui(Languages.UiTranslation.EquipmentFeet, "Feet"), english.ui(Languages.UiTranslation.EquipmentHands, "Hands"), english.ui(Languages.UiTranslation.EquipmentHead, "Head"), english.ui(Languages.UiTranslation.EquipmentLeftHand, "Left Hand (Held)"), english.ui(Languages.UiTranslation.EquipmentLegs, "Legs"), english.ui(Languages.UiTranslation.EquipmentNeck, "Neck"), english.ui(Languages.UiTranslation.EquipmentRightHand, "Right Hand (Held)"), english.ui(Languages.UiTranslation.Health, "Health (Strength)"), english.ui(Languages.UiTranslation.HudActions, "Actions"), english.ui(Languages.UiTranslation.HudCrafting, "Crafting"), english.ui(Languages.UiTranslation.HudEquipment, "Equipment"), english.ui(Languages.UiTranslation.HudFilter, "Filter"), english.ui(Languages.UiTranslation.HudHelp, "Help"), english.ui(Languages.UiTranslation.HudInventory, "Inventory"), english.ui(Languages.UiTranslation.HudMessages, "Messages"), english.ui(Languages.UiTranslation.HudMilestones, "Milestones"), english.ui(Languages.UiTranslation.HudOptions, "Options"), english.ui(Languages.UiTranslation.HudSave, "Save"), english.ui(Languages.UiTranslation.HudSkills, "Skills"), english.ui(Languages.UiTranslation.HudTitleScreen, "Title Screen"), english.ui(Languages.UiTranslation.Hunger, "Hunger (Metabolism/Starvation)"), english.ui(Languages.UiTranslation.Malignity, "Malignity"), english.ui(Languages.UiTranslation.MenuAbout, "About"), english.ui(Languages.UiTranslation.MenuAboutCredits, "Vaughn 'Drathy' Royko (Programming/Web/PR/Design),Gary 'Spacetech' Wilber (Programming),Frank 'Sassafrass' Sasto (Programming),Dusty 'Goaticide' Melling (Art/Design),Austin Dhillon (Music)"), english.ui(Languages.UiTranslation.MenuAboutDonators, "An extra special thank you to all the early testers, donators, and other supporters."), english.ui(Languages.UiTranslation.MenuAboutIntro, "Wayward is a turn-based, top-down, wilderness survival roguelike currently in beta. It's brought to you by these fine folk:"), english.ui(Languages.UiTranslation.MenuAboutLibraries, "Greenworks, Electron, TypeScript, Node.js, jQuery, jQueryUI, TSM, lz-string, jQuery contextMenu, jQuery UI Touch Punch, Pluralize, Fixedsys Excelsior"), english.ui(Languages.UiTranslation.MenuAboutLibrariesIntro, "Wayward is made possible with the following projects:"), english.ui(Languages.UiTranslation.MenuAboutMessage, "Learn More About Wayward"), english.ui(Languages.UiTranslation.MenuAboutThanks, "Richard 'Orillian' Hobson,Vlad 'vlsd' Seghete,Unstoppable Carl Olsen,Justin 'boxofrox' Charette,Frank Orechio,Drachlen,Joshua 'jday' Day,Oddmund 'oddmunds' Strømme"), english.ui(Languages.UiTranslation.MenuAboutThanksIntro, "With special thanks to:"), english.ui(Languages.UiTranslation.MenuDailyChallenge, "Daily Challenge"),
    english.ui(Languages.UiTranslation.MenuDeleteAllGameData, "Delete All Game Data"), english.ui(Languages.UiTranslation.MenuDeleteGame, "Delete Game"), english.ui(Languages.UiTranslation.MenuEditGame, "Edit Name"), english.ui(Languages.UiTranslation.MenuEndGameDead, "You Died"), english.ui(Languages.UiTranslation.MenuEndGameWon, "You Won"), english.ui(Languages.UiTranslation.MenuExportGame, "Export Game"), english.ui(Languages.UiTranslation.MenuExportSave, "Export Save"), english.ui(Languages.UiTranslation.MenuImportGame, "Import Game"), english.ui(Languages.UiTranslation.MenuImportSave, "Import Save"), english.ui(Languages.UiTranslation.MenuManageMods, "Manage Mods"), english.ui(Languages.UiTranslation.MenuManageModsInternal, "Internal Mods"), english.ui(Languages.UiTranslation.MenuManageModsLocal, "Local Mods"), english.ui(Languages.UiTranslation.MenuManageModsMessage, "Open Steam Workshop to Install Mods"), english.ui(Languages.UiTranslation.MenuManageModsPublishMod, "Publish Mod"), english.ui(Languages.UiTranslation.MenuManageModsUninstallMod, "Uninstall Mod"), english.ui(Languages.UiTranslation.MenuManageModsViewInSteamWorkshop, "View Steam Workshop Page"), english.ui(Languages.UiTranslation.MenuManageModsWorkshop, "Workshop Mods"), english.ui(Languages.UiTranslation.MenuModdingGuide, "Modding Guide"), english.ui(Languages.UiTranslation.MenuNoHighscores, "No Highscores Available"), english.ui(Languages.UiTranslation.MenuNoMods, "You have no mods installed"), english.ui(Languages.UiTranslation.MenuOpenLogsFolder, "Open Logs Folder"), english.ui(Languages.UiTranslation.MenuOpenModsFolder, "Open Mods Folder"), english.ui(Languages.UiTranslation.MenuOptions, "Options"), english.ui(Languages.UiTranslation.MenuOptionsMessage, "Change Your Game Settings"), english.ui(Languages.UiTranslation.MenuPlayGame, "Play Game"), english.ui(Languages.UiTranslation.MenuPlayGameMessage, "Continue or Create New"), english.ui(Languages.UiTranslation.MenuPlayGameNewGame, "New Game"), english.ui(Languages.UiTranslation.MenuPostATweet, "Share on Twitter"), english.ui(Languages.UiTranslation.MenuQuitGame, "Quit Game"), english.ui(Languages.UiTranslation.MenuReloadGame, "Reload Game"), english.ui(Languages.UiTranslation.MenuShareOnFacebook, "Share on Facebook"), english.ui(Languages.UiTranslation.MenuToggleDeveloperTools, "Toggle Developer Tools"), english.ui(Languages.UiTranslation.MenuViewHighscores, "View Highscores"), english.ui(Languages.UiTranslation.MenuViewHighscoresMessage, "Previous Deaths in Game"), english.ui(Languages.UiTranslation.MenuVisitSteamWorkshop, "Visit Steam Workshop"), english.ui(Languages.UiTranslation.NextHint, "Next Hint"), english.ui(Languages.UiTranslation.OptionsAlternateContextMenu, "Alternate Context Menu"), english.ui(Languages.UiTranslation.OptionsAlternateContextMenuTooltip, "If checked, right clicking items will display the item's menu instead of left click."), english.ui(Languages.UiTranslation.OptionsAlternateFont, "Alternate Font"), english.ui(Languages.UiTranslation.OptionsAudio, "Audio"), english.ui(Languages.UiTranslation.OptionsAudio, "Audio"), english.ui(Languages.UiTranslation.OptionsAutoGather, "Auto Gather"), english.ui(Languages.UiTranslation.OptionsAutoGatherTooltip, "If checked, you will automatically gather when moving into resource tiles."), english.ui(Languages.UiTranslation.OptionsAutoPickup, "Auto Pick-up"), english.ui(Languages.UiTranslation.OptionsAutoPickupTooltip, "If checked, you will automatically pick-up items as you move on top of them."), english.ui(Languages.UiTranslation.OptionsDeveloper, "Developer"), english.ui(Languages.UiTranslation.OptionsDialogOpacity, "Dialog Opacity"), english.ui(Languages.UiTranslation.OptionsDropOnGather, "Drop on Gather"), english.ui(Languages.UiTranslation.OptionsDropOnGatherTooltip, "If checked, you will automatically drop items under your character as you gather them."), english.ui(Languages.UiTranslation.OptionsEffects, "Effects"), english.ui(Languages.UiTranslation.OptionsEnableHints, "Enable Hints"), english.ui(Languages.UiTranslation.OptionsEnableHintsTooltip, "If checked, the game will display unseen hints when triggered."), english.ui(Languages.UiTranslation.OptionsFullscreenMode, "Fullscreen Mode"), english.ui(Languages.UiTranslation.OptionsGame, "Game"), english.ui(Languages.UiTranslation.OptionsGraphics, "Graphics"), english.ui(Languages.UiTranslation.OptionsKeepSortActive, "Keep Sort Active"), english.ui(Languages.UiTranslation.OptionsKeepSortActiveTooltip, "If checked, your inventory will keep sorting automatically as you get items."), english.ui(Languages.UiTranslation.OptionsBindDefault, "Default"), english.ui(Languages.UiTranslation.OptionsKeyBindRebinding, "Press any key..."), english.ui(Languages.UiTranslation.OptionsBinds, "Binds"), english.ui(Languages.UiTranslation.OptionsLanguage, "Language"), english.ui(Languages.UiTranslation.OptionsMouseClickMovement, "Mouse Click Movement"), english.ui(Languages.UiTranslation.OptionsMouseClickMovementTooltip, "If checked, you will be able to tap or use your mouse to move on screen."), english.ui(Languages.UiTranslation.OptionsMusic, "Music"), english.ui(Languages.UiTranslation.OptionsMute, "Mute"), english.ui(Languages.UiTranslation.OptionsNextSong, "Next"), english.ui(Languages.UiTranslation.OptionsPixelFont, "Pixel Font"), english.ui(Languages.UiTranslation.OptionsSaveData, "Save Data"), english.ui(Languages.UiTranslation.OptionsScaleDefault, "Default"), english.ui(Languages.UiTranslation.OptionsScaleIn, "Scale In +"), english.ui(Languages.UiTranslation.OptionsScaleOut, "Scale Out -"), english.ui(Languages.UiTranslation.OptionsSkipIntro, "Skip Intro"), english.ui(Languages.UiTranslation.OptionsSkipIntroTooltip, "If checked, the game will skip the Unlok logo screen."), english.ui(Languages.UiTranslation.OptionsVisionDither, "Dither Vision"), english.ui(Languages.UiTranslation.OptionsVisionFade, "Fade Vision"), english.ui(Languages.UiTranslation.OptionsWindowedMode, "Windowed Mode"), english.ui(Languages.UiTranslation.OptionsWorldTooltips, "World Tooltips"), english.ui(Languages.UiTranslation.OptionsWorldTooltipsTooltip, "If checked, hovering over non-empty tiles will reveal information in a tooltip so you don't have to inspect."), english.ui(Languages.UiTranslation.OptionsZoomIn, "Zoom In +"), english.ui(Languages.UiTranslation.OptionsZoomOnScroll, "Zoom on Scroll"), english.ui(Languages.UiTranslation.OptionsZoomOnScrollTooltip, "If checked, you will be able to zoom in and out in game using your mouse wheel/zoom gesture."), english.ui(Languages.UiTranslation.OptionsZoomOut, "Zoom Out -"), english.ui(Languages.UiTranslation.Poisoned, "Poisoned"), english.ui(Languages.UiTranslation.PreviousHint, "Previous Hint"), english.ui(Languages.UiTranslation.QuickSlot1, "1"), english.ui(Languages.UiTranslation.QuickSlot2, "2"), english.ui(Languages.UiTranslation.QuickSlot3, "3"), english.ui(Languages.UiTranslation.QuickSlot4, "4"), english.ui(Languages.UiTranslation.QuickSlot5, "5"), english.ui(Languages.UiTranslation.QuickSlot6, "6"), english.ui(Languages.UiTranslation.QuickSlot7, "7"), english.ui(Languages.UiTranslation.QuickSlot8, "8"), english.ui(Languages.UiTranslation.QuickSlot9, "9"), english.ui(Languages.UiTranslation.ReturnToTitleScreen, "Return to Title Screen"), english.ui(Languages.UiTranslation.Stamina, "Stamina (Dexterity)"), english.ui(Languages.UiTranslation.Thirst, "Thirst (Metabolism/Dehydration)"), english.ui(Languages.UiTranslation.Version, "Wayward Beta " + gameVersion), english.ui(Languages.UiTranslation.Weight, "Weight (Strength)"), english.ui(Languages.UiTranslation.WindowTitleContainer, "Container"), english.ui(Languages.UiTranslation.WindowTitleCrafting, "Crafting"), english.ui(Languages.UiTranslation.WindowTitleEquipment, "Equipment"), english.ui(Languages.UiTranslation.WindowTitleHighscores, "Highscores"), english.ui(Languages.UiTranslation.WindowTitleInventory, "Inventory"), english.ui(Languages.UiTranslation.WindowTitleMap, "Map"), english.ui(Languages.UiTranslation.WindowTitleMessages, "Messages"), english.ui(Languages.UiTranslation.WindowTitleMilestones, "Milestones"), english.ui(Languages.UiTranslation.WindowTitleOptions, "Options"), english.ui(Languages.UiTranslation.WindowTitleSkills, "Skills"), english.message(Message.AberrantCreatureDroppedItem, "Mysteriously, the aberrant creature dropped _0_."), english.message(Message.AboutHours, "It appeared you have _0_ for about _1_ _2_."), english.message(Message.AddedFuelToFire, "You added the fuel to the fire! The fire grows stronger."), english.message(Message.AddedFuelToTorch, "You added the fuel to the torch."), english.message(Message.AddFuel, "Add Fuel"), english.message(Message.AddToQuickslot, "Add to Quickslot"), english.message(Message.Advanced, "Advanced"), english.message(Message.AlreadyFullyRepaired, "_0_ is already fully repaired."), english.message(Message.AlreadyWaterInStill, "There is already water in this still!"), english.message(Message.AppearsToBeDawn, "It appears to be dawn."), english.message(Message.AppearsToBeDusk, "It appears to be dusk."), english.message(Message.AppearsToBeMidDay, "It appears to be mid day."), english.message(Message.AppearsToBeNight, "It appears to be night."), english.message(Message.AreYouSureYouWantToSail, "Are you sure you want to sail to civilization? Your journey will be over, but you can always return back to these lands."), english.message(Message.ArmorAppearedResistant, "Your armor appeared to be resistant to the attack."), english.message(Message.ArmorAppearedVulnerable, "Your armor appeared to be vulnerable to the attack."), english.message(Message.ArmorProtectedFromInjuryAgainst, "Your armor protected you from injury against the _0_."), english.message(Message.Attack, "Attack"), english.message(Message.AttemptedToDropAllIntoFire, "You attempted to drop all of _0_ into the fire."), english.message(Message.AttemptToPlaceAllOnGround, "You attempted to place all of _0_ on the ground."), english.message(Message.AutomaticallySavingGame, "Automatically saving your game..."), english.message(Message.AwakeToFindYourself, "You awake to find yourself no longer in the company of good men or a fine seafaring vessel. Instead you discover yourself in tattered clothing, with a pocket full of shoddy items. Treasure... you remember something about treasure."), english.message(Message.Back, "Back"), english.message(Message.BadlyBurnedLostHealth, "You have been badly burned! You have lost _0_ health!"), english.message(Message.BeenPoisoned, "You have been poisoned!"), english.message(Message.BeginSleeping, "You begin sleeping..."), english.message(Message.BeginUsingRaft, "You begin using a raft."), english.message(Message.Belt, "Belt"), english.message(Message.BleedingHasStopped, "The bleeding has stopped!"), english.message(Message.BleedingProfusely, "You start bleeding profusely!"), english.message(Message.BleedingToDeathLostHealth, "You are bleeding to death! You have lost _0_ health!"), english.message(Message.Blunt, "Blunt"), english.message(Message.BrokeIntoPieces, "_0_ could no longer be repaired and broke into pieces."), english.message(Message.BrokenOnImpact, "_0_ has broken on impact!"), english.message(Message.BrokenWhileFiring, "_0_ has broken while firing!"), english.message(Message.Build, "build"), english.message(Message.Burned, "burned"), english.message(Message.By, "by "), english.message(Message.ByBleedingOut, "by bleeding out"), english.message(Message.ByBurnInjuries, "by your burn injuries"), english.message(Message.ByEatingSomethingBad, "by eating something bad for you"), english.message(Message.ByPoisoning, "by poisoning"), english.message(Message.BySteppingOnA, "by stepping on a "), english.message(Message.BySteppingOnTrap, "by stepping on a trap"), english.message(Message.ByWorkingYourselfIntoExhaustion, "by working yourself into exhaustion"), english.message(Message.Cancel, "Cancel"), english.message(Message.CannotAddAnyMoreFuel, "You cannot add any more fuel to _0_."), english.message(Message.CannotBePerformedOverWater, "This action cannot be performed over water."), english.message(Message.CannotBePreserved, "This item cannot be preserved."), english.message(Message.CannotBeReinforced, "_0_ cannot be reinforced."), english.message(Message.CannotBeRepaired, "_0_ cannot be repaired."), english.message(Message.CannotBeTransmogrified, "_0_ cannot be transmogrified."), english.message(Message.CannotBuildHere, "You cannot build _0_ here!"), english.message(Message.CannotDigHere, "You cannot dig here!"), english.message(Message.CannotDropHere, "You cannot drop _0_ here!"), english.message(Message.CannotEquipThatThere, "You cannot equip that there!"), english.message(Message.CannotFishFor, "You cannot fish for _0_."), english.message(Message.CannotGatherFromWhileOnFire, "You cannot gather from that while it is on fire!"), english.message(Message.CannotGatherHere, "You cannot gather anything here."), english.message(Message.CannotImproveGrowingSpeed, "You cannot improve the growing speed of this plant any further."), english.message(Message.CannotInWater, "You cannot _0_ items in water."), english.message(Message.CannotPickupWhenFull, "You cannot pick this up while it is full of water."), english.message(Message.CannotPickUpWhileLit, "You cannot pick this up while it is lit."), english.message(Message.CannotPickUpWithItemsInside, "You cannot pick this up with items inside!"), english.message(Message.CannotPlaceContainerInItself, "You cannot place a container inside itself."), english.message(Message.CannotPlaceHere, "You cannot place _0_ here!"), english.message(Message.CannotPlaceThatFromHere, "You cannot place that from here."), english.message(Message.CannotPlaceThatHere, "You cannot place that here."), english.message(Message.CannotPlantHere, "You cannot plant _0_ here!"), english.message(Message.CannotRepairWhileLit, "You cannot repair this while it is lit!"), english.message(Message.CannotRestHere, "You cannot rest here."), english.message(Message.CannotSeeHere, "You cannot see anything here."), english.message(Message.CannotSleepHere, "You cannot sleep here."), english.message(Message.CannotStartFireHere, "You cannot start a fire here!"), english.message(Message.CannotToTellTime, "You cannot tell time from here!"), english.message(Message.CarryingTooMuchWeight, "You are carrying too much weight!"), english.message(Message.CarvedUpCorpse, "You carved and hacked up the corpse."), english.message(Message.CastYourLine, "You cast your line out _0_ spaces."), english.message(Message.Category, "Category"), english.message(Message.CaughtFish, "You caught _0_!"), english.message(Message.Chest, "Chest"), english.message(Message.ClearMessages, "Clear Messages"), english.message(Message.CloseDoor, "Close Door"), english.message(Message.CollectObject, "Collect Object"), english.message(Message.Consumed, "Consumed"), english.message(Message.Container, "Container"), english.message(Message.Cook, "cook"), english.message(Message.Cooked, "cooked"), english.message(Message.Corpse, "corpse"), english.message(Message.CorruptSaveDetected, "Corrupt save detected. This save may not load properly."), english.message(Message.CouldNotDecipher, "You could not decipher the map."), english.message(Message.Craft, "craft"), english.message(Message.Crafted, "crafted"), english.message(Message.Crafts, "Crafts"), english.message(Message.CreatureAppears, "_0_ appears!"), english.message(Message.CreatureAppearsHealthy, "The creature appears to be healthy."), english.message(Message.CreatureAppearsUnhealthy, "The creature appears to be unhealthy."), english.message(Message.CreatureIsAtPercentHealth, "The creature is at _0_% health."), english.message(Message.CreatureLooksBarelyHurt, "The creature looks barely hurt."), english.message(Message.CreatureLooksHealthyAndUndamaged, "The creature looks healthy and fairly undamaged."), english.message(Message.CreatureLooksInjured, "The creature looks injured."), english.message(Message.CreatureLooksSeverelyDamaged, "The creature looks severely damaged."), english.message(Message.CreatureSeemsHurt, "The creature seems hurt."), english.message(Message.CreatureSeemsInjured, "The creature seems very injured."), english.message(Message.CreatureSeemsUnimpaired, "The creature seems unimpaired."), english.message(Message.CuredYourPoison, "You have cured your poison!"), english.message(Message.Cut, "cut"), english.message(Message.DailyChallengeMode, "Daily Challenge Mode"), english.message(Message.DamageAppearedEffective, "_0_ damage appeared to be effective."), english.message(Message.DamageAppearedIneffective, "_0_ damage appeared to be ineffective."), english.message(Message.DamagedByPouringWater, "You damaged _0_ by pouring out the water."), english.message(Message.DealtNoDamageToYou, "_0_ has dealt no damage to you."), english.message(Message.Decay, "Decay"), english.message(Message.DefaultGameName, "Untitled Save _0_"), english.message(Message.DependencyIssue, "Dependency issue."), english.message(Message.DestroyedFromUse, "_0_ has been destroyed from use."), english.message(Message.DestroyedGrowingByPickingItUp, "You destroyed _0_growing _1_ by trying to pick it up!"), english.message(Message.DexterityIncreasing, "You felt your dexterity increasing!"), english.message(Message.DidNotSeemToBeHurting, "_0_ did not seem to be hurting _1_."), english.message(Message.Disassemble, "disassemble"), english.message(Message.DisassembleAction, "Disassemble"), english.message(Message.DiscoveredCaveEntrance, "You have discovered a cave entrance!"), english.message(Message.DiscoveredInTheBottle, "You have discovered _0_ in the bottle!"), english.message(Message.Dismantle, "dismantle"), english.message(Message.DismantleAction, "Dismantle"), english.message(Message.DismantleLabel, "Dismantle: "), english.message(Message.DismantlingRequires, "Dismantling this requires _0_."), english.message(Message.DoNotForgetToAddRequiredModsOnWorkshop, "Don't forget to add the required mods on the Steam Workshop page!"), english.message(Message.DoNotHaveTreasureMaps, "You do not have any treasure maps!"), english.message(Message.DoodadAppearsDamaged, "The doodad appears have to have suffered a great deal of damage."), english.message(Message.DoodadAppearsOnVergeOfBreaking, "The doodad is on the verge of breaking."), english.message(Message.DoodadAppearsUnscathed, "The doodad appears to be unscathed."), english.message(Message.DoodadCauseStatus, "The _0_ has _1_ you. You have lost _2_ health!"), english.message(Message.DoodadShowsSignsOfWear, "The doodad shows signs of wear."), english.message(Message.DrewSurroundings, "You drew your surroundings."), english.message(Message.Drink, "Drink"), english.message(Message.Drop, "Drop"), english.message(Message.DropAll, "Drop All"), english.message(Message.DropAllOfSameQuality, "Drop All of the Same Quality"), english.message(Message.DroppedAllIntoDepths, "You dropped all of _0_ into the depths below."), english.message(Message.DroppedIntoDepths, "You dropped _0_ into the depths below."), english.message(Message.DroppedIntoFire, "You dropped _0_ into the fire."), english.message(Message.DueToDehydration, "due to dehydration"), english.message(Message.DueToStarvation, "due to starvation"), english.message(Message.DugTreasureOut, "You dug the treasure out."), english.message(Message.DumpContentsOfContainerInInventory, "You dump the contents of the container into your inventory!"), english.message(Message.Durability, "Durability"), english.message(Message.DyingOfDehydration, "You are dying of dehydration!"), english.message(Message.EarnedMilestone, "You have earned the milestone, _0_! _1_"), english.message(Message.EquipTo, "Equip to "), english.message(Message.ErrorHasOccured, "An error has occurred!"), english.message(Message.Expert, "Expert"), english.message(Message.ExtinguishedFire, "You extinguished the fire."), english.message(Message.ExtinguishedTorch, "You extinguished the torch."), english.message(Message.FailedToAddFuelToTorch, "You failed to add the fuel to the torch properly."), english.message(Message.FailedToCatchFish, "You failed to catch the fish!"), english.message(Message.FailedToCauseDamage, "You failed to cause any damage to _0_ with _1_! _2_"), english.message(Message.FailedToDrawMap, "You failed to draw the map."), english.message(Message.FailedToPickLock, "You failed to pick the lock."), english.message(Message.FailedToPlant, "You failed to plant _0_ in the ground."), english.message(Message.FailedToPreserve, "You failed to preserve the food."), english.message(Message.FailedToReinforce, "You failed to reinforce _0_."), english.message(Message.FailedToRepair, "You failed to repair _0_."), english.message(Message.FailedToStartFire, "You failed to start a fire!"), english.message(Message.FailedToTransmogrify, "You failed to transmogrify _0_."), english.message(Message.FarAwayFromTreasure, "You are far away from the treasure."), english.message(Message.Feet, "Feet"), english.message(Message.FeltBurningPainLostHealth, "You felt burning pain! You have lost _0_ health!"), english.message(Message.FewMinutes, "It appeared you _0_ for a few minutes."), english.message(Message.Filled, "You filled _0_."), english.message(Message.FilledFrom, "You filled _0_ from _1_."), english.message(Message.FinalizingWorld, "Finalizing World"), english.message(Message.Fire, "Fire"), english.message(Message.FireAlmostExtinguished, "The fire is almost extinguished."), english.message(Message.FiredIntoObstacle, "You fired _0_ into an obstacle."), english.message(Message.FireFacingYouIsWarm, "The fire facing you is warm and comforting."), english.message(Message.FireIsHealthy, "The fire is very healthy."), english.message(Message.FireIsRaging, "The fire is raging!"), english.message(Message.FireIsStruggling, "The fire is struggling."), english.message(Message.FireSource, "A Fire Source"), english.message(Message.FirstQuarterOfDay, "It is currently in the first quarter of the day."), english.message(Message.FirstQuarterOfNight, "It is currently in the first quarter of the night."), english.message(Message.Food, "food"), english.message(Message.FoodAlreadyPreserved, "This food is already well preserved."), english.message(Message.FourthQuarterOfDay, "It is currently in the fourth quarter of the day."), english.message(Message.FourthQuarterOfNight, "It is currently in the fourth quarter of the night."), english.message(Message.FullyDecodedMap, "You fully decoded the map!"), english.message(Message.GainedHealth, "You have gained _0_ health."), english.message(Message.GainedHunger, "You have gained _0_ hunger."), english.message(Message.GainedStamina, "You have gained _0_ stamina."), english.message(Message.GainedThirst, "You have gained _0_ thirst."), english.message(Message.GameHasBeenSavedIsTakingUpMB, "Your game has been saved! Your game save is taking up _0_MB."), english.message(Message.Gather, "Gather"), english.message(Message.GeneratingWorld, "Generating World"), english.message(Message.GrabAll, "Grab All"), english.message(Message.Group, "Group"), english.message(Message.Hands, "Hands"), english.message(Message.HasBeenHurtByATrap, "_0_ has been hurt by a trap!"), english.message(Message.HasBeenHurtByYourTrap, "_0_ has been hurt by your trap!"), english.message(Message.HasDecayed, "Your _0_ has decayed."), english.message(Message.HasHitYouForDamage, "_0_ has hit you for _1_ damage! _2_"), english.message(Message.HasSplit, "_0_ has split."), english.message(Message.Head, "Head"), english.message(Message.Held, "Held"), english.message(Message.Help, "Help"), english.message(Message.Hints, "Hints"), english.message(Message.HintsDisabled, "Hints disabled."), english.message(Message.HintsEnabled, "Hints enabled."), english.message(Message.HitForDamage, "You hit _0_ for _1_ damage with _2_! _3_"), english.message(Message.Hour, "hour"), english.message(Message.Hours, "hours"), english.message(Message.HowDoYouWantToExportSave, "How do you want to export this save?"), english.message(Message.HurtHandsByGatheringWithNoTool, "You hurt your hands by gathering with no tool."), english.message(Message.HurtHandsHittingWithoutWeapons, "You hurt your hands hitting _0_ without any weapons!"), english.message(Message.IncompatibleVersion, "This mod is not compatible with this version of Wayward."), english.message(Message.InExactLocationOfTreasure, "You are in the exact location of where the treasure is buried."), english.message(Message.InjuredFromTrap, "You have been injured from a trap!"), english.message(Message.InNeedOfRepair, "_0_ is in need of repair."), english.message(Message.Inspect, "Inspect"), english.message(Message.Intermediate, "Intermediate"), english.message(Message.Inventory, "Inventory"), english.message(Message.ItContains, "It contains _0_."), english.message(Message.ItsWeightCapacity, "Its weight capacity is _0_ / _1_."), english.message(Message.Jump, "Jump"), english.message(Message.Killed, "Killed _0_!"), english.message(Message.LabelAttackFromTactics, "Attack From Tactics:"), english.message(Message.LabelAuthor, "Author: "), english.message(Message.LabelBase, "Base: "), english.message(Message.LabelBaseAttack, "Base Attack:"), english.message(Message.LabelBaseDefense, "Base Defense:"), english.message(Message.LabelBluntResist, "Blunt Resist:"), english.message(Message.LabelDecay, "Decay: "), english.message(Message.LabelDefense, "Defense:"), english.message(Message.LabelDefenseFromParrying, "Defense From Parrying:"), english.message(Message.LabelDoodadRequired, "Doodad Required: "), english.message(Message.LabelDurability, "Durability: "), english.message(Message.LabelEquip, "Equip:"), english.message(Message.LabelFireResist, "Fire Resist:"), english.message(Message.LabelGrouping, "Grouping: "), english.message(Message.LabelHave, "Have: "), english.message(Message.LabelHp, "HP: "), english.message(Message.LabelLastUpdated, "Last Updated: "), english.message(Message.LabelLeftHandAttack, "Left Hand Attack:"), english.message(Message.LabelLevel, "Level: "), english.message(Message.LabelMalignityNegative, "- Malignity: "), english.message(Message.LabelMalignityPlus, "+ Malignity: "), english.message(Message.LabelOnEquip, "On Equip: "), english.message(Message.LabelPiercingResist, "Piercing Resist:"), english.message(Message.LabelRange, "Range: "), english.message(Message.LabelRanged, "Ranged: "), english.message(Message.LabelRangedAttack, "Ranged Attack: "), english.message(Message.LabelRangedDamage, "Ranged Damage:"), english.message(Message.LabelRequiredMods, "Required Mods: "), english.message(Message.LabelRequires, "Requires: "), english.message(Message.LabelResists, "Resists: "), english.message(Message.LabelRightHandAttack, "Right Hand Attack:"), english.message(Message.LabelScore, "Score: "), english.message(Message.LabelSkill, "Skill: "), english.message(Message.LabelSlashingResist, "Slashing Resist:"), english.message(Message.LabelStokeFireStrength, "Stoke Fire Strength: "), english.message(Message.LabelUse, "Use:"), english.message(Message.LabelUses, "Uses:"), english.message(Message.LabelVersion, "Version: "), english.message(Message.LabelVulnerabilities, "Vulnerabilities: "), english.message(Message.LabelWeight, "Weight: "), english.message(Message.LabelWeightCapacity, "Weight Capacity: "), english.message(Message.LabelWeightReduction, "Weight Reduction: "), english.message(Message.LastPlaceYouLeftOff, "You awake to discover yourself in the last place you left off..."), english.message(Message.LearnedHowToCreate, "You have learned how to create _0_!"), english.message(Message.LeftHand, "Left Hand (Held)"), english.message(Message.Legs, "Legs"), english.message(Message.LikelyFailures, " It is likely you will not be able to craft this without many failures."), english.message(Message.LoadingMods, "Loading Mods"), english.message(Message.LoadingSprites, "Loading Sprites"), english.message(Message.LoadingWorld, "Loading World"), english.message(Message.LocalFile, "Local File"), english.message(Message.LocalVersionOfModDetected, "A local version of this mod has been detected. The Workshop version will not load."), english.message(Message.LoseBonesLayBleaching, "Your bones lay bleaching, lost to time."), english.message(Message.LoseEndIsBeginning, "The end is just the beginning."), english.message(Message.LoseSadlyNoTrace, "Sadly, no trace of you was ever found."), english.message(Message.LostHealth, "You have lost _0_ health."), english.message(Message.LostHunger, "You have lost _0_ hunger."), english.message(Message.LostStamina, "You have lost _0_ stamina."), english.message(Message.LostThirst, "You have lost _0_ thirst."), english.message(Message.MapNotOfThisArea, "This map is not of this area."), english.message(Message.MaterialsDestroyedDisassembly, "Some materials have been destroyed on disassembly."), english.message(Message.MaterialsDestroyedDismantle, "Some materials have been destroyed from dismantling."), english.message(Message.MetabolismSlowed, "Your metabolism has slowed. You will require less food and water."), english.message(Message.MilestoneIsHidden, "This milestone is hidden."), english.message(Message.MilestoneIsInvisible, "This milestone is invisible."), english.message(Message.MissedWith, "You missed _0_ with _1_!"), english.message(Message.MissingRequiredMods, "You are missing one or more required mods."), english.message(Message.ModImportedSaveGame, "A mod has imported a saved game."), english.message(Message.ModLoadError, "Error loading mod. One or more files may be corrupt."), english.message(Message.ModRequiresItself, "This mod requires itself."), english.message(Message.ModWithNameAlreadyExists, "A mod with that name already exists. Try changing the name of the slot."), english.message(Message.MonsterIdolAttractedCreature, "The monster idol attracted another creature."), english.message(Message.MouseButton, "M_0_"), english.message(Message.MoveAllOfSameQualityToInventory, "Move All of Same Quality to Inventory"), english.message(Message.MoveAllOfSameQualityToOpenedContainer, "Move All of Same Quality to Opened Container"), english.message(Message.MoveAllToInventory, "Move All to Inventory"), english.message(Message.MoveAllToOpenedContainer, "Move All to Opened Container"), english.message(Message.MoveOverTrapButDoNotSetOff, "You move over the trap, but do not set it off."), english.message(Message.MoveToInventory, "Move to Inventory"), english.message(Message.MoveToOpenedContainer, "Move to Opened Container"), english.message(Message.MustCastIntoWater, "You must cast this into water to catch anything."), english.message(Message.Mysteriously, "mysteriously"), english.message(Message.Name, "Name"), english.message(Message.NearlyBurnedEquipmentProtectedYou, "You were nearly burned, but your equipment protected you."), english.message(Message.Neck, "Neck"), english.message(Message.NeedAShovelToDigTreasure, "You need a shovel to be able to dig up this treasure."), english.message(Message.NeedDeepWaterForRaft, "You need to be in deep water to use a raft."), english.message(Message.NeedFishingNetForTreasure, "You need a fishing net to be able to get this treasure."), english.message(Message.NeedToBuildUpLandAround, "You need to build up the land around this water before placing this here."), english.message(Message.NeedToEquipToShoot, "You need to equip this to shoot from it!"), english.message(Message.NeedToStartTravelsOutside, "You need to start your travels outside."), english.message(Message.No, "No"), english.message(Message.NoAmmunitionForThatWeapon, "You do not have any ammunition for that weapon in your inventory!"), english.message(Message.NoBlackPowderToFireWeapon, "You do not have any Black Powder to fire this weapon."), english.message(Message.NoFireToStokeWith, "There is no fire to stoke with _0_ here!"), english.message(Message.NoFishAtLocation, "There is no fish at this location!"), english.message(Message.NoFuelItemsToStartFire, "You do not have any fuel to start the fire."), english.message(Message.NoInkToDrawMap, "You do not have any ink to draw a map with!"), english.message(Message.NoKindlingToStartFire, "You do not have any Kindling to start the fire."), english.message(Message.NoLongerFeelPainOBeingfBurned, "You no longer feel the pain of being burned!"), english.message(Message.NoMoreRoomInContainer, "There is no more room in this container for that item."), english.message(Message.NoNeedToStokeFire, "There is no need to stoke this fire."), english.message(Message.NoRoomToDrop, "There is no room to drop that here!"), english.message(Message.NotAvailable, "N/A"), english.message(Message.NotEnoughFoodToTravel, "You do not have enough _0_ to attempt a long travel!"), english.message(Message.NotEnoughPurifiedWaterYet, "There is not enough purified water available in the still yet."),
    english.message(Message.NotEnoughStrengthToThrow, "You do not have enough strength to throw this!"), english.message(Message.NotEnoughTreasureToReturn, "You do not have all the pieces of treasure in order to return to civilization."), english.message(Message.NotFacingLockedObject, "You are not facing a locked object."), english.message(Message.NotFacingValidFoodForPreservation, "You are not facing a valid food item for preservation."), english.message(Message.NotFacingValidItemForReinforcement, "You are not facing a valid item for reinforcement."), english.message(Message.NotFacingValidItemForRepair, "You are not facing a valid item for repair."), english.message(Message.NotFacingValidItemToTransmogrify, "You are not facing a valid item to transmogrify."), english.message(Message.NothingHereToCarve, "There is nothing here to carve!"), english.message(Message.NothingHereToFill, "There is nothing here to fill _0_."), english.message(Message.NothingHereToGardenWith, "There is nothing here to garden with _0_ here!"), english.message(Message.NoTinderToStartFire, "You do not have any Tinder to start the fire."), english.message(Message.NotInRangeOfTreasure, "You are not in the range of any buried treasure!"), english.message(Message.NoWaterInStill, "There is no water in this still."), english.message(Message.NoWhereNearTreasure, "You are no where near the treasure."), english.message(Message.NumberEight, "eight"), english.message(Message.NumberFive, "five"), english.message(Message.NumberFour, "four"), english.message(Message.NumberNine, "nine"), english.message(Message.NumberOne, "one"), english.message(Message.NumberSeven, "seven"), english.message(Message.NumberSix, "six"), english.message(Message.NumberTen, "ten"), english.message(Message.NumberThree, "three"), english.message(Message.NumberTwo, "two"), english.message(Message.ObjectIsLocked, "The object is locked, you attempt to break it open."), english.message(Message.Ok, "OK"), english.message(Message.OpenDoor, "Open Door"), english.message(Message.OpenFolderFailed, "Failed to open the folder. Please navigate to the folder manually."), english.message(Message.OverEatingLostStamina, "You are over-eating! You have lost 10 stamina."), english.message(Message.OverHydratingLostStamina, "You are over-hydrating! You have lost 10 stamina."), english.message(Message.PaperTurnedToMush, "The wet piece of paper turned to mush as it was released from the bottle."), english.message(Message.PartiallyDecodedMap, "You partially decoded the map."), english.message(Message.PastExperiencesProvideBenefits, "Your past experiences provide you benefits for survival."), english.message(Message.PenultimateAnd, "and"), english.message(Message.PickupItem, "Pick-up Item"), english.message(Message.Piercing, "Piercing"), english.message(Message.Place, "place"), english.message(Message.PlacedOnGround, "You placed _0_ on the ground!"), english.message(Message.Plant, "plant"), english.message(Message.PlantedInGround, "You planted _0_ in the ground."), english.message(Message.PlantIsFertile, "The plant is fertile and may spread a bit."), english.message(Message.PlantIsNotFertile, "The plant is not fertile and will not spread."), english.message(Message.PlantVeryHealthy, "The plant is very healthy and its fertility will allow it to spread a lot."), english.message(Message.Poisoned, "poisoned"), english.message(Message.PoisonedLostHealth, "You are poisoned! You have lost _0_ health!"), english.message(Message.PoisonWorkedItsCourse, "The poison has worked its course!"), english.message(Message.PouredOutWater, "You poured out the water."), english.message(Message.PouredOutWaterOnYourself, "You poured out the water on yourself."), english.message(Message.PouredWaterIntoStill, "You poured the water into the still."), english.message(Message.PreservedFood, "You preserved the food."), english.message(Message.PublishingMod, "Publishing Mod"), english.message(Message.PurifiedWaterInStill, "There is purified water in the still."), english.message(Message.Quality, "Quality"), english.message(Message.Recent, "Recent"), english.message(Message.RefreshingMods, "Refreshing Mods"), english.message(Message.Reinforce, "You reinforce _0_."), english.message(Message.RemovedBlood, "You removed the blood."), english.message(Message.RemoveFromQuickslot, "Remove from Quickslot"), english.message(Message.Repair, "repair"), english.message(Message.RequiredForDisassembly, "_0_ is required for disassembly of this item!"), english.message(Message.RequiredModsMissingWantToContinue, "One or more required mods are missing. Unexpected results may occur. Are you sure you want to continue?"), english.message(Message.RequiredModsNotLoaded, "One or more required mods are not loaded."), english.message(Message.RequiresFacingFireSource, "This item requires you to be facing a fire source in order to light it."), english.message(Message.RequiresFireToBeLit, "This still requires a fire to be lit underneath it to begin purifying water."), english.message(Message.RequiresYouToBeFacingTo, "This item requires you to be facing _0_ in order to _1_ it."), english.message(Message.Rest, "Rest"), english.message(Message.Rested, "rested"), english.message(Message.Resting, "Resting"), english.message(Message.RestInterrupted, "Your rest has been interrupted!"), english.message(Message.ReturnedToCivilization, "Returned to civilization!"), english.message(Message.ReturningToCivilizationSetOffAgain, "After returning the treasure back to civilization, you set off again..."), english.message(Message.ReturnsToLife, "_0_ returns to life!"), english.message(Message.ReturnToTitleScreenNoSaveInDailyChallenge, "Are you sure you want to return to the title screen?<br />Note: Your progress is not saved in Daily Challenge Mode."), english.message(Message.ReturnToTitleScreenProgressWillBeSaved, "Are you sure you want to return to the title screen?<br />Note: Your progress will be saved automatically."), english.message(Message.RightHand, "Right Hand (Held)"), english.message(Message.SailedToCivilization, "You sailed to civilization in this game."), english.message(Message.SavingGame, "Saving Game"), english.message(Message.Score, "_0_ Score"), english.message(Message.ScrollProvidedNoUsefulInsight, "You are truly a master of the crafts. The scroll provided no useful insight for you."), english.message(Message.SeaweedFromWater, "You dragged a slimy mass of seaweed up out of the water!"), english.message(Message.SecondQuarterOfDay, "It is currently in the second quarter of the day."), english.message(Message.SecondQuarterOfNight, "It is currently in the second quarter of the night."), english.message(Message.SeeGrowing, "You see _0_growing _1_."), english.message(Message.SeemsToHaveDrawnEnergy, "_0_ seems to have drawn energy from _1_!"), english.message(Message.SetTrapOffButNoDamage, "You set the trap off, but it does no damage to you."), english.message(Message.SetUp, "You have set up _0_."), english.message(Message.ShadowInTheWater, "You have seen a shadow in the water."), english.message(Message.Simple, "Simple"), english.message(Message.Skill, "Skill"), english.message(Message.SkillHasRaised, "Your skill in _0_ has raised to _1_%!"), english.message(Message.Slashing, "Slashing"), english.message(Message.Sleeping, "Sleeping"), english.message(Message.SleepInterrupted, "Your sleep has been interrupted!"), english.message(Message.Slept, "slept"), english.message(Message.Soil, "soil"), english.message(Message.SoilWouldHaveNoEffect, "The soil would have no effect on this plant."), english.message(Message.SomethingInTheWayOfCarving, "There is something in the way of your carving!"), english.message(Message.SomethingInTheWayOfDigging, "There is something in the way of your digging!"), english.message(Message.SomethingInTheWayOfDiggingCarveFirst, "There is something in the way of your digging. This must be carved."), english.message(Message.SomethingInTheWayOfFishing, "There is something in the way. You cannot fish past that!"), english.message(Message.SomethingInTheWayOfGatheringCarveFirst, "There is something in the way of your gathering. This must be carved."), english.message(Message.SomethingInTheWayOfPerforming, "There is something in the way of performing this action."), english.message(Message.SomethingInTheWayOfPlacing, "There is something in the way of placing this."), english.message(Message.SomethingInWayOfClosingDoor, "There is something in the way of closing that door!"), english.message(Message.SoothedYourBurnInjuries, "You have soothed your burn injuries!"), english.message(Message.Sort, "Sort"), english.message(Message.SortedByCategory, "_0_ sorted by category."), english.message(Message.SortedByDecay, "_0_ sorted by decay."), english.message(Message.SortedByDurability, "_0_ sorted by durability."), english.message(Message.SortedByGroup, "_0_ sorted by group."), english.message(Message.SortedByName, "_0_ sorted by name."), english.message(Message.SortedByQuality, "_0_ sorted by quality."), english.message(Message.SortedByRecent, "_0_ sorted by recent."), english.message(Message.SortedBySkill, "_0_ sorted by skill."), english.message(Message.SortedByWeight, "_0_ sorted by weight."), english.message(Message.StaminaIsFull, "Your stamina is full, you do not need to rest any more."), english.message(Message.StartedFire, "You have started a fire!"), english.message(Message.StartTravelInWater, "You need to start your travels while in ocean water."), english.message(Message.StarvingToDeath, "You are starving to death!"), english.message(Message.SteamWorkshop, "Steam Workshop"), english.message(Message.SteppingOnHasInjuredYouForDamage, "Stepping on the _0_ has injured you for _1_ damage!"), english.message(Message.StillHasNoWaterToPurify, "This still has no water to purify!"), english.message(Message.StirredUpClawWorm, "You stirred up a claw worm from underground!"), english.message(Message.StirredUpCreature, "You stirred up a creature from the depths!"), english.message(Message.StoppedYourBleeding, "You have stopped your bleeding!"), english.message(Message.StopUsingRaft, "You stop using the raft."), english.message(Message.StrengthIncreasing, "You felt your strength increasing!"), english.message(Message.SummonedGuardiansByDiggingTreasure, "You have summoned the guardians by digging up the treasure."), english.message(Message.SunIsRising, "It appears the sun is rising."), english.message(Message.SunIsSetting, "It appears the sun is setting."), english.message(Message.SunNotBrightEnoughToStartFire, "The sun is not bright enough to start a fire with this!"), english.message(Message.TeleportBlocked, "Your teleport destination was blocked."), english.message(Message.Teleported, "You have teleported."), english.message(Message.ThereIsNoSunToStartFire, "There is no sun in here to start a fire with."), english.message(Message.ThirdQuarterOfDay, "It is currently in the third quarter of the day."), english.message(Message.ThirdQuarterOfNight, "It is currently in the third quarter of the night."), english.message(Message.Throw, "Throw"), english.message(Message.ThrownIntoDepths, "You have thrown _0_ into the depths below."), english.message(Message.ThrownIntoObstacle, "You have thrown _0_ into an obstacle."), english.message(Message.TooDamaged, "_0_ is too damaged to attempt to _1_."), english.message(Message.TooExhaustedToJump, "You are too exhausted and overburdened to make this jump."), english.message(Message.ToolAppearedEffectiveForGathering, "The tool in use did not appear to be effective for gathering this resource."), english.message(Message.TrampledFire, "You trampled the fire, putting it out!"), english.message(Message.TrampledIntoGround, "_0_ trampled _1_ into the ground."), english.message(Message.TrampleIntoGround, "You trampled _0_ into the ground."), english.message(Message.Trampling, "You are trampling _0_."), english.message(Message.Transmogrified, "You have transmogrified _0_."), english.message(Message.TravelAway, "Are you sure you want to travel away from these lands? You can never return. Make sure to grab all you need!"), english.message(Message.TravelToFarOffLands, "You travel to far off lands..."), english.message(Message.TreasureIsBlocked, "You find the spot where the treasure is buried, but it is blocked."), english.message(Message.True, "True"), english.message(Message.UnableToImportSave, "Unable to import save. The file may be corrupt or invalid."), english.message(Message.UnableToLoadRequiredMods, "Unable to load one or more required mods."), english.message(Message.UnEquip, "Un-equip"), english.message(Message.Unknown, "Unknown"), english.message(Message.UnknownItem, "Unknown Item"), english.message(Message.UnlockedChest, "You unlocked the wooden chest and viewed its contents."), english.message(Message.UnpurifiedWaterInStill, "There is unpurified water in the still."), english.message(Message.UpdatingMod, "Updating Mod"), english.message(Message.URLHasOpenedInWebBrowser, "The URL has been opened in your default web browser."), english.message(Message.UsedSoilToIncreaseFertility, "You used the soil to increase the fertility of the plant."), english.message(Message.UsedToSpeedUpGrowing, "You used the _0_ to speed up the growing process."), english.message(Message.UsingBareFistsToFight, "using your bare fists to fight"), english.message(Message.UsingBareHandsToGather, "using your bare hands to gather"), english.message(Message.WaitUntilFireCooledToGetWater, "You must wait until the fire has cooled off to get the purified water."), english.message(Message.WalkingDistanceOfTreasure, "You are within walking distance of the treasure."), english.message(Message.WantToDeleteAllSavedData, "Are you sure you want to permanently delete all saved data?"), english.message(Message.WantToDeleteThisGame, "Are you sure you want to delete this game?"), english.message(Message.WantToPublishThisMod, "Are you sure you want to publish this mod?"), english.message(Message.WantToPublishUpdateToMod, "Are you sure you want to publish an update to this mod?"), english.message(Message.WantToUninstallThisMod, "Are you sure you want to uninstall this mod?"), english.message(Message.Water, "water"), english.message(Message.WaterDoesNotNeedDesalination, "This water does not need to undergo the desalination process!"), english.message(Message.WaterIncreaseFertilityOfPlant, "You used the water to increase the fertility of the plant."), english.message(Message.WaterPutOutFire, "The water has put out the fire."), english.message(Message.WaterWouldHaveNoEffect, "The water would have no effect on this plant."), english.message(Message.Weight, "Weight"), english.message(Message.WeightCapacity, "Weight Capacity: _0_ / _1_"), english.message(Message.WelcomeToWayward21, 'Welcome to Wayward beta 2.1.2!<br /><br />Please visit the <a href="https://steamcommunity.com/app/379210/allnews/" target="_blank">Steam Community News</a> section to see what\'s new.<br /><br /><span class="normal-size">All mods have been disabled by default.</span>'), english.message(Message.WinFindWayBackToCivilization, "You find your way back to civilization and end your journey."), english.message(Message.WinSailBackWithRiches, "You sail back and enjoyed a good life with your riches."), english.message(Message.WinTravelledBackToCivilization, "You travelled back to civilization, but is this the end?"), english.message(Message.With, "with"), english.message(Message.WorkingYourselfIntoExhaustion, "You are working yourself into exhaustion!"), english.message(Message.WorkshopHasBeenOpenedPressOkAfter, "The Steam Workshop has been opened in a browser.<br />Press OK after you're done viewing the Workshop."), english.message(Message.Yes, "Yes"), english.message(Message.YouAte, "You ate _0_!"), english.message(Message.YouBeginResting, "You begin resting..."), english.message(Message.YouCollected, "You collected _0_!"), english.message(Message.YouCrafted, "You _0_ _1_!"), english.message(Message.YouDied, "You died _0_!"), english.message(Message.YouDisassembled, "You disassembled _0_."), english.message(Message.YouDismantled, "You dismantled _0_."), english.message(Message.YouDrank, "You drank _0_!"), english.message(Message.YouEquip, "You equip _0_."), english.message(Message.YouFailedTo, "You failed to _0_ _1_ due to lack of skill._2_"), english.message(Message.YouFailedToHeal, "You have failed to heal due to lack of skill in _0_."), english.message(Message.YouFire, "You fire _0_."), english.message(Message.YouGathered, "You gathered _0_!"), english.message(Message.YouHaveKilled, "You have killed _0_!"), english.message(Message.YouOpen, "You open _0_."), english.message(Message.YouPickedUp, "You picked up _0_."), english.message(Message.YouRepair, "You repair _0_."), english.message(Message.YourFist, "your fist"), english.message(Message.YouSalvaged, "You salvaged _0_."), english.message(Message.YouSee, "You see _0_."), english.message(Message.YouSeparate, "You separate _0_."), english.message(Message.YouThrew, "You threw _0_!"), english.message(Message.YouUnequip, "You un-equip _0_."), english.message(Message.YouUsed, "You have used _0_!"), english.item(ItemType.Acorn, "acorn", "A hard tree nut with a cupule that can grow into a sapling when planted.", "an "), english.item(ItemType.Amber, "amber", "Fossilized tree resin. Can be melted down to reinforce items."), english.item(ItemType.AnimalFat, "animal fat", "A gelatinous shaving of animal fat, slimy to the touch. Useful as a rendered fuel."), english.item(ItemType.AnimalFatTorch, "animal fat torch", "A torch; wrapped in rendered animal fat, producing a long-lasting light source.", "an "), english.item(ItemType.AnimalSkull, "animal skull", "A hollowed out, bleached animal skull, suitable for crafting into a provisional helmet.", "an "), english.item(ItemType.Arrow, "arrow", "A projectile to be fired from a bow, crafted with an arrowhead and feather to control flight.", "an "), english.item(ItemType.Backpack, "backpack", "Crafted with leather, it's suitable for holding many items on your back, reducing overall weight.", "a "), english.item(ItemType.Bandage, "bandage", "A tattered piece of fabric, used to staunch wounds and prevent infection.", "a "), english.item(ItemType.BarkLeggings, "bark leggings", "Rudimentary leg armor, crafted from strong tree bark and secured with string."), english.item(ItemType.BarkShield, "bark shield", "A Makeshift shield, used to block incoming attacks, made with tree bark and wrapped with string.", "a "), english.item(ItemType.BarkTorch, "bark torch", "A torch wrapped and bound by stripped tree bark, providing natural oils to increase the life of the torch.", "a "), english.item(ItemType.BarkTunic, "bark tunic", "Tree bark chest armor bound together with string.", "a "), english.item(ItemType.BerrySeeds, "berry seeds", "Black seeds that will grow into a berry bush, given enough time and care."), english.item(ItemType.BigRedBerry, "big red berry", "An abnormally large, plump red berry, full of luscious nutrition.", "a "), english.item(ItemType.BlackPowder, "black powder", "A highly combustible powder, made up of a combination of minerals."), english.item(ItemType.BoatPaddle, "boat paddle", "A makeshift boat paddle used with boats and rafts, or combat if in dire need.", "a "), english.item(ItemType.BoiledEgg, "boiled egg", "A moist, delicious boiled egg. Great tasting and packed with protein.", "a "), english.item(ItemType.Bone, "bone", "A heavy, sun-bleached animal bone, suitable for rudimentary combat, gathering, or crafting into more useful items.", "a "), english.item(ItemType.BoneNeedle, "bone needle", "A thin, hard, sharp needle, carved from bone.", "a "), english.item(ItemType.BonePole, "bone pole", "A smooth cudgel crafted from a large bone.", "a "), english.item(ItemType.Bones, "bones", "A bundle of bones from a small vertebrate. Some cracked, others shattered. The pieces are quite sharp."), english.item(ItemType.Bow, "bow", "A bent wooden pole with a shorter string tied to both ends. The tension of the string is used to fire arrows.", "a "), english.item(ItemType.BowDrill, "bow drill", "An advanced fire starting device. Uses the string on a bow to rotate into the wood, reducing much effort.", "a "), english.item(ItemType.Branch, "branch", "A typical tree branch, useful for a variety of crafts or stoking a fire.", "a "), english.item(ItemType.BullBoat, "bull boat", "A boat made from leather hides and framed with curved wooden poles. Used to travel to new, far away lands.", "a "), english.item(ItemType.CactiSeeds, "cacti seeds", "These appear to be cactus seeds. Can be planted to grow cacti or eaten."), english.item(ItemType.CactusNeedle, "cactus needle", "A needle from a cactus plant, useful in crafting smaller, more intricate items.", "a "), english.item(ItemType.CactusSpines, "cactus spines", "Thin, long spikes, suitable for crafting into makeshift needles."), english.item(ItemType.Campfire, "campfire", "A grouping of rocks shaped into a ring to contain a fire.", "a "), english.item(ItemType.CarbonPowder, "carbon powder", "Black, sooty carbonized powder."), english.item(ItemType.Charcoal, "charcoal", "Condensed, carbon-rich burned matter."), english.item(ItemType.CharcoalBandage, "charcoal bandage", "A cloth bandage, coated in charcoal and used for its natural antiseptic and anticoagulant properties.", "a "), english.item(ItemType.ClayBlowpipe, "clay blowpipe", "A sturdy blowpipe used for glassblowing.", "a "), english.item(ItemType.ClayBrick, "clay brick", "A hardened clay brick, used in the building of structures such as floors and walls.", "a "), english.item(ItemType.ClayBrickFlooring, "clay brick flooring", "Flooring crafted from clay bricks. Could be used as decoration or as part of a building."), english.item(ItemType.ClayBrickWall, "clay brick wall", "A wall made from clay bricks, set into a typical skewed, grid-like fashion to increase durability.", "a "), english.item(ItemType.ClayFlakes, "clay flakes", "Dried shavings of clay. Created by shaving clay and drying over a period of time."), english.item(ItemType.ClayJug, "clay jug", "A fully hardened clay jug with a cork. Used to hold water.", "a "), english.item(ItemType.ClayJugOfDesalinatedWater, "clay jug of desalinated water", "Potable, safe-to-drink water. The water in this clay jug has gone through the desalination process.", "a "), english.item(ItemType.ClayJugOfMedicinalWater, "clay jug of medicinal water", "A clay jug containing medicinal water, used to cure and soothe certain ailments while also replenishing your thirst.", "a "), english.item(ItemType.ClayJugOfPurifiedFreshWater, "clay jug of purified fresh water", "A clay jug filled with fresh, purified water. Can be used to quench your thirst.", "a "), english.item(ItemType.ClayJugOfSeawater, "clay jug of seawater", "Unfiltered seawater, held in a clay jug. Unsuitable to drink in its current form but could be desalinated.", "a "), english.item(ItemType.ClayJugOfUnpurifiedFreshWater, "clay jug of unpurified fresh water", "A clay jug full of natural, fresh water. Although it is drinkable, further purification is recommended.", "a "), english.item(ItemType.Coal, "coal", "A black and brittle mineral, staining anything it touches, but useful as fuel."), english.item(ItemType.CobblestoneFlooring, "cobblestone flooring", "Primitive flooring created by placing stones in an organized pattern, filling any gaps."), english.item(ItemType.Coconut, "coconut", "A fibrous and heavy fruit. Difficult to consume, but packed with plenty of caloric-dense coconut meat and milk.", "a "), english.item(ItemType.CompositeBow, "composite bow", "An expertly crafted bow, designed for both velocity and force.", "a "), english.item(ItemType.CookedBlindfish, "cooked blindfish", "While the source of the food is a bit suspect, after being cooked, it appears to be more palatable.", "a "), english.item(ItemType.CookedChicken, "cooked chicken", "A well cooked chicken, ready to consume and sure to satisfy.", "a "), english.item(ItemType.CookedCod, "cooked cod", "A seared, well cooked cod, ready to consume and enjoy.", "a "), english.item(ItemType.CookedFishSteak, "cooked fish steak", "A cooked fish fillet, seared on the outside and delicious.", "a "), english.item(ItemType.CookedMeat, "cooked meat", "Adequately heated meat, safe and ready for consumption."), english.item(ItemType.CookedSpider, "cooked spider", "A crispy spider. Not the best texture or flavor, but contains small bits of white meat inside.", "a "), english.item(ItemType.CookedTaintedMeat, "cooked tainted meat", "A piece of discolored meat, cooked to kill possible toxins, but possibly still unsafe for consumption."), english.item(ItemType.CordedSling, "corded sling", "A thick piece of cordage, wrapped and bound with a slot made for a projectile. Used to swing ammunition, increasing throwing range.", "a "), english.item(ItemType.Cork, "cork", "A small cork plug. Crafted from rubbery tree bark; it can be used to contain liquids in bottles and other containers.", "a "), english.item(ItemType.Cotton, "cotton", "A downy bundle of opened cotton seeds, the ideal solution for spinning thread and making fabrics."), english.item(ItemType.CottonBedroll, "cotton bedroll", "A soft and downy sleeping mattress, rolled up for ease of carrying. Can be used to sleep or rest very comfortably.", "a "), english.item(ItemType.CottonFabric, "cotton fabric", "A soft piece of cloth spun from cotton."), english.item(ItemType.CottonSeeds, "cotton seeds", "Unopened, plantable cotton seeds, not yet revealing their white, soft interiors."), english.item(ItemType.Deadfall, "deadfall", "A large, flat rock, propped up with a stick. Once set, anything that triggers it will be crushed or injured from the falling rock.", "a "), english.item(ItemType.DeadSpider, "dead spider", "A spider's carcass. It's hard to stomach, even when cooked. Try not to think about what you're eating.", "a "), english.item(ItemType.DrawnMap, "drawn map", "A paper sheet, scrawled with geographical landmarks and features. Used to approximate a location when read.", "a "), english.item(ItemType.Earthworm, "earthworm", "A live wriggling insect, effective for bait or eating on its own.", "an "), english.item(ItemType.Ectoplasm, "ectoplasm", "A ghostly, weightless fluff of misty goo, strangely self contained and quickly evaporating."), english.item(ItemType.Egg, "egg", "A brown colored egg, laid by a chicken. Can be eaten as is, or cooked for a tastier meal.", "an "), english.item(ItemType.ExplosiveTrap, "explosive trap", "A mound of leaves used to conceal a volatile explosive powder. Stepping on it will trigger a small explosion.", "an "), english.item(ItemType.Feather, "feather", "Some bright white plumage from an avian creature.", "a "), english.item(ItemType.FeatherBedroll, "feather bedroll", "A bedroll made with soft feathers and wrapped in fabric. Used for resting and sleeping in comfort.", "a "), english.item(ItemType.FertileSoil, "fertile soil", "A rich soil suitable for adding to plants to promote their fertility."), english.item(ItemType.FireBladder, "fire bladder", "An oddly shaped organ from a firebreathing creature. Hot to the touch; it appears to contain a deadly chemical reaction inside.", "a "), english.item(ItemType.FirePlough, "fire plough", "A fire making device which uses a stick and groove method to create heat through friction.", "a "), english.item(ItemType.FishingNet, "fishing net", "A checkered weave of string with weights on each corner, used to trap and catch fish.", "a "), english.item(ItemType.FishingRod, "fishing rod", "A flexible, smooth wooden rod with a string line and sharpened hook. Used for fly fishing.", "a "), english.item(ItemType.Flask, "flask", "A glass container which can be heated to use for desalination, a process used to make seawater drinkable.", "a "), english.item(ItemType.FlintlockPistol, "flintlock pistol", "A long range, high damage pistol. Requires black powder and bullets to fire.", "a "), english.item(ItemType.FlowerPetals, "flower petals", "The petals of a yellow flower. Only useful in creating medicinal tonics, or ingesting directly if food supply is low."), english.item(ItemType.FlowerSeeds, "flower seeds", "Dried flower seeds which can be planted to grow flowers."), english.item(ItemType.ForgeAndAnvil, "forge and anvil", "A combination of a stone forge and anvil. Used in the production of metal armor, weapons, and tools.", "a "), english.item(ItemType.Fossil, "fossil", "A carbonized fossil of a species long since extinct.", "a "), english.item(ItemType.Furnace, "furnace", "An enclosed structure made of stone, which traps in the heat to keep a long-lasting, high-temperature fire.", "a "), english.item(ItemType.Giblets, "giblets", "A batch of cooked animal organs. Considerably repugnant, but nutritious and filling.", "a "), english.item(ItemType.GlassBottle, "glass bottle", "A transparent vessel with a cork for containment. Used for collecting water.", "a "), english.item(ItemType.GlassBottleOfDesalinatedWater, "glass bottle of desalinated water", "A bottle filled with clear seawater that has been processed to remove the salt content.", "a "), english.item(ItemType.GlassBottleOfMedicinalWater, "glass bottle of medicinal water", "A bottled concoction of herbs and nutrients. Used to cure thirst, poisons, and other ailments.", "a "), english.item(ItemType.GlassBottleOfPurifiedFreshWater, "glass bottle of purified fresh water", "Potable, and safe to hydrate yourself with. The water has been purified reducing any toxins and unsafe bacteria.", "a "), english.item(ItemType.GlassBottleOfSeawater, "glass bottle of seawater", "Filled to the top with seawater. While seawater is technically drinkable, it will not reduce your thirst.", "a "), english.item(ItemType.GlassBottleOfUnpurifiedFreshWater, "glass bottle of unpurified fresh water", "A bottle containing water that is likely unfit to drink. It will quench your thirst, but may have negative side-effects until it's purified.", "a "), english.item(ItemType.Glue, "glue", "A natural form of glue that can be used to bind and reinforce items."), english.item(ItemType.GoldCoins, "gold coins", "Shiny, golden coins, from a lost civilization unknown to you."), english.item(ItemType.GoldenChalice, "golden chalice", "A large, ornate, and resplendent chalice.", "a "), english.item(ItemType.GoldenKey, "golden key", "A large and decorative key forged from gold.", "a "), english.item(ItemType.GoldenRing, "golden ring", "A golden ring, most likely used as a sign of wealth and power.", "a "), english.item(ItemType.GoldenSword, "golden sword", "An ornate, but soft sword, forged from solid gold. Not suitable for combat due to its softness.", "a "), english.item(ItemType.GrassBlades, "grass blades", "Long and almost sharp to the touch. These semi-dried grass blades are perfect for cordage and string making."), english.item(ItemType.GrassSeeds, "grass seeds", "Small dried grass seeds. Can be planted to grow grass."), english.item(ItemType.GreenSand, "green sand", "A form of malleable sand made with clay, used to make molds for metal casting."), english.item(ItemType.Grindstone, "grindstone", "A coarse rock useful for sanding, sharpening, and repairing other items.", "a "), english.item(ItemType.Hammock, "hammock", "A comfortable place to sleep, although not too sturdy. Crafted by bound cordage and usually hung off of the ground.", "a "), english.item(ItemType.HandDrill, "hand drill", "A rudimentary fire making tool which uses a stick and another piece of wood. Both hands are used to twist the stick against wood, making friction to create an ember for the fire.", "a "), english.item(ItemType.Inkstick, "inkstick", "A hardened brick of ink, used for drawing and painting.", "an "), english.item(ItemType.IronArrow, "iron arrow", "An arrow tipped with a high quality iron arrowhead. Fletched with feathers to stabilize flight and accuracy.", "an "), english.item(ItemType.IronArrowhead, "iron arrowhead", "An expertly forged iron arrowhead, used to create arrows. Alternatively can be used to carve if necessary.", "an "), english.item(ItemType.IronBoots, "iron boots", "Heavy iron plated boots, shielding your feet from damage."), english.item(ItemType.IronBreastplate, "iron breastplate", "Durable, armor worn over the torso. One could take a serious beating while wearing this.", "an "), english.item(ItemType.IronBullet, "iron bullet", "A strong, forged iron bullet. Used as sling or firearm ammunition.", "an "), english.item(ItemType.IronChest, "iron chest", "A large iron chest that is both roomy and sturdy. Foods contained within will decay at a slower rate.", "an "), english.item(ItemType.IronDoubleAxe, "iron double axe", "An axe with a forged, double sided head, ideal for both combat and gathering.", "an "),
    english.item(ItemType.IronGauntlets, "iron gauntlets", "Iron gloves designed to be protective and durable, while maintaining as much flexibility as possible."), english.item(ItemType.IronGorget, "iron gorget", "A round metal brace worn around the neck and over the shoulders.", "an "), english.item(ItemType.IronGreaves, "iron greaves", "Iron leggings; to be strapped on and function as leg protection."), english.item(ItemType.IronHammer, "iron hammer", "A strong hammer with an iron head, perfect for shaping and repairing items.", "an "), english.item(ItemType.IronHelmet, "iron helmet", "Iron plated headgear designed to withstand heavy blows.", "an "), english.item(ItemType.IronIngot, "iron ingot", "A solid brick of iron, ready to be formed or melted and cast in many ways.", "an "), english.item(ItemType.IronLockPick, "iron lock pick", "A pair of iron picks and wrenches, durable enough to pick the most adept of locks.", "an "), english.item(ItemType.IronOre, "iron ore", "Unprocessed, raw iron ore. Can be smelted into ingots."), english.item(ItemType.IronPickaxe, "iron pickaxe", "A robust mining implement, with a blade forged from iron.", "an "), english.item(ItemType.IronShield, "iron shield", "A large and heavy iron shield, used for blocking projectiles or melee attacks.", "an "), english.item(ItemType.IronShovel, "iron shovel", "A heavy iron digging implement, lifting and breaking through even the toughest gravels and soils.", "an "), english.item(ItemType.IronSpear, "iron spear", "A polearm with a strong pointed tip forged from iron.", "an "), english.item(ItemType.IronSword, "iron sword", "A strong, sharp blade designed for thrusting and slashing.", "an "), english.item(ItemType.IronTongs, "iron Tongs", "Durable iron tongs used to grab hot items, protecting your hands from damage."), english.item(ItemType.Kiln, "kiln", "Similar to a furnace, but constructed from sandstone. It allows proper heat distribution for crafting glass and clay items.", "a "), english.item(ItemType.Kindling, "kindling", "A gathering of small twigs and tree matter. A requirement for starting a fire."), english.item(ItemType.LargeRock, "large rock", "A rather large rock, handy for crafting many tools and devices.", "a "), english.item(ItemType.LeafBedroll, "leaf bedroll", "A provisional bed with poor insulation and scratchy half-dried leaves, used for sleeping or resting.", "a "), english.item(ItemType.LeatherBelt, "leather belt", "Made from tanned animal hide, cut, wrapped, and stitched together to tie around the waist.", "a "), english.item(ItemType.LeatherBoots, "leather boots", "Malleable yet tough foot protection, crafted from tanned animal hide."), english.item(ItemType.LeatherCap, "leather cap", "A hat made of leather, double layered for extra sturdiness.", "a "), english.item(ItemType.LeatherGloves, "leather gloves", "Leather-bound hand protection, crafted from tanned animal hide."), english.item(ItemType.LeatherGorget, "leather gorget", "A circlet of leather, bound in two, stitched together and used as neck protection.", "a "), english.item(ItemType.LeatherHide, "leather hide", "A fresh leather hide, stripped from an animal and de-furred.", "a "), english.item(ItemType.LeatherPants, "Leather Pants", "Basic leather leggings with just enough padding to provide some leg protection."), english.item(ItemType.LeatherQuiver, "leather quiver", "A leather-bound, back-mounted container designed to hold arrows; however, other items will also fit inside as well.", "a "), english.item(ItemType.LeatherSling, "leather sling", "A sling crafted from tanned leather. Designed to hold a projectile to be thrown at an increased velocity.", "a "), english.item(ItemType.LeatherTunic, "leather tunic", "A leather garment which provides protection for the torso.", "a "), english.item(ItemType.Leaves, "leaves", "A handful of foliage used as compost or to stoke a fire."), english.item(ItemType.Lens, "lens", "Glass formed into a partially convex shape. It allows focusing sunlight into a single location, creating enough heat for a fire.", "a "), english.item(ItemType.Limestone, "limestone", "A mineral-rich rock that can be ground into a powder. Useful for metal and glass production."), english.item(ItemType.LimestonePowder, "limestone powder", "A white, mineral-dense powder used in glass tempering and the purifying of metals."), english.item(ItemType.LitAnimalFatTorch, "lit animal fat torch", "A bright burning, pleasant smelling torch. Made with a pole and long lasting, rendered animal fat.", "a "), english.item(ItemType.LitBarkTorch, "lit bark torch", "Provides light to your surroundings when equipped and can also be used to start other fires.", "a "), english.item(ItemType.LitPoleTorch, "lit pole torch", "A wooden pole that has been lit on fire. Not suitable for long journeys in the darkness.", "a "), english.item(ItemType.LockPick, "lock pick", "An improvised needle and prong that should be strong enough to pick a lock or two.", "a "), english.item(ItemType.Log, "log", "A sturdy piece of wood, useful for construction or as a fuel for a fire.", "a "), english.item(ItemType.LongBow, "long bow", "Nearly as tall as the average person, this bow is designed for maximum range.", "a "), english.item(ItemType.MagicalEssence, "magical essence", "An odd transparent powder with organic and ethereal materials. This magical matter may be used on items to affix magical properties on to them."), english.item(ItemType.MeltedAmber, "melted amber", "Warmed amber resin; used to create a hardened bind when cooled on to an object."), english.item(ItemType.MessageInABottle, "message in a bottle", "An old cloudy bottle with an unidentified object contained inside.", "a "), english.item(ItemType.MonsterIdol, "monster idol", "A mass of animal organs, crudely shaped into some kind of figure. It smells awful and emits an odd humming noise, and appears to attract creatures.", "a "), english.item(ItemType.MortarAndPestle, "mortar and pestle", "Used for grinding and crushing, made from smooth stones.", "a "), english.item(ItemType.Niter, "niter", "A natural mineral, ground up to be used as a preservative or for other chemical applications."), english.item(ItemType.Nopal, "nopal", "A de-spined cactus fruit, filled with refreshing liquid and nutrition."), english.item(ItemType.Offal, "offal", "A mound of organs, tissue, and other undesirable portions of an unlucky animal."), english.item(ItemType.OldInstructionalScroll, "old instructional scroll", "A tattered sheet of paper with some roughly scribbled instructions and diagrams.", "an "), english.item(ItemType.OrnateCape, "ornate cape", "A red and gold stitched cape, which drapes the back and fastens at the neck. Worn as a status symbol.", "an "), english.item(ItemType.OrnateWoodenChest, "ornate wooden chest", "A decorative wooden container gilded with symbols inlaid into the wood.", "an "), english.item(ItemType.PalmLeaf, "palm leaf", "A large leaf from a palm tree. The strong inner fibers of the leaf are perfect for cordage.", "a "), english.item(ItemType.PaperMold, "paper mold", "A mold used for making paper. Contains a screen that holds wet recycled fibers to dry and press into flattened, usable paper.", "a "), english.item(ItemType.PaperSheet, "paper sheet", "A large piece of paper. It appears to contain many recycled fibers. Suitable for drawing on with ink.", "a "), english.item(ItemType.Peat, "peat", "A dried mass of sponge-like plants, great for fire fuel and composting."), english.item(ItemType.PeatBandage, "peat bandage", "A fabric bandage combined with peat as an effective antiseptic.", "a "), english.item(ItemType.Pemmican, "pemmican", "A ball of dried ground meat. With a long shelf life, this is the ultimate survival food. For the best benefits, prepare it with animal fat."), english.item(ItemType.PileOfAsh, "pile of ash", "The powdery remains of burned matter.", "a "), english.item(ItemType.PileOfCompost, "pile of compost", "A mix of decaying organic matter and soil, full of chemical nutrients and great for growing plants.", "a "), english.item(ItemType.PileOfGravel, "pile of gravel", "A large pile of damp stone and sand.", "a "), english.item(ItemType.PileOfSand, "pile of sand", "A large pile of moist sand, useful for making glass when refined.", "a "), english.item(ItemType.PileOfSnow, "pile of snow", "A melting snow pile. Useful to drink in desperate need, but be quick!", "a "), english.item(ItemType.Pineapple, "pineapple", "A juicy, ripe pineapple, loaded with vitamins and thirst-quenching attributes.", "a "), english.item(ItemType.PineappleSeeds, "pineapple seeds", "Small brown seeds that can be planted to grow into pineapple plants."), english.item(ItemType.PlantRoots, "plant roots", "A tangled mess of roots, with earth still hanging from the tips."), english.item(ItemType.PoisonIvyLeaves, "poison ivy leaves", "Causes irritation to the touch; these leaves of three do not belong on your person."), english.item(ItemType.PoisonIvySeeds, "poison ivy seeds", "Bright green, soft seeds, used to plant to grow into poison ivy."), english.item(ItemType.PreparedPemmican, "prepared pemmican", "A seasoned mound of dried ground meat, fried and cooked with fat for maximum flavor and caloric content."), english.item(ItemType.Raft, "raft", "A small, simple boat; a quicker alternative to swimming. Effective for traversing large expanses of water.", "a "), english.item(ItemType.RawBlindfish, "raw blindfish", "An odd looking fish with no eyes. Very slimy to the touch.", "a "), english.item(ItemType.RawChicken, "raw chicken", "A small, plump and de-feathered chicken carcass, ready for cooking.", "a "), english.item(ItemType.RawClay, "raw clay", "A soft, formable mud. Suitable for building materials, tool-making, and more."), english.item(ItemType.RawClayBlowpipe, "raw clay blowpipe", "An unfired clay blowpipe used in glassblowing. Unusable until it has been fired.", "a "), english.item(ItemType.RawClayBrick, "raw clay brick", "A soft piece of raw clay, molded into a rectangle. Ready to be fired inside a kiln.", "a "), english.item(ItemType.RawClayJug, "raw clay jug", "A formed and sculpted jug molded from raw clay. Requires a cork and a kiln to be fired and hardened.", "a "), english.item(ItemType.RawCod, "raw cod", "Slimy to the touch, but healthy and delicious to eat. Can be cooked for a better meal.", "a "), english.item(ItemType.RawFishSteak, "raw fish steak", "A raw piece of fish, cut into a fillet. Good to eat as is, but is tastier cooked.", "a "), english.item(ItemType.RawMeat, "raw meat", "A raw, bloody chunk of meat. Cooking is recommended before consumption."), english.item(ItemType.RawTaintedMeat, "raw tainted meat", "A piece of bad-smelling meat, possibly diseased or tainted with parasites. Possible to consume, but could be deadly."), english.item(ItemType.RedBerries, "red berries", "Lush, ripe berries, plucked from a tree or bush."), english.item(ItemType.RefinedSand, "refined sand", "A finely ground sand, useful in making glass."), english.item(ItemType.RollOfRedCarpet, "roll of red carpet", "A rolled up piece of red carpet, suitable for making a comfortable living space or welcoming important guests.", "a "), english.item(ItemType.Rope, "rope", "A thick, twisted piece of cordage, useful for heavy-duty binding.", "a "), english.item(ItemType.RottenMeat, "rotten meat", "Acrid decomposing animal tissue. You would not want to eat this, but can be used in compost."), english.item(ItemType.RottingVegetation, "rotting vegetation", "A stinking mash of organic plant matter, now usable as compost. Unless you want to risk eating it."), english.item(ItemType.Sail, "sail", "A large piece of fabric, woven together to be attached to a mast. Used on a sailboat to propel it along the sea.", "a "), english.item(ItemType.Sailboat, "sailboat", "A large one-man boat. Used to traverse large expanses of water and for travel back to civilization.", "a "), english.item(ItemType.Saltpeter, "saltpeter", "A ground mineral, to be used as a natural food preservative. If combined with other minerals, it can be combustible."), english.item(ItemType.SandCastFlask, "sand cast flask", "A mold for casting metal into any shape, made with green sand.", "a "), english.item(ItemType.Sandstone, "sandstone", "A soft, malleable rock, useful for construction and tool making."), english.item(ItemType.SandstoneFlooring, "sandstone flooring", "A group of sandstone bricks, placed in a grid to be used as flooring."), english.item(ItemType.SandstoneWall, "sandstone wall", "A constructed wall built from mined sandstone.", "a "), english.item(ItemType.Sapling, "sapling", "A young, fertile tree, suitable for replanting.", "a "), english.item(ItemType.Seaweed, "seaweed", "A stringy mass of sea plants. Can be used as cordage or eating in desperation."), english.item(ItemType.Shale, "shale", "A brittle but sharp carving implement."), english.item(ItemType.SharpenedBone, "sharpened bone", "A sharp bone, useful for carving other objects.", "a "), english.item(ItemType.SharpGlass, "sharp glass", "A semi-opaque shard of glass, formed after melting sand down."), english.item(ItemType.SharpRock, "sharp rock", "A sharpened rock, useful for crafting, tool making, and carving when required.", "a "), english.item(ItemType.SheetOfGlass, "sheet of glass", "A cloudy tempered piece of glass. Practical for many optical tools and other simple devices used to harness the sun.", "a "), english.item(ItemType.ShortBow, "short bow", "A bow designed for powerful shots at close range.", "a "), english.item(ItemType.Sinew, "sinew", "Strong and flexible animal tissue. Commonly used for making bows or simple cordage."), english.item(ItemType.SkeletalMageWand, "skeletal mage wand", "A mysterious, gnarled staff with a twinkling red gemstone attached to the end.", "a "), english.item(ItemType.Skullcap, "skullcap", "A hollowed-out animal skull, useful as a provisional helmet.", "a "), english.item(ItemType.SlimeGelatin, "slime gelatin", "A lump of slime gelatin which jiggles upon your touch. Can be used to preserve food, or melted down and used as glue."), english.item(ItemType.SmallBag, "small bag", "A leather pouch used for holding a few items, carried at your waist, reducing encumbrance.", "a "), english.item(ItemType.SmoothRock, "smooth rock", "A round, smoothed rock, useful for many crafts.", "a "), english.item(ItemType.Snare, "snare", "A short pole pushed into the ground with a string attached. Designed to ensnare creatures in its slipknot.", "a "), english.item(ItemType.Soil, "soil", "A pile of moist dirt. The heavy smell of earth permeates your nostrils when holding it."), english.item(ItemType.SolarStill, "solar still", "A still that collects condensation and filters it into in a hole beneath the glass, desalinating the water and draining it into a container.", "a "), english.item(ItemType.SpiderEggs, "spider eggs", "Soft and squishy to the touch. These small silken eggs contain arachnid life inside."), english.item(ItemType.SpiderSilk, "spider silk", "A delicate but strong strand of silk, produced by a spider. Can be used as cordage."), english.item(ItemType.SpottedRedMushroom, "spotted red mushroom", "An odd looking, foul smelling mushroom.", "a "), english.item(ItemType.Spyglass, "spyglass", "An improvised, short-range telescope, which can be used to see slightly further away in any direction when equipped.", "a "), english.item(ItemType.StoneArrowhead, "stone arrowhead", "Crafted from stone and to be used in the crafting of arrows. Could also be used as a carving implement.", "a "), english.item(ItemType.StoneAxe, "stone axe", "A dual-use tool which is both sharp and blunt. Can be used to chop wood or mine stone with ease.", "a "), english.item(ItemType.StoneBullet, "stone bullet", "A basic stone projectile for slings and firearms. Smooth and more or less spherical in shape.", "a "), english.item(ItemType.StoneHammer, "stone hammer", "A rudimentary stone hammer, braced on the end of a pole with string. Used for gathering and repairing.", "a "), english.item(ItemType.StoneKnife, "stone knife", "A sharpened piece of stone, carved into a blade, with a handle for support. Can be used as a weapon, gathering tool or to carve.", "a "), english.item(ItemType.Stones, "stones", "A mass of small rocks. Can be used for throwing or crafting."), english.item(ItemType.StoneShovel, "stone shovel", "A digging tool made of stone, used to collect different materials from the ground or to route water.", "a "), english.item(ItemType.StoneSpear, "stone spear", "A hunting weapon crafted with a stone head, suitable as a throwing weapon.", "a "), english.item(ItemType.StoneWall, "stone wall", "A series of interlaced stones and rocks, shaped into a vertical wall structure. Can be built to keep enemies out.", "a "), english.item(ItemType.StoneWaterStill, "stone water still", "A hollowed out rock with a stone lid. It's used to desalinate water by boiling it and then collecting the steam into a separate container.", "a "), english.item(ItemType.String, "string", "Woven fabric; the cornerstone of all crafting materials, mainly used for binding."), english.item(ItemType.StrippedBark, "stripped bark", "A strong, fibrous shaving from a branch, useful for making cordage."), english.item(ItemType.Sundial, "sundial", "A stone timepiece that uses the location of the sun or moon to show the approximate time of day or night.", "a "), english.item(ItemType.Suture, "suture", "A sharp needle tool with an attached thin string, used to sew and close gaping wounds.", "a "), english.item(ItemType.TailFeathers, "tail feathers", "A fluffy clump of white feathers, removed from an avian creature's backside."), english.item(ItemType.Talc, "talc", "A very chalky mineral, only useful in its powder form."), english.item(ItemType.TalcumPowder, "talcum powder", "Chalky and abundantly absorbent to the touch. An agent required for casting of advanced metals."), english.item(ItemType.TallGrassSeeds, "tall grass seeds", "Long dried grass seeds. Can be planted to grow a longer type of grass."), english.item(ItemType.TannedLeather, "tanned leather", "A durable, treated piece of leather. Used in crafting armor and other tools."), english.item(ItemType.Tannin, "tannin", "A natural treating agent. To be applied on hides to create tanned leather."), english.item(ItemType.TatteredMap, "tattered map", "An old torn map covered with drawings and scribbles, a bit hard to make sense of on first glance.", "a "), english.item(ItemType.TatteredPants, "tattered pants", "Brown colored pants, now reduced to shorts from distress and wear."), english.item(ItemType.TatteredShirt, "tattered shirt", "A once fine piece of a clothing, now torn and tattered.", "a "), english.item(ItemType.Thistles, "thistles", "The flowering bulb of a thistle plant. Filled with a bitter but nutritious milk."), english.item(ItemType.ThistleSeeds, "thistle seeds", "Small hard seeds, used for growing thistle plants."), english.item(ItemType.Tinder, "tinder", "A dry bunch of wooden shavings, used to ignite kindling when starting a fire."), english.item(ItemType.Tourniquet, "tourniquet", "A hard stud twisted together with a string. Used to twist around a bleeding wound to stem the flow of blood.", "a "), english.item(ItemType.TreeBark, "tree bark", "A tough, dense chunk of bark, broken off from a tree."), english.item(ItemType.TreeFungus, "tree fungus", "A semi-hard chunk of fungus, grown from a tree and possibly edible."), english.item(ItemType.Twigs, "twigs", "A small pile of sticks and tree limbs."), english.item(ItemType.VenomGland, "venom gland", "The venom producing gland of a snake, still filled with some immobilizing venom.", "a "), english.item(ItemType.Vine, "vine", "A long, winding tree vine, suitable for cordage.", "a "), english.item(ItemType.VineSeeds, "vine seeds", "Seeds to grow vines. Can be eaten if desperate, but they do not contain any significant nutrition."), english.item(ItemType.VineWhip, "vine whip", "A makeshift weapon made simply with tree vines wrapped together.", "a "), english.item(ItemType.Waterskin, "waterskin", "A portable water container, made from stitched leather.", "a "), english.item(ItemType.WaterskinOfDesalinatedWater, "waterskin of desalinated water", "A waterskin full of freshly desalinated seawater.", "a "), english.item(ItemType.WaterskinOfMedicinalWater, "waterskin of medicinal water", "A soothing mixture of plants and roots. Used to heal poisons and illnesses.", "a "), english.item(ItemType.WaterskinOfPurifiedFreshWater, "waterskin of purified fresh water", "A full waterskin of fresh, safe-to-drink water.", "a "), english.item(ItemType.WaterskinOfSeawater, "waterskin of seawater", "A waterskin full of seawater, not suitable for drinking without desalination.", "a "), english.item(ItemType.WaterskinOfUnpurifiedFreshWater, "waterskin of unpurified fresh water", "Unpurified and possibly hazardous water. It is recommended you purify the water before drinking.", "a "), english.item(ItemType.WhiteMushrooms, "white mushrooms", "Edible, long lasting mushrooms. They appear safe to consume."), english.item(ItemType.WildOnion, "wild onion", "A strong smelling and tasting plant, packed with nutrients and vitamins.", "a "), english.item(ItemType.WoodenArrow, "wooden arrow", "A provisional wooden projectile to be fired from a bow. Crafted with a feather to control flight.", "a "), english.item(ItemType.WoodenChest, "wooden chest", "A large wooden container that can fit many items while placed on the ground. Foods will decay slower within it.", "a "), english.item(ItemType.WoodenDoor, "wooden door", "A door crafted from long wooden planks with large wooden hinges. Can be opened and closed when built.", "a "), english.item(ItemType.WoodenFence, "wooden fence", "A section of wooden fencing, constructed from three logs and held together with horizontal beams.", "a "), english.item(ItemType.WoodenFlooring, "wooden flooring", "Wooden floor boards; planed to equal height and length."), english.item(ItemType.WoodenGate, "wooden gate", "A gate crafted from long wooden planks with small wooden hinges. Can be opened and closed when built.", "a "), english.item(ItemType.WoodenPole, "wooden pole", "A long branch, carved and shaved down into a smooth rod.", "a "), english.item(ItemType.WoodenSpear, "wooden spear", "A makeshift, easy to craft hunting weapon. Makes for an ideal ranged weapon.", "a "), english.item(ItemType.WoodenTongs, "wooden tongs", "A pair of simple wood tongs, used to pick up hot objects without injury."), english.item(ItemType.WoodenWall, "wooden wall", "A sturdy set of bound logs, forming a protective wall that can be placed.", "a "), english.item(ItemType.WovenFabric, "woven fabric", "A makeshift piece of fibrous tissue, woven together into fabric."), english.item(ItemType.WroughtIron, "wrought iron", "A heavily oxidized and unpurified form of iron, used in the forging of brittle tools, weapons, and armor."), english.item(ItemType.WroughtIronArrow, "wrought iron arrow", "An arrow with a wrought iron arrowhead. The shaft of the arrow is long and is fletched with feathers.", "a "), english.item(ItemType.WroughtIronArrowhead, "wrought iron arrowhead", "Forged with wrought iron, this arrowhead is used to craft an arrow. In dire need, it could also be used for carving.", "a "), english.item(ItemType.WroughtIronBoots, "wrought iron boots", "Wrought iron footwear. Heavy and made specifically for protecting feet and lower legs."), english.item(ItemType.WroughtIronBreastPlate, "wrought iron breastplate", "A large wrought iron chest plate, worn over the torso.", "a "), english.item(ItemType.WroughtIronBullet, "wrought iron bullet", "A small ball of wrought iron, used as ammunition for slingshots or firearms.", "a "), english.item(ItemType.WroughtIronChest, "wrought iron chest", "A spacious container built from wrought iron that can store many items. Foods will spoil slower inside of it.", "a "), english.item(ItemType.WroughtIronDoubleAxe, "wrought iron double axe", "A dual-bladed axe which can provide enough slashing damage for both combat and gathering.", "a "), english.item(ItemType.WroughtIronGauntlets, "wrought iron gauntlets", "Intricate and sturdy, these wrought iron gloves fit snugly on your hands."), english.item(ItemType.WroughtIronGorget, "wrought iron gorget", "A molded piece of metal, used to protect the area around the neck and shoulders.", "a "), english.item(ItemType.WroughtIronGreaves, "wrought iron greaves", "Wrought iron leggings, strapped and padded around the legs to reduce most damage."), english.item(ItemType.WroughtIronHammer, "wrought iron hammer", "A large mallet crafted from wrought iron. Useful for repairing and sometimes gathering.", "a "), english.item(ItemType.WroughtIronHelmet, "wrought iron helmet", "Using a barbute design, this iron helmet shields the head from most kinds of attacks.", "a "), english.item(ItemType.WroughtIronLockPick, "wrought iron lock pick", "A set of picks and wrenches made from wrought iron, used for picking and unlocking locked devices.", "a "), english.item(ItemType.WroughtIronPickaxe, "wrought iron pickaxe", "A dual-headed mining implement. One head is heavy and blunt, the other, spiked to cut through rock with ease.", "a "), english.item(ItemType.WroughtIronShield, "wrought iron shield", "A sturdy wrought iron shield, made by bending large sheets of metal into shape.", "a "), english.item(ItemType.WroughtIronShovel, "wrought iron shovel", "A shovel with an angled, pointed head, useful for digging and water routing.", "a "), english.item(ItemType.WroughtIronSpear, "wrought iron spear", "A polearm with pointed head, crafted from wrought iron. Used in melee or thrown in combat.", "a "), english.item(ItemType.WroughtIronSword, "wrought iron sword", "A long, sharpened blade fitted into a solid hilt and forged from wrought iron. A good, strong weapon.", "a "), english.item(ItemType.WroughtIronTongs, "wrought iron tongs", "A pair of tongs, forged from wrought iron. Used to lift hot objects without injury."), english.itemGroup(ItemTypeGroup.Arrow, "arrow", "an "), english.itemGroup(ItemTypeGroup.Bedding, "bedding", "a ", " item"), english.itemGroup(ItemTypeGroup.Bone, "bone", "a "), english.itemGroup(ItemTypeGroup.Bullet, "bullet", "a "), english.itemGroup(ItemTypeGroup.Carbon, "carbon", "a ", " item"), english.itemGroup(ItemTypeGroup.ClayJugOfPotableWater, "clay jug of potable water", "a "), english.itemGroup(ItemTypeGroup.Compost, "compost", "a ", " item"), english.itemGroup(ItemTypeGroup.Container, "container", "a "), english.itemGroup(ItemTypeGroup.ContainerOfDesalinatedWater, "container of desalinated water", "a "), english.itemGroup(ItemTypeGroup.ContainerOfMedicinalWater, "container of medicinal water", "a "), english.itemGroup(ItemTypeGroup.ContainerOfPurifiedFreshWater, "container of purified fresh water", "a "), english.itemGroup(ItemTypeGroup.ContainerOfSeawater, "container of seawater", "a "), english.itemGroup(ItemTypeGroup.ContainerOfUnpurifiedFreshWater, "container of unpurified fresh water", "a "), english.itemGroup(ItemTypeGroup.CookedMeat, "cooked meat", "a ", " item"), english.itemGroup(ItemTypeGroup.Cordage, "cordage", "a ", " item"), english.itemGroup(ItemTypeGroup.Equipment, "equipment", "an ", " item"), english.itemGroup(ItemTypeGroup.Fabric, "fabric", "a ", " item"), english.itemGroup(ItemTypeGroup.Firemaking, "firemaking", "a ", " item"), english.itemGroup(ItemTypeGroup.Food, "food", "a ", " item"), english.itemGroup(ItemTypeGroup.Fuel, "fuel", "a ", " item"), english.itemGroup(ItemTypeGroup.Gardening, "gardening", "a ", " item"), english.itemGroup(ItemTypeGroup.GlassBottleOfPotableWater, "glass bottle of potable water", "a "), english.itemGroup(ItemTypeGroup.Hammer, "hammer", "a "), english.itemGroup(ItemTypeGroup.Health, "health", "a ", " item"), english.itemGroup(ItemTypeGroup.Heating, "heating", "a ", " item"), english.itemGroup(ItemTypeGroup.Housing, "housing", "a ", " item"), english.itemGroup(ItemTypeGroup.Insect, "insect", "an "), english.itemGroup(ItemTypeGroup.LightSource, "light source", "a "), english.itemGroup(ItemTypeGroup.Meat, "meat", "a ", " item"), english.itemGroup(ItemTypeGroup.Medicinal, "medicinal", "a ", " item"), english.itemGroup(ItemTypeGroup.Needle, "needle", "a "), english.itemGroup(ItemTypeGroup.Other, "other", "an ", " item"), english.itemGroup(ItemTypeGroup.Pole, "pole", "a "), english.itemGroup(ItemTypeGroup.Powder, "powder", "a "), english.itemGroup(ItemTypeGroup.Preservative, "preservative", "a "), english.itemGroup(ItemTypeGroup.Pulp, "pulp", "a ", " item"), english.itemGroup(ItemTypeGroup.RawMeat, "raw meat", "a ", " item"), english.itemGroup(ItemTypeGroup.Reinforce, "reinforce", "a ", " item"), english.itemGroup(ItemTypeGroup.Repair, "repair", "a ", " item"), english.itemGroup(ItemTypeGroup.Rock, "rock", "a "), english.itemGroup(ItemTypeGroup.Sharpened, "sharpened", "a ", " item"), english.itemGroup(ItemTypeGroup.SharpenedRock, "sharpened rock", "a "), english.itemGroup(ItemTypeGroup.Skewer, "skewer", "a "), english.itemGroup(ItemTypeGroup.Storage, "storage", "a ", " item"), english.itemGroup(ItemTypeGroup.Tongs, "tongs", ""), english.itemGroup(ItemTypeGroup.Tool, "tool", "a "), english.itemGroup(ItemTypeGroup.Transmogrify, "transmogrify", "a ", " item"), english.itemGroup(ItemTypeGroup.Trap, "trap", "a "), english.itemGroup(ItemTypeGroup.Travel, "travel", "a ", " item"), english.itemGroup(ItemTypeGroup.Treasure, "treasure", "a "), english.itemGroup(ItemTypeGroup.Water, "water", "a ", " item"), english.itemGroup(ItemTypeGroup.WaterskinOfPotableWater, "waterskin of potable water", "a "), english.itemGroup(ItemTypeGroup.Weapon, "weapon", "a "), english.doodad(DoodadType.Acid, "acid"), english.doodad(DoodadType.BarePalmTree, "bare palm tree", "a "), english.doodad(DoodadType.BareTree, "bare tree", "a "), english.doodad(DoodadType.BerryBush, "berry bush", "a "), english.doodad(DoodadType.Cacti, "cacti"), english.doodad(DoodadType.Campfire, "campfire", "a "), english.doodad(DoodadType.CaveEntrance, "cave entrance", "a "), english.doodad(DoodadType.ClayBrickWall, "clay brick wall", "a "), english.doodad(DoodadType.Cotton, "cotton"), english.doodad(DoodadType.DeadBush, "dead bush", "a "), english.doodad(DoodadType.ForgeAndAnvil, "forge and anvil", "a "), english.doodad(DoodadType.Furnace, "furnance", "a "), english.doodad(DoodadType.GrowingGrass, "growing grass"), english.doodad(DoodadType.GrowingMushroom, "growing mushroom", "a "), english.doodad(DoodadType.GrowingPlant, "growing plant", "a "), english.doodad(DoodadType.IronChest, "iron chest", "an "), english.doodad(DoodadType.Kiln, "kiln", "a "), english.doodad(DoodadType.LitCampfire, "lit campfire", "a "), english.doodad(DoodadType.LitForgeAndAnvil, "lit forge and anvil", "a "), english.doodad(DoodadType.LitFurnace, "lit furnance", "a "), english.doodad(DoodadType.LitKiln, "lit kiln", "a "), english.doodad(DoodadType.LitStoneWaterStill, "lit stone water still", "a "), english.doodad(DoodadType.LitTorchStand, "lit torch stand", "a "), english.doodad(DoodadType.LockedWoodenChest, "locked wooden chest", "a "), english.doodad(DoodadType.MonsterIdol, "monster idol", "a "), english.doodad(DoodadType.OrnateWoodenChest, "ornate wooden chest", "an "), english.doodad(DoodadType.PalmTree, "palm tree", "a "), english.doodad(DoodadType.PalmTreeWithCoconuts, "palm tree with coconuts", "a "), english.doodad(DoodadType.PileOfRocks, "pile of rocks", "a "), english.doodad(DoodadType.PineapplePlant, "pineapple plant", "a "), english.doodad(DoodadType.PoisonIvy, "poison ivy"), english.doodad(DoodadType.SandstoneWall, "sandstone wall ", "a "), english.doodad(DoodadType.Sapling, "sapling", "a "), english.doodad(DoodadType.Seaweed, "seaweed"), english.doodad(DoodadType.SetDeadfall, "set deadfall", "a "), english.doodad(DoodadType.SetExplosiveTrap, "set explosive trap", "a "), english.doodad(DoodadType.SetHobgoblinSnare, "set hobgoblin snare", "a "), english.doodad(DoodadType.SetSnare, "set snare", "a "), english.doodad(DoodadType.SolarStill, "solar still", "a "), english.doodad(DoodadType.SpottedRedMushroom, "spotted red mushroom", "a "), english.doodad(DoodadType.StoneWall, "stone wall", "a "), english.doodad(DoodadType.StoneWaterStill, "stone water still", "a "), english.doodad(DoodadType.TallGrass, "tall grass"), english.doodad(DoodadType.Thistles, "thistles"), english.doodad(DoodadType.TorchStand, "torch stand", "a "), english.doodad(DoodadType.Tree, "tree", "a "), english.doodad(DoodadType.TreeWithBerries, "tree with berries", "a "), english.doodad(DoodadType.TreeWithFungus, "tree with fungus", "a "), english.doodad(DoodadType.TreeWithVines, "tree with vines", "a "), english.doodad(DoodadType.Vines, "vines"), english.doodad(DoodadType.WhiteMushrooms, "white mushrooms"), english.doodad(DoodadType.WildOnion, "wild onion", "a "), english.doodad(DoodadType.WoodenChest, "wooden chest", "a "),
    english.doodad(DoodadType.WoodenDoor, "wooden door", "a "), english.doodad(DoodadType.WoodenDoorOpen, "open wooden door", "an "), english.doodad(DoodadType.WoodenFence, "wooden fence", "a "), english.doodad(DoodadType.WoodenGate, "wooden gate", "a "), english.doodad(DoodadType.WoodenGateOpen, "open wooden gate", "an "), english.doodad(DoodadType.WoodenWall, "wooden wall", "a "), english.doodad(DoodadType.WroughtIronChest, "wrought iron chest", "a "), english.doodad(DoodadType.YellowFlowers, "yellow flowers"), english.use(ActionType.Attack, "Attack", ""), english.use(ActionType.Build, "Build", "Attempt to construct or assemble the item on the tile you are facing towards."), english.use(ActionType.Carve, "Carve", "Used to carve creature corpses or to remove objects attached to the ground."), english.use(ActionType.Cast, "Cast", "Find a fish in a body of water and attempt to cast your line or net to catch it."), english.use(ActionType.Decode, "Decode", "Used for attempting to read the map. Use by the treasure location to reveal how far or close you are."), english.use(ActionType.Dig, "Dig", "Used to dig up resources and items from the ground."), english.use(ActionType.Disassemble, "Disassemble", ""), english.use(ActionType.Dismantle, "Dismantle", ""), english.use(ActionType.DrawMap, "Draw Map", "Draw a map using your skill in cartography of the surrounding area."), english.use(ActionType.Drink, "Drink", "Consumed on use. Will reduce your thirst; however, will provide negative effects when drinking sea/unpurified water."), english.use(ActionType.DrinkCure, "Drink Cure", "Consumed on use. Used to cure poisoning while sometimes providing other health benefits."), english.use(ActionType.Eat, "Eat", "Consumed on use. May provide benefits to hunger, thirst, health and stamina; however, may reduce them as well depending on the food."), english.use(ActionType.Extinguish, "Extinguish", "Douse the torch, extinguishing the flame."), english.use(ActionType.Fire, "Fire", "Using a mixture of Black Powder along with a bullet, you may fire this weapon."), english.use(ActionType.Garden, "Garden", "Use on a plant to increase its fertility. Can only be used on some plant types."), english.use(ActionType.Gather, "Gather", "Can be used directly to gather from an adjacent resource tile. Equipping this allows it to be automatically used when walking into resource tiles."), english.use(ActionType.GatherTreasure, "Gather Treasure", "Attempt to gather a treasure in the vicinity of use based on a decoded treasure map. Range of gather is dependent on your Mining skill."), english.use(ActionType.GatherWater, "Gather Water", "Used to gather water into the item."), english.use(ActionType.Heal, "Heal", "Consumed on use. Used to restore a varied amount of health."), english.use(ActionType.Ignite, "Ignite", "Use this item on a fire source to start it on fire."), english.use(ActionType.LockPick, "Lock Pick", "Used to unlock locked objects."), english.use(ActionType.Open, "Open", "Consumed on use. Using this will open it, providing new and unknown items."), english.use(ActionType.OpenContainer, "Open Container", "Using this will open it where you may drag and drop items to and from. Weight reduction and decay reduction bonuses may apply to items inside."), english.use(ActionType.Paddle, "Paddle", "Used to travel over water without getting your feet wet. Your speed is not reduced in water while paddling."), english.use(ActionType.Pickup, "Pick-up", ""), english.use(ActionType.Plant, "Plant", "Attempts to plant the item on the tile you are facing towards. Some plants may require certain ground types or conditions to be planted."), english.use(ActionType.Pour, "Pour", "Pour on fire to extinguish the flames, pour inside a water still to begin water filtration, pour on a suitable plant to increase its health, or just simply empty out."), english.use(ActionType.PourOnYourself, "Pour on Yourself", "Liquid is consumed on use. Used to sooth burn injuries."), english.use(ActionType.Preserve, "Preserve", "Used with food items to extend their life and decay rate."), english.use(ActionType.Read, "Read", "Consumed on use. Reading usually provides useful knowledge."), english.use(ActionType.Reinforce, "Reinforce", "Consumed on use. Use while facing a damaged item to attempt to increase the overall maximum and minimum durability. Success based on skill used to make the item."), english.use(ActionType.Repair, "Repair", "Use while facing a damaged item to attempt to repair it. Success based on skill used to make the item."), english.use(ActionType.Rest, "Rest", "Used to rest for a period of time to regain health and stamina. You will stop resting when reaching full stamina."), english.use(ActionType.SailToCivilization, "Sail To Civilization", "After collecting all the pieces of treasure, you can return to civilization and bask in the glory of your riches and fame. You can always return back to these lands afterwards."), english.use(ActionType.SetDown, "Set Down", "Using this item will place it on top of whatever tile is present in your facing direction. This is different than just dropping the item. It can also be used to extinguish fires."), english.use(ActionType.Shoot, "Shoot", "You can shoot arrows with this item."), english.use(ActionType.Sleep, "Sleep", "Used to sleep for a period of time to regain health and stamina. Duration is based on Camping skill and time of day. A bonus to all effects (including length) will be granted if facing a fire or lit object. Hunger and dehydration increases slower while sleeping."), english.use(ActionType.Sling, "Sling", "You can sling bullets with this item."), english.use(ActionType.Squeeze, "Squeeze", "Consumed on use. Spews a stream of fire in your facing direction."), english.use(ActionType.StartFire, "Start Fire", "Used to start a fire. This cannot be used on some non-dry tiles without fuel. Use on Campfires, Furnaces, Kilns, etc. to light them. Using this action may require Kindling, Tinder and a fuel item in your inventory depending on the circumstance."), english.use(ActionType.StokeFire, "Stoke Fire", "Used on a fire source to increase the strength of the flame."), english.use(ActionType.Teleport, "Teleport", "With a flick of the wand, teleport to a location in front of where you are facing."), english.use(ActionType.TellTime, "Tell Time", "Used to measure the time of day or night."), english.use(ActionType.Throw, "Throw", ""), english.use(ActionType.Transmogrify, "Transmogrify", "Use while facing an equippable item to attempt to infuse with magical properties."), english.use(ActionType.TraverseTheSea, "Traverse the Sea", "Used to travel to new, unexplored lands, leaving behind your current surroundings."), english.terrain(TerrainType.Ash, "ash"), english.terrain(TerrainType.BarePalmTree, "bare palm tree", "a "), english.terrain(TerrainType.BareTree, "bare tree", "a "), english.terrain(TerrainType.CaveEntrance, "cave entrance", "a "), english.terrain(TerrainType.Clay, "clay"), english.terrain(TerrainType.ClayBrickFlooring, "clay brick flooring"), english.terrain(TerrainType.CobblestoneFlooring, "cobblestone flooring"), english.terrain(TerrainType.DeepFreshWater, "deep fresh water"), english.terrain(TerrainType.DeepSeawater, "deep seawater"), english.terrain(TerrainType.Dirt, "dirt"), english.terrain(TerrainType.FreshWater, "fresh water"), english.terrain(TerrainType.Grass, "grass"), english.terrain(TerrainType.Gravel, "gravel"), english.terrain(TerrainType.PalmTree, "palm tree", "a "), english.terrain(TerrainType.PalmTreeWithCoconuts, "palm tree with coconuts", "a "), english.terrain(TerrainType.Rocks, "rocks"), english.terrain(TerrainType.RocksWithCoal, "rocks with coal"), english.terrain(TerrainType.RocksWithIron, "rocks with iron"), english.terrain(TerrainType.RocksWithLimestone, "rocks with limestone"), english.terrain(TerrainType.RocksWithTalc, "rocks with talc"), english.terrain(TerrainType.Sand, "sand"), english.terrain(TerrainType.Sandstone, "sandstone"), english.terrain(TerrainType.SandstoneFlooring, "sandstone flooring"), english.terrain(TerrainType.SandstoneWithIron, "sandstone with iron"), english.terrain(TerrainType.SandstoneWithNiter, "sandstone with niter"), english.terrain(TerrainType.Seawater, "seawater"), english.terrain(TerrainType.ShallowFreshWater, "shallow fresh water"), english.terrain(TerrainType.ShallowSeawater, "shallow seawater"), english.terrain(TerrainType.Snow, "snow"), english.terrain(TerrainType.Swamp, "swamp"), english.terrain(TerrainType.Tree, "tree", "a "), english.terrain(TerrainType.TreeWithBerries, "tree with berries", "a "), english.terrain(TerrainType.TreeWithFungus, "tree with fungus", "a "), english.terrain(TerrainType.TreeWithVines, "tree with vines", "a "), english.terrain(TerrainType.WoodenFlooring, "wooden flooring"), english.terrain(TerrainType.RedCarpet, "red carpet"), english.tileEvent(TileEvent.Type.Fire, "Fire"), english.onEquipType(OnEquipType.LightSource, "Light Source"), english.onEquipType(OnEquipType.Telescopy, "Telescopy"), english.monster(MonsterType.AcidSpitterDemon, "acid spitter demon", "an "), english.monster(MonsterType.Bear, "bear", "a "), english.monster(MonsterType.Blindfish, "blindfish", "a "), english.monster(MonsterType.Bogling, "bogling", "a "), english.monster(MonsterType.Chicken, "chicken", "a "), english.monster(MonsterType.ClawWorm, "claw worm", "a "), english.monster(MonsterType.Cod, "cod", "a "), english.monster(MonsterType.Drake, "drake", "a "), english.monster(MonsterType.FireElemental, "fire elemental", "a "), english.monster(MonsterType.GiantRat, "giant rat", "a "), english.monster(MonsterType.GiantSpider, "giant spider", "a "), english.monster(MonsterType.GreyWolf, "grey wolf", "a "), english.monster(MonsterType.Harpy, "harpy", "a "), english.monster(MonsterType.Hobgoblin, "hobgoblin", "a "), english.monster(MonsterType.Imp, "imp", "an "), english.monster(MonsterType.JellyCube, "jelly cube", "a "), english.monster(MonsterType.Kraken, "kraken", "a "), english.monster(MonsterType.LivingMushroom, "living mushroom", "a "), english.monster(MonsterType.LivingRock, "living rock", "a "), english.monster(MonsterType.PirateGhost, "pirate ghost", "a "), english.monster(MonsterType.Rabbit, "rabbit", "a "), english.monster(MonsterType.Rat, "rat", "a "), english.monster(MonsterType.Shark, "shark", "a "), english.monster(MonsterType.SkeletalMage, "skeletal mage", "a "), english.monster(MonsterType.Skeleton, "skeleton", "a "), english.monster(MonsterType.Slime, "slime", "a "), english.monster(MonsterType.Snake, "snake", "a "), english.monster(MonsterType.TimeSkitter, "time skitter", "a "), english.monster(MonsterType.TrapdoorSpider, "trapdoor spider", "a "), english.monster(MonsterType.VampireBat, "vampire bat", "a "), english.monster(MonsterType.Zombie, "zombie", "a "), english.monsterCorpse(MonsterType.FireElemental, "A Pile of Embers"), english.monsterCorpse(MonsterType.Blood, "Blood"), english.skill(SkillType.Chemistry, "Chemistry", "Influences quality and success rate of crafted items using chemical mixtures."), english.skill(SkillType.Anatomy, "Anatomy", "Increases accuracy of creature health information (via inspecting).<br />Decreases chance of bleeding and poisoning.<br />Increases effectiveness of healing consumables.<br />Increases success chance when healing."), english.skill(SkillType.Archery, "Archery & Firearms", "Increases attack damage, accuracy and maximum range when using bows and firearms."), english.skill(SkillType.Blacksmithing, "Blacksmithing", "Influences quality, repair, and success rate of crafted items using metal."), english.skill(SkillType.Botany, "Botany", "Increases chance of planting a plant.<br />Increases effectiveness of eating plant-based consumables.<br />Decreases chance of trampling plants when stepping on them."), english.skill(SkillType.Camping, "Camping", "Increases the amount of turns slept when using a Bedroll.<br />Increases chance of starting a fire."), english.skill(SkillType.Cartography, "Cartography", "Increases chance to successfully read Tattered Maps.<br />Decreases obscurity when reading Tattered Maps."), english.skill(SkillType.Claythrowing, "Clay Throwing", "Influences quality and success rate of crafted items using clay."), english.skill(SkillType.Cooking, "Cooking", "Influences decay of cooked items."), english.skill(SkillType.Fishing, "Fishing", "Increases chance to successfully catch a fish. Increases maximum range when using a Fishing Rod.<br />Increases the range in which you can gather underwater treasure from."), english.skill(SkillType.Fletching, "Fletching & Rangedcraft", "Influences quality and repair rate of crafted arrows, bows, and slings."), english.skill(SkillType.Glassblowing, "Glassblowing", "Influences quality and success rate of crafted items using glass."), english.skill(SkillType.Leatherworking, "Leatherworking", "Influences quality, repair, and success rate of crafted items using leather."), english.skill(SkillType.LockPicking, "Lock Picking", "Increases chance to successfully unlock a chest."), english.skill(SkillType.Lumberjacking, "Lumberjacking", "Increases chance of resource dropping on trees.<br />Decreases chance of stamina reduction while Lumberjacking."), english.skill(SkillType.Mining, "Mining", "Increases chance of resource dropping on rocks.<br />Decreases chance of stamina reduction while Mining.<br />Increases the range in which you can gather treasure from."), english.skill(SkillType.Mycology, "Mycology", "Increases chance of planting a mushroom.<br />Increases effectiveness of eating mushroom consumables.<br />Decreases chance of trampling mushrooms when stepping on them."), english.skill(SkillType.Parrying, "Parrying", "Increases your base defense value.<br />Increases chance to take less damage in combat.<br />Decreases chance of stamina reduction from being attacked."), english.skill(SkillType.Stonecrafting, "Stonecrafting", "Influences quality, repair, and success rate of crafted items using stones and rocks."), english.skill(SkillType.Swimming, "Swimming", "Increases speed in water travel.<br />Decreases chance of stamina reduction in water."), english.skill(SkillType.Tactics, "Tactics", "Increases your base attack value.<br />Increases chance to hit targets in combat.<br />Decreases chance of stamina reduction while attacking."), english.skill(SkillType.Tailoring, "Tailoring", "Influences quality, repair, and success rate of crafted items using cloth and material."), english.skill(SkillType.Throwing, "Throwing", "Increases attack damage, accuracy, and maximum range when throwing or slinging an item."), english.skill(SkillType.Tinkering, "Tinkering", "Influences quality, repair, and success rate of crafted items using miscellaneous resources and methods."), english.skill(SkillType.Trapping, "Trapping", "Increases the amount of damage and success rate of trapping creatures.<br />Reduces chance of setting off traps and reduces damage taken from traps."), english.skill(SkillType.Woodworking, "Woodworking", "Influences quality, repair, and success rate of crafted items using wood."), english.milestone(MilestoneType.Abnormalizer, "Abnormalizer", "Killed 25 aberrant creatures."), english.milestone(MilestoneType.Chef, "Chef", "Cooked 25 food items."), english.milestone(MilestoneType.Crafter, "Crafter", "Crafted 250 items."), english.milestone(MilestoneType.Extincteur, "Extincteur", "Killed 1000 creatures."), english.milestone(MilestoneType.Gardener, "Gardener", "Planted 50 plants or mushrooms."), english.milestone(MilestoneType.Gatherer, "Gatherer", "Gathered 1000 times."), english.milestone(MilestoneType.Hunter, "Hunter", "Killed 100 creatures."), english.milestone(MilestoneType.Locksmith, "Locksmith", "Lock picked 10 locks."), english.milestone(MilestoneType.ReaperOfSouls, "Reaper of Souls", "Killed 50 pirate ghosts and harvested their corpses."), english.milestone(MilestoneType.Survivor, "Survivor", "Survived for 10000 turns."), english.milestone(MilestoneType.Thrower, "Thrower", "Thrown 500 items."), english.milestone(MilestoneType.Trapper, "Trapper", "Injured 10 creatures with traps."), english.milestone(MilestoneType.TreasureHunter, "Treasure Hunter", "Dug or fished up 10 treasure chests."), english.milestone(MilestoneType.Collector, "Collector", "Collected one of every item."), english.milestone(MilestoneType.Explorer, "Explorer", "Stepped on or gathered from every type of tile."), english.milestone(MilestoneType.Grandmaster, "Grandmaster", "Raised a skill to 100%."), english.milestone(MilestoneType.Prepared, "Prepared", "Equipped something in each equipment slot."), english.milestone(MilestoneType.Doctor, "Doctor", "Cured each status effect."), english.milestone(MilestoneType.Artificer, "Artificer", "Transmogrified an item."), english.milestone(MilestoneType.Seafarer, "Seafarer", "Sailed to civilization and completed the game."), english.milestone(MilestoneType.Navigator, "Navigator", "Traversed the seas in search of new lands."), english.milestone(MilestoneType.DragonSlayer, "Dragon Slayer", "Slayed a drake."), english.milestone(MilestoneType.Treasurer, "Treasurer", "Collected every one of the five types of treasure."), english.hint(HintType.WelcomeToWayward, "Welcome to Wayward", 'Welcome to the Early Access version of Wayward! Wayward is currently in beta status and many things will change and improve over time. Hint windows like these will display as you play the game if enabled. You can disable automatic hints by clicking the button "Disable Hints" below. If you need further help or hints, visit the <a target="_blank" href="http://steamcommunity.com/app/379210/discussions/">Steam Discussions forums</a>.<br /><br />If you want to keep up with Wayward, please visit the <a target="_blank" href="http://www.unlok.ca/category/wayward/">Wayward Blog</a>, <a target="_blank" href="http://www.unlok.ca/forums/wayward-forum/">Wayward Forums</a>, or <a target="_blank" href="http://www.reddit.com/r/Wayward/">Subreddit</a>.<br /><br />Want to help Wayward? Spread the word, or follow us on one of the following sites: <a target="_blank" href="https://www.facebook.com/waywardgame">Facebook</a>, <a target="_blank" href="https://twitter.com/Wayward_Game">Twitter</a>, or <a target="_blank" href="http://www.indiedb.com/games/wayward">IndieDB</a>.'), english.hint(HintType.Controls, "Controls", 'Keybinds can be changed under "Keybinds" in the Options menu.<br /><br /><h3>Window Shortcuts</h3><br />{ui.getStringForKeyBind(KeyBind.Escape)} = Close Menus and Windows, {ui.getStringForKeyBind(KeyBind.Inventory)} = Inventory, {ui.getStringForKeyBind(KeyBind.Equipment)} = Equipment, {ui.getStringForKeyBind(KeyBind.Crafting)} = Crafting, {ui.getStringForKeyBind(KeyBind.Help)} = Help, {ui.getStringForKeyBind(KeyBind.Skills)} = Skills, {ui.getStringForKeyBind(KeyBind.Messages)} = Messages, {ui.getStringForKeyBind(KeyBind.Options)} = Options, {ui.getStringForKeyBind(KeyBind.Actions)} = Actions, {ui.getStringForKeyBind(KeyBind.Milestones)} = Milestones<br /><br /><h3>Movement</h3><br />To move, you can to use {ui.getStringForKeyBind(KeyBind.Up)}, {ui.getStringForKeyBind(KeyBind.Left)}, {ui.getStringForKeyBind(KeyBind.Down)}, {ui.getStringForKeyBind(KeyBind.Right)} or by clicking/tapping on the game screen in the direction you want to move. To skip/pass a turn, or to pick up item(s) on the tile you are standing on, press the spacebar or left click/tap your character on the game screen.<br /><br /><h3>Actions</h3><br />Opening up the Actions menu will bring up a list of actions you can perform on the adjacent tile or object; for example, collecting a Pineapple without needing to carve it up. This is also an alternate way to inspect a tile without needing to right click on the game screen. Jumping is also selectable in the Actions menu which can help you get out of tight spots, but watch out for the heavy stamina reduction; it\'s based on your current weight.<br /><br /><h3>Using Items</h3><br />To use an item, you may left click/tap it to bring up the item\'s menu. You will see a list of actions you can perform. Additionally, you are able to drag and drop an item into one of the quickslots. Press the number or hotkey ({ui.getStringForKeyBind(KeyBind.One)}, {ui.getStringForKeyBind(KeyBind.Two)}, {ui.getStringForKeyBind(KeyBind.Three)}, etc.) that corresponds with which quickslot it is attached to perform the primary action for the item.<br /><br /><h3>Item Uses, Dropping and Information</h3><br />Some items have more than one use - these will show up in the item\'s menu if available. You are able to right click an item to automatically drop it without going into the item menu. If you are facing a container, you will drop the item inside. You can shift + right click (or use "Drop All" from the menu) to drop multiple items of the same kind. You are also able to right click on the game screen to reveal information about what you are clicking on (referred to as "Inspect"), whether it be items, monsters, tiles, and more.<br /><br /><h3>More Information</h3><br />Hovering over elements on screen will typically reveal more information. Tool-tips will appear over items. Hovering over crafting items will highlight items used in the craft.<br /><br /><h3>Item Management</h3><br />Besides dragging and dropping items to your quickslots, you are also able to equip items in this fashion, provided it is an equipment item and fits in that slot. Dragging and dropping is also used to move items to your container window and inventory (shift + dragging will move all items of the same type). Additionally, right clicking an item in your equipment list, quickslots or container window will remove it from that slot.'), english.hint(HintType.CorpseCarving, "Corpse Carving", 'To harvest potential resources from this corpse, try carving it with a sharp item. Choose "Carve" from the item\'s menu or try moving it to a quickslot for ease of use.'), english.hint(HintType.Doodads, "Doodads", 'Doodads are considered objects attached to the ground like plants, piles of rocks, furnaces, campfires, etc. To collect them, you can do one of the following:<br /><br />1. While facing the item, click or press the "Actions" hotkey with {ui.getStringForKeyBind(KeyBind.Actions)}, and select the "Collect Object" option.<br />2. Use an item with "Digging" such as a Stone Shovel.<br />3. Use an item with "Carving" such as a Sharp Rock.<br />4. Use an item with "Gather" such as a Wooden Pole.<br /><br />Using your bare hands with no tool (option 1) can sometimes harm you. Using a tool (option 2/3/4) will decrease the durability of the item. Some objects may require a "Carving" tool such as corpses to harvest from them.'), english.hint(HintType.CaveDarkness, "Cave Darkness", "This would be the perfect place for hidden treasure, but first, the area may need illumination with fire or a torch."), english.hint(HintType.Nightfall, "Nightfall", "Nightfall approaches! Find a safe area to camp out and prepare yourself for combat! Many tough creatures prowl the night."), english.hint(HintType.StaminaReplenishment, "Stamina Replenishment", 'You are getting exhausted. Sleep or rest using a bedroll or hammock to regenerate stamina. You can also rest by going into the Actions menu and selecting "Rest"; however, resting with an item will produce better regenerative effects. Rest is different from sleep in that you will only ever rest until your stamina is maxed out. Alternatively, you may hold spacebar or click your character to skip turns.'), english.hint(HintType.HealthProblems, "Health Problems", "You are quite injured, replenish your health with food or healing-type items. Some status effects reduce your ability to regenerate your health including Bleeding and Poisoning. Alternatively, you can also try sleeping or resting to regenerate health."), english.hint(HintType.Bleeding, "Bleeding", "You are bleeding! This status effect is usually the result of a poor Anatomy skill and fighting a tough creature. Make sure to use a healing item to stop the bleeding, such as a Bandage or Tourniquet. Bleeding causes you to starve/dehydrate faster, regenerate stamina slower, and stops regeneration of health."), english.hint(HintType.Poisoned, "Poisoned", "You have been poisoned! Poisoning can happen from eating bad things or from some types of creatures. Make sure to consume a curing item to cure the poison, such as a Medicinal Water. Poisoning causes you to starve/dehydrate faster, regenerate stamina slower, and stops regeneration of health."), english.hint(HintType.Dehydration, "Dehydration", "You are getting quite dehydrated. There's many ways to get drinkable water, but unfortunately for you, the largest source of water, from the sea is nearly undrinkable in its raw form. You must desalinate the water through the use of a water still or flask before drinking it without adverse effects. Alternatively, you may seek out a fresh water source, such as from caves, small lakes, oases, swamps or ponds. Fresh water is drinkable in it's raw form without too many bad effects; however, you may still want to boil it for the best health results."), english.hint(HintType.UseATool, "Use A Tool", "Gathering resources with your hands is difficult and harmful; try equipping or using a tool to eliminate the chance of injury. If you are Mining or Lumberjacking, your weapon(s) attack value will also help gather items faster. Blunt attack weapon will help you gather faster while Mining, while Slashing weapons will help you gather faster while lumberjacking."), english.hint(HintType.Durability, "Durability", "One of your tools, weapons or armor is close to breaking from overuse. If you can't find or craft an item to repair it, you will have to replace it soon."), english.hint(HintType.Death, "Death", "Death is permanent. Although you have died, all of the crafting recipes you have discovered will be ready on your next playthrough. Your milestones will also carry over, providing you multiple starting benefits."), english.hint(HintType.ConsumingBadThings, "Consuming Bad Things", "Ow! Consuming that has hurt you! Not all edible/drinkable objects should be consumed, at least not without facing the consequences. On the other hand, sometimes it's worth the risk to gain it's other effects. Consuming bad things can sometimes result in poisoning."), english.hint(HintType.FastPickup, "Fast Pick-up", "You have just picked up an item from the ground. Sometimes there are multiple items on a tile. Pressing the spacebar or clicking on your character will gather items underneath you without moving."), english.hint(HintType.Bugs, "BUGS!", 'Did you find an error? Would you kindly let us know about what happened, so that we may seek to stop this from happening to other players? You can do so by posting the issue in the <a target="_blank" href="http://steamcommunity.com/app/379210/discussions/1/">Steam Discussions Bug Reports forum</a>.'), english.hint(HintType.HeldItems, "Held Items", "Your left and right hand equipment slots are interchangeable. You can equip two weapons, two tools, two shields or any combination in between. Be careful of damaging useful equipment such as torches or shields while gathering or attacking. Make sure to always equip another weapon or tool in the other hand if you want to use it to attack or gather over damaging an equipped torch. You attack with both hands in combat, so it's important to equip both your hands if possible."), english.hint(HintType.Milestones, "Milestones", "Milestones are personalized goals and achievements. Each playthrough, you are given an amount to either discover or work towards. Milestones are saved after each playthrough or death. The more you have completed, the more starting skill and stat points you get, as well as more starting items."), english.hint(HintType.Burned, "Burn Injuries", "You have been burned! These lasting injuries and pain can be caused from stepping in an open flame without protection, or possibly other sources. Pouring liquid on yourself will soothe the injuries and pain. Alternatively, you can also take a swim in deep water. Keep swimming until the effect subsides. Being burned will stop you from regenerating health and can last awhile if untreated."), english.hint(HintType.Crafting, "Crafting", "Crafting is simple, but has many rules!<br /><br />When hovering over an item in the crafting window, you will see which items will be used in the craft through a highlighted border that will appear around items in your inventory. You will also notice that you will use the first instance of a required item. Simply drag around the order of items in your inventory or use the sort to use different items in the craft.<br /><br />Using items in a craft that have lower durability will affect the crafted item's durability. Additionally, using Remarkable, Exceptional or Legendary items in a craft increases your chances to craft such an item. Decayable items (such as food) also gain decay bonuses from using higher quality items in the craft.<br /><br />You can find new crafting recipes by gathering the required items in your inventory and by finding Old Instructional Scrolls."), english.hint(HintType.Encumbered, "Encumbered", "You are carrying quite a few items, enough to slow down your movement and reduce stamina regeneration. Pack on any more weight and you'll be fully overburdened and begin to take damage while trying to move. You can drop items from your inventory by right clicking, through the item's menu, or by dragging and dropping them on to the game screen."), english.hint(HintType.DailyChallengeMode, "Daily Challenge Mode", "Daily Challenge Mode is an extra difficult game mode with some unique game rules to add an extra challenge for skilled players. You can expect more monsters, a harder beginning of the game, and more. You cannot save your game in this mode. The world and randomization is unique per day, allowing multiple players to play in the same set of circumstances."), english.hint(HintType.MovingItems, "Moving Items", "There are many ways to organize and move items in Wayward<br /><br />1. Dragging and dropping. You can drag and drop items into a container window, quickslot, equipment slot, or directly on to the ground, by dragging it to the desired location. Dragging and dropping to the game screen will drop it in front of you, or inside a chest if you are facing one. Holding Shift while dragging will drag/drop all items of the same type<br />2. From the item's menu. Left clicking an item will display the item's menu with options to Drop/Drop All, or if you have a container window open, will present you the option to Move/Move All. If you click an item that has a special quality, additional options will be visible to Drop/Move all of the same quality.<br />3. Right clicking/dropping. You can right click any item in your inventory to drop it in front of you. This will automatically drop it into a chest if you are facing one. Holding shift while you right click will drop all of the same type."), english.hint(HintType.CraftingFailure, "Crafting Failure", "All crafts in Wayward have a skill level assosiated with them. Hovering over each craft will reveal the item's craft skill level. These levels going from easiest to harder are: Simple, Intermediate, Advanced, and Expert.<br /><br />Trying to craft an item with a higher skill level than your own crafting skill can sometimes result in failure. Your chance to successfully craft the item raises as your skills increase. If the item's skill level appears in orange, you will have a low chance at success for crafting that item."), english.hint(HintType.Malignity, "Malignity", "These lands are mysterious and seem to react to your presence and actions. Crafting items, killing creatures, using items, and using skills will all effect your malignity positively or negatively. The higher your malignity, the more challenging survival becomes. Having a low or even negative malignity assumes you are peaceful, and these lands will act in kindness towards you by not allowing more difficult creatures to spawn. Certain peaceful actions may reduce your level of malign such as gardening or planting mushrooms and plants. Travelling away to other lands using boats can significantly reduce your malignity."), Languages.add(english);
var ByteGrid = function() {
        function e(e, t) {
            void 0 === t && (t = e), this.width = e, this.height = t, this.width = Math.floor(e), this.height = Math.floor(t), this.size = this.width * this.height, this.data = new Uint8Array(this.size);
        }
        return e.prototype.get = function(e, t) {
            return this.data[e + t * this.width]
        }, e.prototype.set = function(e, t, i) {
            this.data[e + t * this.width] = i
        }, e.prototype.clear = function() {
            for (var e = 0, t = this.data.length; e < t; ++e) this.data[e] = 0
        }, e
    }(),
    FieldOfView = function() {
        function e(e, t, i) {
            void 0 === i && (i = 1), this.gl = e, this.radius = t, this.subdivisions = i, this.computeOffset = new Vec2([0, 0]), this.subdivisions = Math.floor(this.subdivisions), this.maxRadius = t, this.blurEnabled = !0, this.disabled = !1;
            var a = e.createFramebuffer(),
                n = e.createFramebuffer(),
                o = e.createTexture(),
                r = e.createTexture(),
                s = e.createTexture(),
                l = e.createBuffer();
            if (a && n && o && r && s && l) {
                this.framebuffer1 = a, e.bindFramebuffer(e.FRAMEBUFFER, this.framebuffer1);
                var p = this.getTextureSize();
                this.texLight01 = o, e.bindTexture(e.TEXTURE_2D, this.texLight01), e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, p, p, 0, e.RGBA, e.UNSIGNED_BYTE, void 0), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, this.texLight01, 0), this.framebuffer2 = n, e.bindFramebuffer(e.FRAMEBUFFER, this.framebuffer2), this.texLight02 = r, e.bindTexture(e.TEXTURE_2D, this.texLight02), e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, p, p, 0, e.RGBA, e.UNSIGNED_BYTE, void 0), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, this.texLight02, 0), this.texBlurStorage = s, e.bindTexture(e.TEXTURE_2D, this.texBlurStorage), e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, p, p, 0, e.RGBA, e.UNSIGNED_BYTE, void 0), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.LINEAR), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.LINEAR), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE);
                var d = [-1, -1, 0, 1, 1, -1, 1, 1, 1, 1, 1, 0, -1, -1, 0, 1, 1, 1, 1, 0, -1, 1, 0, 0];
                this.viewQuadBuffer = l, e.bindBuffer(e.ARRAY_BUFFER, this.viewQuadBuffer), e.bufferData(e.ARRAY_BUFFER, new Float32Array(d), e.STATIC_DRAW), this.texLight = this.texLight01, this.texLightOld = this.texLight02
            }
        }
        return e.compileShaders = function(t) {
            e.shaderProgram = new CompiledProgram(t, "fov-vertex", "fov-fragment"), e.hBlurProgram = new CompiledProgram(t, "basic-texture-vertex", "blur-horizontal-fragment"), e.vBlurProgram = new CompiledProgram(t, "basic-texture-vertex", "blur-vertical-fragment")
        }, e.prototype.getTextureSize = function() {
            return Math.floor((2 * this.maxRadius + 1) * this.subdivisions)
        }, e.prototype.getSubdivisions = function() {
            return this.subdivisions
        }, e.prototype.compute = function(t) {
            void 0 === t && (t = !0);
            var i = this.gl;
            this.computeLights(), this.updateExplored();
            var a = this.framebuffer1;
            this.computeOffset.x = player.x - player.fromX, this.computeOffset.y = player.y - player.fromY, this.texLight === this.texLight01 ? (this.texLight = this.texLight02, this.texLightOld = this.texLight01, a = this.framebuffer2) : (this.texLight = this.texLight01, this.texLightOld = this.texLight02), i.bindTexture(i.TEXTURE_2D, renderer.layers[player.z].texLightLevel);
            var n = world.layers[player.z].lightLevelMap;
            if (i.texImage2D(i.TEXTURE_2D, 0, i.ALPHA, n.width, n.height, 0, i.ALPHA, i.UNSIGNED_BYTE, n.data), i.bindFramebuffer(i.FRAMEBUFFER, a), this.disabled) return i.clearColor(0, 0, 0, 1), i.clear(i.COLOR_BUFFER_BIT), void i.bindFramebuffer(i.FRAMEBUFFER, null);
            i.clearColor(0, 0, 0, 0), i.clear(i.COLOR_BUFFER_BIT), i.disable(i.BLEND);
            var o = Math.floor((2 * this.radius + 1) * this.subdivisions),
                r = this.getTextureSize(),
                s = .5 * (r - o);
            i.viewport(s, s, o, o);
            var l = e.shaderProgram;
            i.useProgram(l.program), i.enableVertexAttribArray(l.attribs.position), i.enableVertexAttribArray(l.attribs.texture), i.activeTexture(i.TEXTURE0), i.bindTexture(i.TEXTURE_2D, renderer.layers[player.z].texLightBlock), i.uniform1i(l.uniforms.lightBlock, 0), i.activeTexture(i.TEXTURE1), i.bindTexture(i.TEXTURE_2D, renderer.layers[player.z].texLightLevel), i.uniform1i(l.uniforms.lightLevel, 1), i.uniform1f(l.uniforms.lightAmbient, game.getAmbientLightLevel()), i.uniform1i(l.uniforms.lightBlocking, t ? 1 : 0), i.uniform2f(l.uniforms.inverseLightBlockSize, 1 / world.width, 1 / world.height), i.uniform1f(l.uniforms.inverseDetailLevel, 1 / this.subdivisions), i.uniform1f(l.uniforms.viewRadius, this.radius), i.uniform2f(l.uniforms.playerPos, player.x, player.y), i.bindBuffer(i.ARRAY_BUFFER, this.viewQuadBuffer), i.vertexAttribPointer(l.attribs.position, 2, i.FLOAT, !1, 16, 0), i.vertexAttribPointer(l.attribs.texture, 2, i.FLOAT, !1, 16, 8), i.drawArrays(i.TRIANGLES, 0, 6), i.viewport(0, 0, r, r), this.blurEnabled && (i.bindTexture(i.TEXTURE_2D, this.texBlurStorage), i.copyTexSubImage2D(i.TEXTURE_2D, 0, 0, 0, 0, 0, r, r), i.clear(i.COLOR_BUFFER_BIT), l = e.hBlurProgram, i.useProgram(l.program), i.activeTexture(i.TEXTURE0), i.bindTexture(i.TEXTURE_2D, this.texBlurStorage), i.uniform1i(l.uniforms.data, 0), i.uniform1f(l.uniforms.blurSize, 1 / (this.maxRadius * this.subdivisions * 5)), i.bindBuffer(i.ARRAY_BUFFER, this.viewQuadBuffer), i.vertexAttribPointer(l.attribs.position, 2, i.FLOAT, !1, 16, 0), i.vertexAttribPointer(l.attribs.texture, 2, i.FLOAT, !1, 16, 8), i.drawArrays(i.TRIANGLES, 0, 6), i.bindTexture(i.TEXTURE_2D, this.texBlurStorage), i.copyTexSubImage2D(i.TEXTURE_2D, 0, 0, 0, 0, 0, r, r), i.clear(i.COLOR_BUFFER_BIT), l = e.vBlurProgram, i.useProgram(l.program), i.activeTexture(i.TEXTURE0), i.bindTexture(i.TEXTURE_2D, this.texBlurStorage), i.uniform1i(l.uniforms.data, 0), i.uniform1f(l.uniforms.blurSize, 1 / (this.maxRadius * this.subdivisions * 5)), i.bindBuffer(i.ARRAY_BUFFER, this.viewQuadBuffer), i.vertexAttribPointer(l.attribs.position, 2, i.FLOAT, !1, 16, 0), i.vertexAttribPointer(l.attribs.texture, 2, i.FLOAT, !1, 16, 8), i.drawArrays(i.TRIANGLES, 0, 6)), i.bindFramebuffer(i.FRAMEBUFFER, null)
        }, e.prototype.createDebugRenderer = function() {
            return this.renderer || (this.renderer = new FieldOfViewDebugRenderer(this.gl, this)), this.renderer
        }, e.prototype.getRadiusModifier = function(e, t) {
            return Math.max(game.getAmbientLightLevel(), world.layers[player.z].lightLevelMap.get(e, t) / 255 * 3)
        }, e.prototype.canSeeTile = function(e, t) {
            if (this.disabled) return !0;
            var i = game.getWrappedCoord(e),
                a = game.getWrappedCoord(t),
                n = world.toLocal(i, player.x),
                o = world.toLocal(a, player.y),
                r = Math.sqrt(n * n + o * o);
            return r < this.radius * Math.max(this.getRadiusModifier(i, a), 1.6 - r) && this.bresenham(player.x, player.y, player.x + n, player.y + o)
        }, e.prototype.computeLights = function() {
            for (var e = world.layers[player.z].lightLevelMap, t = new Array, i = new Array, a = new Array, n = Math.floor(player.x - this.radius), o = Math.ceil(player.x + this.radius); n < o; n++)
                for (var r = Math.floor(player.y - this.radius), s = Math.ceil(player.y + this.radius); r < s; r++) {
                    var l = game.getWrappedCoord(n),
                        p = game.getWrappedCoord(r),
                        d = e.get(l, p),
                        u = Math.min(Math.max(Math.floor(game.getLightSourceAt(l, p)), 0), 255);
                    d !== u && (d > 0 && (e.set(l, p, 0), t.push({
                        wx: l,
                        wy: p,
                        lightLevel: d
                    })), u > 0 && i.push({
                        wx: l,
                        wy: p,
                        lightLevel: u
                    }))
                }
            for (var g = function(i, n, o) {
                n = game.getWrappedCoord(n), o = game.getWrappedCoord(o);
                var r = e.get(n, o);
                0 !== r && r < i.lightLevel ? (e.set(n, o, 0), t.push({
                    wx: n,
                    wy: o,
                    lightLevel: r
                })) : r >= i.lightLevel && a.push({
                    wx: n,
                    wy: o
                })
            }; t.length > 0;) {
                var m = t.shift();
                g(m, m.wx - 1, m.wy), g(m, m.wx + 1, m.wy), g(m, m.wx, m.wy - 1), g(m, m.wx, m.wy + 1)
            }
            for (var y = 0; y < i.length; ++y) {
                var c = i[y];
                e.get(c.wx, c.wy) < c.lightLevel && (e.set(c.wx, c.wy, c.lightLevel), a.push({
                    wx: c.wx,
                    wy: c.wy
                }))
            }
            for (var h = world.layers[player.z].lightBlockMap, T = function(t, i, n, o) {
                i = game.getWrappedCoord(i), n = game.getWrappedCoord(n);
                var r = e.get(t.wx, t.wy),
                    s = Math.max(r - o - h.get(t.wx, t.wy), 0),
                    l = h.get(i, n) < 128;
                l && s > e.get(i, n) && (e.set(i, n, s), a.push({
                    wx: i,
                    wy: n
                }))
            }; a.length > 0;) {
                var m = a.shift();
                T(m, m.wx - 1, m.wy, 17), T(m, m.wx + 1, m.wy, 17), T(m, m.wx, m.wy - 1, 17), T(m, m.wx, m.wy + 1, 17), T(m, m.wx - 1, m.wy - 1, 24), T(m, m.wx + 1, m.wy - 1, 24), T(m, m.wx - 1, m.wy + 1, 24), T(m, m.wx + 1, m.wy + 1, 24)
            }
        }, e.prototype.getBounds = function() {
            var e = new Vec2([player.x - Math.ceil(this.radius), player.y - Math.ceil(this.radius)]),
                t = new Vec2([player.x + Math.ceil(this.radius), player.y + Math.ceil(this.radius)]);
            return {
                min: e,
                max: t
            }
        }, e.prototype.updateExplored = function() {
            if (!this.disabled) {
                var e = this.gl,
                    t = world.layers[player.z].exploredMap;
                e.bindTexture(e.TEXTURE_2D, renderer.layers[player.z].texExplored);
                for (var i = this.getBounds(), a = i.min.x; a < i.max.x; a++)
                    for (var n = i.min.y; n < i.max.y; n++) {
                        var o = game.getWrappedCoord(a),
                            r = game.getWrappedCoord(n);
                        255 !== t.get(o, r) && this.canSeeTile(o, r) && (t.set(o, r, 255), e.texSubImage2D(e.TEXTURE_2D, 0, o, r, 1, 1, e.ALPHA, e.UNSIGNED_BYTE, new Uint8Array([255])))
                    }
            }
        }, e.prototype.bresenham = function(e, t, i, a) {
            for (var n = world.layers[player.z].lightBlockMap, o = t < a ? 1 : -1, r = e < i ? 1 : -1, s = Math.abs(a - t), l = Math.abs(i - e), p = l - s;;) {
                var d = 2 * p;
                if (d > 0 - s && (p -= s, e += r), d < l && (p += l, t += o), e === i && t === a) break;
                var u = game.getWrappedCoord(e),
                    g = game.getWrappedCoord(t);
                if (0 !== n.get(u, g)) return !1
            }
            return !0
        }, e
    }(),
    FieldOfViewDebugRenderer = function() {
        function e(e, t) {
            this.fov = t, this.gl = e;
            var i = [.5, .5, 0, 0, 1, .5, 1, 0, 1, 1, 1, 1, .5, .5, 0, 0, 1, 1, 1, 1, .5, 1, 0, 1],
                a = e.createBuffer(),
                n = e.createBuffer();
            a && n && (this.viewQuadBuffer = a, e.bindBuffer(e.ARRAY_BUFFER, this.viewQuadBuffer), e.bufferData(e.ARRAY_BUFFER, new Float32Array(i), e.STATIC_DRAW), i = [.5, 0, 0, 1, 1, 0, 1, 1, 1, .5, 1, 0, .5, 0, 0, 1, 1, .5, 1, 0, .5, .5, 0, 0], this.viewQuadBuffer2 = n, e.bindBuffer(e.ARRAY_BUFFER, this.viewQuadBuffer2), e.bufferData(e.ARRAY_BUFFER, new Float32Array(i), e.DYNAMIC_DRAW), this.shaderProgramAlphaDebug = new CompiledProgram(e, "basic-texture-vertex", "alpha-debug-fragment"))
        }
        return e.prototype.renderDebug = function() {
            var e = this.gl,
                t = this.shaderProgramAlphaDebug;
            e.useProgram(t.program), e.enable(e.BLEND), e.enableVertexAttribArray(t.attribs.position), e.enableVertexAttribArray(t.attribs.texture), e.activeTexture(e.TEXTURE0), e.bindTexture(e.TEXTURE_2D, this.fov.texLight), e.uniform1i(t.uniforms.data, 0), e.bindBuffer(e.ARRAY_BUFFER, this.viewQuadBuffer), e.vertexAttribPointer(t.attribs.position, 2, e.FLOAT, !1, 16, 0), e.vertexAttribPointer(t.attribs.texture, 2, e.FLOAT, !1, 16, 8), e.drawArrays(e.TRIANGLES, 0, 6);
            var i = this.fov.getBounds(),
                a = i.min.x / game.mapSize,
                n = i.min.y / game.mapSize,
                o = i.max.x / game.mapSize,
                r = i.max.y / game.mapSize,
                s = [.5, 0, a, r, 1, 0, o, r, 1, .5, o, n, .5, 0, a, r, 1, .5, o, n, .5, .5, a, n];
            e.bindBuffer(e.ARRAY_BUFFER, this.viewQuadBuffer2), e.bufferData(e.ARRAY_BUFFER, new Float32Array(s), e.DYNAMIC_DRAW), e.activeTexture(e.TEXTURE0), e.bindTexture(e.TEXTURE_2D, renderer.layers[player.z].texExplored), e.uniform1i(t.uniforms.data, 0), e.bindBuffer(e.ARRAY_BUFFER, this.viewQuadBuffer2), e.vertexAttribPointer(t.attribs.position, 2, e.FLOAT, !1, 16, 0), e.vertexAttribPointer(t.attribs.texture, 2, e.FLOAT, !1, 16, 8), e.drawArrays(e.TRIANGLES, 0, 6)
        }, e
    }(),
    Queue = Utilities.Queue,
    FlowField = function() {
        function e(e) {
            this.size = 2 * Math.floor(e), this.fieldWater = new ByteGrid(this.size, this.size), this.fieldLand = new ByteGrid(this.size, this.size), this.fieldFlying = new ByteGrid(this.size, this.size), this.fieldLandWater = new ByteGrid(this.size, this.size), this.penaltyFieldWater = new ByteGrid(this.size, this.size), this.penaltyFieldLand = new ByteGrid(this.size, this.size), this.penaltyFieldFlying = new ByteGrid(this.size, this.size), this.tileX = 0, this.tileY = 0, this.updateQueue = new Queue
        }
        return e.prototype.setDelegate = function(e) {
            this.delegate = e
        }, e.prototype.getWidth = function() {
            return this.size
        }, e.prototype.getHeight = function() {
            return this.size
        }, e.prototype.isInFlowField = function(e, t) {
            var i = world.toLocal(e, this.tileX),
                a = world.toLocal(t, this.tileY);
            return i >= 0 && a >= 0 && i < this.size && a < this.size
        }, e.prototype.getMoveDirection = function(e, t, i) {
            var a = this.flowFieldFromMoveType(i),
                n = world.toLocal(e, this.tileX),
                o = world.toLocal(t, this.tileY),
                r = a.get(n, o),
                s = [];
            if (n - 1 > 0) {
                var l = a.get(n - 1, o);
                l > r && (s.push(FacingDirection.West), r = l)
            }
            if (n + 1 < this.size) {
                var l = a.get(n + 1, o);
                l >= r && (l > r && (s.length = 0), s.push(FacingDirection.East), r = l)
            }
            if (o - 1 > 0) {
                var l = a.get(n, o - 1);
                l >= r && (l > r && (s.length = 0), s.push(FacingDirection.North), r = l)
            }
            if (o + 1 < this.size) {
                var l = a.get(n, o + 1);
                if (l >= r) {
                    if (l > r) return FacingDirection.South;
                    s.push(FacingDirection.South)
                }
            }
            var p = s.length;
            return 0 === p ? FacingDirection.None : 1 === p ? s[0] : s[Math.floor(Utilities.Random.nextFloat() * p)]
        }, e.prototype.getOpposingMoveDirection = function(t, i, a) {
            var n = this.flowFieldFromMoveType(a),
                o = world.toLocal(t, this.tileX),
                r = world.toLocal(i, this.tileY),
                s = n.get(o, r) + e.blockedPenalty,
                l = s,
                p = [],
                d = o - 1 > 0 ? n.get(o - 1, r) : 999;
            if (d <= s && Math.abs(d - l) < 5 && (d < s && (p.length = 0), p.push(FacingDirection.West), s = d), d = o + 1 < this.size ? n.get(o + 1, r) : 999, d <= s && Math.abs(d - l) < 5 && (d < s && (p.length = 0), p.push(FacingDirection.East), s = d), d = r - 1 > 0 ? n.get(o, r - 1) : 999, d <= s && Math.abs(d - l) < 5 && (d < s && (p.length = 0), p.push(FacingDirection.North), s = d), d = r + 1 < this.size ? n.get(o, r + 1) : 999, d <= s && Math.abs(d - l) < 5) {
                if (d < s) return FacingDirection.South;
                p.push(FacingDirection.South)
            }
            var u = p.length;
            return 0 === u ? FacingDirection.None : 1 === u ? p[0] : p[Math.floor(Utilities.Random.nextFloat() * u)]
        }, e.prototype.setCenter = function(e, t) {
            this.tileX = Math.floor(e - this.size / 2), this.tileY = Math.floor(t - this.size / 2)
        }, e.prototype.update = function() {
            this.setCenter(player.x, player.y), this.updateField(this.fieldWater, MoveType.Water), this.updateField(this.fieldLand, MoveType.Land), this.updateField(this.fieldFlying, MoveType.Flying);
            for (var e = this.fieldLandWater, t = 0; t < e.height; ++t)
                for (var i = 0; i < e.width; ++i) e.set(i, t, Math.max(this.fieldLand.get(i, t), this.fieldWater.get(i, t)));
            this.delegate && this.delegate.update()
        }, e.prototype.flowFieldFromMoveType = function(e) {
            var t = this.fieldLand,
                i = MoveType.Land | MoveType.Water;
            return (e & i) === i ? t = this.fieldLandWater : (e & MoveType.Water) === MoveType.Water && (t = this.fieldWater), (e & MoveType.Flying) === MoveType.Flying && (t = this.fieldFlying), t
        }, e.prototype.getMovePenaltyForFlying = function(t) {
            var i = terrains[Utilities.TileHelpers.getType(t)];
            return i.skill === SkillType.Lumberjacking ? 2 : i.isMountain ? e.blockedPenalty : void 0 !== t.monsterId ? 2 : 0
        }, e.prototype.getMovePenaltyForLand = function(t) {
            if (game.isTileFullEx(t)) return e.blockedPenalty;
            if (void 0 !== t.eventId) return e.blockedPenalty;
            var i = terrains[Utilities.TileHelpers.getType(t)];
            if (i.water) return e.blockedPenalty;
            if (!i.passable) return e.blockedPenalty;
            if (void 0 !== t.doodadId) {
                var a = game.doodads[t.doodadId],
                    n = Doodad.defines[a.type];
                if (n && (n.fire || n.blockMove)) return e.blockedPenalty
            }
            return void 0 !== t.monsterId ? e.blockedPenalty : 0
        }, e.prototype.getMovePenaltyForWater = function(t) {
            var i = terrains[Utilities.TileHelpers.getType(t)];
            if (!i.water) return e.blockedPenalty;
            if (void 0 !== t.doodadId) {
                var a = game.doodads[t.doodadId],
                    n = Doodad.defines[a.type];
                if (n && (n.fire || n.blockMove)) return e.blockedPenalty
            }
            return void 0 !== t.monsterId ? e.blockedPenalty : 0
        }, e.prototype.updatePenaltyField = function(e, t) {
            var i, a, n = this.tileX,
                o = this.tileY,
                r = game.mapSize,
                s = game.getWrappedCoord(n),
                l = game.getWrappedCoord(o),
                p = r - s,
                d = r - l;
            for (o = l, a = 0; a < d && a < this.size; ++a) {
                for (n = s, i = 0; i < p && i < this.size; ++i) e.set(i, a, t(game.getTileUnsafe(n, o))), ++n;
                for (n -= r; i < this.size; ++i) e.set(i, a, t(game.getTileUnsafe(n, o))), ++n;
                ++o
            }
            for (o -= r; a < d && a < this.size; ++a) {
                for (n = s, i = 0; i < p && i < this.size; ++i) e.set(i, a, t(game.getTileUnsafe(n, o))), ++n;
                for (n -= r; i < this.size; ++i) e.set(i, a, t(game.getTileUnsafe(n, o))), ++n;
                ++o
            }
        }, e.prototype.updateField = function(e, t) {
            e.clear();
            var i = this.size,
                a = this.updateQueue,
                n = this.tileX,
                o = this.tileY,
                r = this.penaltyFieldLand;
            t === MoveType.Water ? (r = this.penaltyFieldWater, this.updatePenaltyField(r, this.getMovePenaltyForWater)) : t === MoveType.Flying ? (r = this.penaltyFieldFlying, this.updatePenaltyField(r, this.getMovePenaltyForFlying)) : this.updatePenaltyField(r, this.getMovePenaltyForLand), a.enqueue(player.x), a.enqueue(player.y), e.set(player.x - n, player.y - o, 255);
            for (var s = function(t, s, l, p) {
                var d = l - n,
                    u = p - o;
                if (!(d < 0 || d >= i || u < 0 || u >= i)) {
                    var g = e.get(t - n, s - o),
                        m = Math.max(g - 1 - r.get(d, u), 0);
                    m > e.get(d, u) && (e.set(d, u, m), a.enqueue(l), a.enqueue(p))
                }
            }; !a.isEmpty();) {
                var l = a.dequeue(),
                    p = a.dequeue();
                s(l, p, l - 1, p), s(l, p, l + 1, p), s(l, p, l, p - 1), s(l, p, l, p + 1)
            }
        }, e.blockedPenalty = 50, e
    }(),
    FlowFieldDebugRenderer = function() {
        function e(e, t) {
            this.ff = t, this.gl = e;
            var i = [.5, 0, 0, 1, 1, 0, 1, 1, 1, .5, 1, 0, .5, 0, 0, 1, 1, .5, 1, 0, .5, .5, 0, 0],
                a = e.createBuffer(),
                n = e.createTexture();
            a && n && (this.viewQuadBuffer = a, e.bindBuffer(e.ARRAY_BUFFER, this.viewQuadBuffer), e.bufferData(e.ARRAY_BUFFER, new Float32Array(i), e.STATIC_DRAW), this.shaderProgramAlphaDebug = new CompiledProgram(e, "basic-texture-vertex", "alpha-debug-fragment"), t.setDelegate(this), this.field = t.fieldLandWater, this.tex = n, e.bindTexture(e.TEXTURE_2D, this.tex), e.texImage2D(e.TEXTURE_2D, 0, e.ALPHA, this.ff.getWidth(), this.ff.getHeight(), 0, e.ALPHA, e.UNSIGNED_BYTE, void 0), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE))
        }
        return e.prototype.update = function() {
            var e = this.gl;
            e.bindTexture(e.TEXTURE_2D, this.tex), e.texImage2D(e.TEXTURE_2D, 0, e.ALPHA, this.field.width, this.field.height, 0, e.ALPHA, e.UNSIGNED_BYTE, this.field.data)
        }, e.prototype.renderDebug = function() {
            var e = this.gl,
                t = this.shaderProgramAlphaDebug;
            e.useProgram(t.program), e.enable(e.BLEND), e.enableVertexAttribArray(t.attribs.position), e.enableVertexAttribArray(t.attribs.texture), e.activeTexture(e.TEXTURE0), e.bindTexture(e.TEXTURE_2D, this.tex), e.uniform1i(t.uniforms.data, 0), e.bindBuffer(e.ARRAY_BUFFER, this.viewQuadBuffer), e.vertexAttribPointer(t.attribs.position, 2, e.FLOAT, !1, 16, 0), e.vertexAttribPointer(t.attribs.texture, 2, e.FLOAT, !1, 16, 8), e.drawArrays(e.TRIANGLES, 0, 6)
        }, e
    }(),
    UI;
! function(e) {
    var t = function() {
        function t() {
            var e = this;
            this.bindState = [], this.rebindingKey = null, this.rebindingKeyElement = null, this.mousePlayerDirection = FacingDirection.None, this.touchPlayerDirection = null, this.highlightTimeout = null, this.elementDocument = $(document), this.elementWindow = $(window), this.elementBody = $("body"), this.objectUrl = null, this.screen = this.screenLoading, this.elementDocument.bind("contextmenu", function(e) {
                return e.preventDefault(), e.stopPropagation(), !1
            }).on("onselectstart", function(e) {
                return e.preventDefault(), e.stopPropagation(), !1
            }).on("touchstart mousedown", function(t) {
                e.onMouseDown(t)
            }).on("touchend mouseup mouseleave", function(t) {
                e.onMouseUpOrLeave(t)
            }).on("touchmove mousemove", function(t) {
                e.onMouseMove(t)
            }).on("mousewheel DOMMouseScroll", function(t) {
                e.onMouseScroll(t)
            }).bind("keydown", function(t) {
                e.onKeyDown(t)
            }).bind("keyup", function(t) {
                e.onKeyUp(t)
            }), this.elementWindow.on("blur", function() {
                e.bindState = [], e.mousePlayerDirection = FacingDirection.None
            }).on("resize", function(t) {
                Utilities.debounce("WindowResize", function() {
                    e.onWindowResize()
                }, 200)
            }).on("error", function(t) {
                e.displayMessage(Message.ErrorHasOccured, MessageType.Bad), game.playing && e.displayHint(HintType.Bugs), t && t.originalEvent && t.originalEvent.error ? Utilities.Console.error(Source.Game, t.originalEvent.message, t.originalEvent.error.stack) : Utilities.Console.error(Source.Game, t)
            }).bind("beforeunload", function() {
                game.saveGame(SaveType.Quit)
            }), this.elementDocument.on("mouseup", "button, .clickable", function(t) {
                t && t.target && $(t.target).hasClass("silent") || e.playClickSound()
            }), this.elementDocument.on("dragstart", "img", function(e) {
                e.preventDefault()
            }), this.elementDocument.on("mouseenter", ".highlight", function() {
                $(this).removeClass("highlight")
            }), "development" === Steamworks.getBetaName() && (Steamworks.setupReporting(), this.setVersionExtra("(Development)"))
        }
        return t.prototype.initialize = function() {
            this.screenLoading = new e.LoadingScreen, this.screenOptions = new e.OptionsScreen, this.screenConfirm = new e.ConfirmScreen, this.screenTitle = new e.TitleScreen, this.screenHelp = new e.HelpScreen, this.screenInGame = new e.InGameScreen
        }, t.prototype.initializeGameState = function() {
            this.dialogInfo = {}, this.dialogContainerInfo = [], this.quickSlotInfo = [], this.containerSortInfo = {}, this.currentHint = HintType.WelcomeToWayward, this.highlight(), this.screenInGame.initializeGameState()
        }, t.prototype.getBody = function() {
            return this.elementBody
        }, t.prototype.getWidth = function() {
            return this.elementBody.width()
        }, t.prototype.getHeight = function() {
            return this.elementBody.height()
        }, t.prototype.appendStyle = function(e, t) {
            $('style[data-style-id="' + e + '"]').remove();
            var i = document.createElement("style");
            i.type = "text/css", i.textContent = t;
            var a = document.createAttribute("data-style-id");
            a.value = e, i.setAttributeNode(a), document.getElementsByTagName("head")[0].appendChild(i)
        }, t.prototype.setRangeValue = function(e, t) {
            $('style[data-style-range-id="' + e + '"]').remove();
            var i = 'input[data-range-id="' + e + '"]::-webkit-slider-runnable-track {\n\t\t\tbackground: linear-gradient(to right, #FFFFFF 0%, #FFFFFF ' + 100 * t + "%, rgba(0,0,0,0) " + 100 * t + "%, rgba(0,0,0,0) 100%);\n\t\t}";
            this.appendStyle("range" + e, i)
        }, t.prototype.playClickSound = function() {
            audio.queueEffect(SfxType.Click)
        }, t.prototype.switchToScreen = function(t, i) {
            switch (void 0 === i && (i = TitleScreenId.Default), Utilities.Console.log(Source.Ui, "switchToScreen", ScreenId[t]), this.screen && (this.screen.hide(), this.screen.unbindElements(), this.screen = null), this.hideLoadingScreen(), this.screenId = t, t) {
                case ScreenId.Cover:
                    this.screen = new e.CoverScreen;
                    break;
                case ScreenId.Title:
                    this.screen = this.screenTitle, this.screenTitle.refreshSlots();
                    break;
                case ScreenId.Game:
                    this.screen = this.screenInGame;
                    break;
                default:
                    return
            }
            this.screen instanceof e.TitleScreen ? this.screen.show(i) : this.screen.show()
        }, t.prototype.showLoadingScreen = function(e) {
            void 0 === e && (e = LoadingType.Normal), this.screenLoading.show(e)
        }, t.prototype.setLoadingMessage = function(e) {
            this.screenLoading.setMessage(e)
        }, t.prototype.showLoadingScreenAround = function(e) {
            var t = this;
            this.showLoadingScreen(), setTimeout(function() {
                e(), t.hideLoadingScreen()
            }, 50)
        }, t.prototype.hideLoadingScreen = function() {
            this.screenLoading.hide()
        }, t.prototype.toggleOptions = function() {
            ui.screenInGame.tooltipHide(), this.isOptionsOverlayEnabled() && (this.isOptionsOverlayShown() ? this.hideOptionsScreen() : this.showOptionsScreen())
        }, t.prototype.showOptionsScreen = function() {
            this.screenInGame.completeBlockerMouseMovement(), this.screenOptions.show()
        }, t.prototype.hideOptionsScreen = function() {
            this.screenOptions.hide()
        }, t.prototype.onWindowResize = function() {
            game.glContext.canvas.width = this.elementWindow.width(), game.glContext.canvas.height = this.elementWindow.height(), game.resizeRenderer(), ui.screenHelp.setHeight(), this.isInGameScreenShown() && this.screenInGame.clampDialogs()
        }, t.prototype.updateWindowMode = function() {
            Steamworks.isElectron() ? Steamworks.sendMessage("fullscreen_update", "") : this.onUpdateWindowMode()
        }, t.prototype.onUpdateWindowMode = function() {
            game.options.windowMode ? this.cancelFullscreen() : this.launchFullScreen()
        }, t.prototype.launchFullScreen = function() {
            if (Steamworks.isElectron()) Steamworks.sendMessage("fullscreen", "1");
            else {
                var e = document.documentElement;
                e.requestFullscreen ? e.requestFullscreen() : e.msRequestFullscreen ? e.msRequestFullscreen() : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.webkitRequestFullscreen && e.webkitRequestFullscreen()
            }
        }, t.prototype.cancelFullscreen = function() {
            Steamworks.isElectron() ? Steamworks.sendMessage("fullscreen", "0") : document.exitFullscreen ? document.exitFullscreen() : document.msExitFullscreen ? document.msExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen && document.webkitExitFullscreen()
        }, t.prototype.isInGameScreenShown = function() {
            return this.screen === this.screenInGame
        }, t.prototype.onMouseDown = function(e) {
            if (null !== ui.rebindingKey) return void e.preventDefault();
            var t = "touchstart" === e.type ? this.getMouseBind(KeyBind.Touch) : e.button;
            null !== t && (ui.bindState[t] = Date.now()), this.screen && this.screen.onMouseDown(e)
        }, t.prototype.onMouseUpOrLeave = function(e) {
            if (null !== this.rebindingKey && null !== this.rebindingKeyElement) {
                if (e.target.className.indexOf("bind-default") !== -1) return;
                return this.setBind(this.rebindingKey, e.button, BindType.Mouse), this.updateKeybind(this.rebindingKey, this.rebindingKeyElement), this.rebindingKey = null, this.rebindingKeyElement = null, void e.preventDefault()
            }
            var t = "touchend" === e.type ? this.getMouseBind(KeyBind.Touch) : e.button;
            if (!game.playing) return this.isConfirmOverlayShown() && this.screenConfirm.onKeyUp(e), void(null !== t && (ui.bindState[t] = void 0));
            if (Mods.callHook(Mods.Hook.OnMouseUpOrLeave, e) !== !1) {
                for (var i = !0, a = 0; a < Utilities.Enums.getMax(KeyBind); a++)
                    if (Utilities.Enums.isValid(KeyBind, a)) {
                        var n = this.getMouseBind(a);
                        if (n === t && ui.isBindDown(a) && Mods.callHook(Mods.Hook.OnKeyBindPress, a) === !1) {
                            i = !1;
                            break
                        }
                    }
                i && this.screen && this.screen.onMouseUpOrLeave(e), null !== t && (ui.bindState[t] = void 0)
            }
        }, t.prototype.onMouseMove = function(e) {
            Mods.callHook(Mods.Hook.OnMouseMove, e) !== !1 && this.screen && this.screen.onMouseMove(e)
        }, t.prototype.onMouseScroll = function(e) {
            Mods.callHook(Mods.Hook.OnMouseScroll, e) !== !1 && this.screen && this.screen.onMouseScroll(e)
        }, t.prototype.onKeyDown = function(e) {
            if (null !== ui.rebindingKey) return void e.preventDefault();
            if (!(Mods.callHook(Mods.Hook.OnKeyDown, e) === !1 || this.screen && this.screen.onKeyDown(e, e.keyCode, !0))) {
                e.metaKey ? ui.bindState[e.keyCode] = void 0 : ui.bindState[e.keyCode] = Date.now();
                for (var t = 0; t < Utilities.Enums.getMax(KeyBind); t++)
                    if (Utilities.Enums.isValid(KeyBind, t) && ui.isBindDown(t)) {
                        e.preventDefault();
                        break
                    }
                ui.bindState[8] && (ui.bindState[8] = void 0, e.preventDefault()), this.screen && this.screen.onKeyDown(e, e.keyCode, !1)
            }
        }, t.prototype.onKeyUp = function(e) {
            if (null !== this.rebindingKey && null !== this.rebindingKeyElement) return 27 === e.keyCode ? (this.updateKeybind(this.rebindingKey, this.rebindingKeyElement), this.rebindingKey = null, this.rebindingKeyElement = null) : (this.setBind(this.rebindingKey, e.keyCode, BindType.Keyboard), this.updateKeybind(this.rebindingKey, this.rebindingKeyElement), this.rebindingKey = null, this.rebindingKeyElement = null), void e.preventDefault();
            if (!game.playing) return this.isConfirmOverlayShown() && this.screenConfirm.onKeyUp(e), void(ui.bindState[e.keyCode] = void 0);
            if (Mods.callHook(Mods.Hook.OnKeyUp, e) !== !1) {
                for (var t = !0, i = 0; i < Utilities.Enums.getMax(KeyBind); i++)
                    if (Utilities.Enums.isValid(KeyBind, i)) {
                        var a = this.getKeyBind(i);
                        if (a === e.keyCode && ui.isBindDown(i) && Mods.callHook(Mods.Hook.OnKeyBindPress, i) === !1) {
                            t = !1;
                            break
                        }
                    }
                t && this.screen && (this.screen.onKeyUp(e) || this.isConfirmOverlayShown() && this.screenConfirm.onKeyUp(e)), delete ui.bindState[e.keyCode]
            }
        }, t.prototype.setRebindingKey = function(e, t) {
            this.rebindingKey = e, this.rebindingKeyElement = t
        }, t.prototype.getRebindingKeyElement = function() {
            return this.rebindingKeyElement
        }, t.prototype.isBindDown = function(e) {
            return void 0 !== this.bindState[this.getBind(e).value]
        }, t.prototype.getBindDownTime = function(e) {
            var t = this.bindState[this.getBind(e).value];
            return t ? Date.now() - t : 0
        }, t.prototype.isBindPressed = function(e, t) {
            var i = this.getBind(e);
            return i.type === BindType.Keyboard ? this.isBindDown(e) : i.type === t.type && i.value === t.value
        }, t.prototype.getBind = function(e) {
            var t = game.options.binds[e];
            return t && void 0 !== t.value ? t : (t = defaultBinds[e], !t || t.type !== BindType.Keyboard && t.type !== BindType.Mouse ? (Utilities.Console.error(Source.Ui, "Unknown bind for " + e + ", " + KeyBind[e]), {
                type: BindType.Other,
                value: 0
            }) : t)
        }, t.prototype.getKeyBind = function(e) {
            var t = this.getBind(e);
            return t.type === BindType.Keyboard ? t.value : null
        }, t.prototype.getMouseBind = function(e) {
            var t = this.getBind(e);
            return t.type === BindType.Mouse ? t.value : null
        }, t.prototype.setBind = function(e, t, i) {
            game.options.binds[e] = {
                value: t,
                type: i
            }, this.updateBindTranslation(e)
        }, t.prototype.clearBind = function(e) {
            delete game.options.binds[e], this.updateBindTranslation(e)
        }, t.prototype.updateBindTranslation = function(e) {
            var t = null;
            switch (e) {
                case KeyBind.Help:
                    t = Languages.UiTranslation.HudHelp;
                    break;
                case KeyBind.Milestones:
                    t = Languages.UiTranslation.HudMilestones;
                    break;
                case KeyBind.Messages:
                    t = Languages.UiTranslation.HudMessages;
                    break;
                case KeyBind.Options:
                    t = Languages.UiTranslation.HudOptions;
                    break;
                case KeyBind.Actions:
                    t = Languages.UiTranslation.HudActions;
                    break;
                case KeyBind.Inventory:
                    t = Languages.UiTranslation.HudInventory;
                    break;
                case KeyBind.Crafting:
                    t = Languages.UiTranslation.HudCrafting;
                    break;
                case KeyBind.Equipment:
                    t = Languages.UiTranslation.HudEquipment;
                    break;
                case KeyBind.Skills:
                    t = Languages.UiTranslation.HudSkills
            }
            null !== t && Languages.refreshUiTranslation(t)
        }, t.prototype.getStringForKeyBind = function(e) {
            var t = this.getBind(e);
            switch (t.type) {
                case BindType.Mouse:
                    return makeString(Message.MouseButton, t.value);
                default:
                    return keyCodes[t.value]
            }
        }, t.prototype.getMousePositionFromMouseEvent = function(e) {
            var t = 0,
                i = 0;
            if (void 0 !== e.originalEvent.touches) t = e.originalEvent.touches[0].clientX, i = e.originalEvent.touches[0].clientY;
            else if (void 0 !== e.offsetX) t = e.offsetX, i = e.offsetY;
            else if (void 0 !== e.layerX) t = e.layerX, i = e.layerY;
            else if (void 0 !== e.clientX) {
                var a = document.getElementById("game");
                if (a) {
                    var n = a.getBoundingClientRect();
                    t = e.clientX - n.left - a.clientLeft, i = e.clientY - n.top - a.clientTop
                }
            }
            return {
                x: t,
                y: i
            }
        }, t.prototype.getMousePlayerDirection = function() {
            return this.mousePlayerDirection
        }, t.prototype.setMousePlayerDirection = function(e) {
            this.mousePlayerDirection = e
        }, t.prototype.getTouchPlayerDirection = function() {
            return this.touchPlayerDirection
        }, t.prototype.setTouchPlayerDirection = function(e) {
            this.touchPlayerDirection = e
        }, t.prototype.setupItemBackgrounds = function() {
            var e, t = "";
            for (e in ItemType)
                if (!isNaN(e) && (e = parseInt(e, 10), e !== ItemType.None)) {
                    var i = void 0;
                    for (i in ItemImage)
                        if (!isNaN(i)) {
                            i = parseInt(i, 10);
                            var a = "";
                            i !== ItemImage.Selected && i !== ItemImage.Highlighted || (a = " !important"), t += ".item-" + e + "-" + ItemImage[i].toLowerCase() + ' { background-image: url("' + Utilities.ItemImageCache.getItemImageUrl(parseInt(e, 10), i) + '")' + a + "; }\n"
                        }
                }
            this.appendStyle("stylebackgrounds", t)
        }, t.prototype.refreshStats = function() {
            this.screenInGame.refreshStats()
        }, t.prototype.refreshAttributes = function() {
            this.screenInGame.refreshAttributes()
        }, t.prototype.loadQuickSlots = function() {
            this.screenInGame.loadQuickSlots()
        }, t.prototype.isOverlayShown = function() {
            return this.isConfirmOverlayShown() || this.isOptionsOverlayShown() || this.isHelpOverlayShown()
        }, t.prototype.isConfirmOverlayShown = function() {
            return this.screenConfirm.isVisible()
        }, t.prototype.isOptionsOverlayShown = function() {
            return this.screenOptions.isVisible()
        }, t.prototype.isHelpOverlayShown = function() {
            return this.screenHelp.isVisible()
        }, t.prototype.isHelpOverlayEnabled = function() {
            return !this.screenHelp.element.parent().hasClass("disabled")
        }, t.prototype.isOptionsOverlayEnabled = function() {
            return !this.screenOptions.element.parent().hasClass("disabled")
        }, t.prototype.showTitleScreen = function() {
            this.screenTitle.element.quickShow()
        }, t.prototype.refreshSlots = function() {
            this.screen instanceof e.TitleScreen && this.screen.refreshSlots()
        }, t.prototype.displayConfirmDialog = function(e, t, i) {
            var a = this;
            return this.screenId !== ScreenId.Title && this.screenId !== ScreenId.Game ? void setTimeout(function() {
                a.displayConfirmDialog(e, t, i)
            }, 100) : void this.screenConfirm.show({
                message: e,
                buttons: t,
                callback: i
            })
        }, t.prototype.displayHint = function(e, t) {
            void 0 === t && (t = !1), (t || !player.hintSeen[e] && game.options.hints) && !this.screenHelp.isVisible() && (player.hintSeen[e] = !0, ui.screenInGame.tooltipHide(), ui.screenInGame.completeBlockerMouseMovement(), this.screenHelp.displayHint(e), this.screenHelp.show())
        }, t.prototype.getCurrentHint = function() {
            return this.currentHint
        }, t.prototype.setCurrentHint = function(e) {
            this.currentHint = e
        }, t.prototype.isMouseMovementBlockerVisible = function() {
            return ui.screenInGame.isMouseMovementBlockerVisible()
        }, t.prototype.toggleHelp = function() {
            this.isHelpOverlayEnabled() && (this.isHelpOverlayShown() ? this.screenHelp.hide() : this.displayHint(this.currentHint, !0))
        }, t.prototype.hideHelpScreen = function() {
            this.screenHelp.hide()
        }, t.prototype.tooltipRefresh = function() {
            this.screenInGame.tooltipRefresh()
        }, t.prototype.refreshWorldTooltips = function() {
            this.screenInGame.refreshWorldTooltips()
        }, t.prototype.messageIdToText = function(e) {
            return Message[e].replace(/([A-Z])/g, " $1").trim()
        }, t.prototype.getMessageHtml = function(e, t, i, a) {
            void 0 === t && (t = "p"), void 0 === i && (i = TextCase.Sentence), void 0 === a && (a = !0);
            var n = "";
            e.type && (n = ' class="message-' + MessageType[e.type].toString().toLowerCase() + '"');
            var o, r = e.args || [];
            return e.message ? (r.unshift(e.message), o = makeString.apply(this, r)) : o = r.join(""), o = Utilities.String.formatCase(o, i), a && Steamworks.debugLog("[MESSAGE] " + o), "<" + t + n + ">" + o + "</" + t + ">"
        }, t.prototype.displayMessage = function(e, t) {
            for (var i = [], a = 2; a < arguments.length; a++) i[a - 2] = arguments[a];
            Mods.callHook.apply(void 0, [Mods.Hook.OnDisplayMessage, e, t, i]) !== !1 && this.displayMessagePack({
                message: e,
                type: t,
                args: i
            })
        }, t.prototype.displayMessagePack = function(e) {
            this.screenInGame.displayMessagePack(e)
        }, t.prototype.getMessageCount = function() {
            return this.screenInGame.getMessageCount()
        }, t.prototype.removeOldestMessage = function() {
            this.screenInGame.removeOldestMessage()
        }, t.prototype.updateMilestonesDialog = function() {
            this.screenInGame.updateMilestonesDialog()
        }, t.prototype.updateSkillsDialog = function() {
            this.screenInGame.updateSkillsDialog()
        }, t.prototype.updateCraftingDialog = function(e, t) {
            this.screenInGame.updateCraftingDialog(e, t)
        }, t.prototype.getInventoryItemOrder = function() {
            return this.screenInGame.getInventoryItemsInOrder()
        }, t.prototype.updateItem = function(e) {
            return this.screenInGame.updateItem(e)
        }, t.prototype.hideActionsMenu = function() {
            this.screenInGame.hideActionsMenu()
        }, t.prototype.openMapDialog = function() {
            this.screenInGame.openMapDialog()
        }, t.prototype.closeMapDialog = function() {
            this.screenInGame.closeMapDialog()
        }, t.prototype.setFontStyle = function() {
            this.elementBody.removeClass("font-style"), game.options.fontStyle || this.elementBody.addClass("font-style")
        }, t.prototype.setOpacity = function() {
            var e = "\n\t\t\t\t.ui-dialog {\n\t\t\t\t\tbackground-color: rgba(15, 13, 14, " + game.options.dialogOpacity + ");\n\t\t\t\t}\n\n\t\t\t\t.ui-dialog:hover {\n\t\t\t\t\tbackground-color: rgba(15, 13, 14, 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.ui-dialog button,\n\t\t\t\t.ui-dialog canvas,\n\t\t\t\t.ui-dialog .ui-dialog-content .filter {\n\t\t\t\t\topacity: " + game.options.dialogOpacity + ";\n\t\t\t\t}\n\n\t\t\t\t.ui-dialog:hover button,\n\t\t\t\t.ui-dialog:hover canvas,\n\t\t\t\t.ui-dialog:hover .ui-dialog-content .filter {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}";
            this.appendStyle("Opacity", e)
        }, t.prototype.updateKeybind = function(e, t) {
            this.screenOptions.updateBind(e, t)
        }, t.prototype.addOptionsSection = function(e, t) {
            return this.screenOptions.addOptionsSection(e, t)
        }, t.prototype.removeOptionsSection = function(e) {
            this.screenOptions.removeOptionsSection(e)
        }, t.prototype.createDialog = function(e, t) {
            return this.screenInGame.createDialog(e, t)
        }, t.prototype.toggleDialog = function(e) {
            return this.screenInGame.toggleDialog(e)
        }, t.prototype.openDialog = function(e) {
            return this.screenInGame.openDialog(e)
        }, t.prototype.closeDialog = function(e) {
            return this.screenInGame.closeDialog(e)
        }, t.prototype.setEquipSlot = function(e, t, i) {
            void 0 === i && (i = !1), this.screenInGame.setEquipSlot(e, t, i)
        }, t.prototype.setQuickSlot = function(e, t, i) {
            void 0 === i && (i = !1), this.screenInGame.setQuickSlot(e, t, i)
        }, t.prototype.refreshQuickSlots = function() {
            this.screenInGame.refreshQuickSlots()
        }, t.prototype.removeItemFromQuickSlot = function(e) {
            this.screenInGame.removeItemFromQuickSlot(e)
        }, t.prototype.removeItemFromEquipSlot = function(e, t) {
            void 0 === t && (t = !1), this.screenInGame.removeItemFromEquipSlot(e, t)
        }, t.prototype.isManageModsVisible = function() {
            return this.screen instanceof e.TitleScreen && "ManageMods" === this.screen.openedMenu
        }, t.prototype.refreshModManager = function() {
            this.screen instanceof e.TitleScreen && this.screen.refreshMods()
        }, t.prototype.setObjectUrl = function(e) {
            this.objectUrl && (URL.revokeObjectURL(this.objectUrl), this.objectUrl = null), this.objectUrl = e
        }, t.prototype.runHotKeys = function() {
            if (this.screenInGame.canUseHotkeys()) {
                for (var e = !1, t = 0; t < hotKeyNumbers.length; t++) {
                    var i = hotKeyNumbers[t];
                    ui.isBindDown(i) && ui.pressHotKey(t) && (e = !0)
                }
                e && game.addDelay(Delay.HotKey)
            }
        }, t.prototype.pressHotKey = function(e) {
            return !!this.screenInGame.isVisible() && this.screenInGame.pressHotKey(e)
        }, t.prototype.onGameEnd = function(e) {
            this.screen && this.screen.onGameEnd(e)
        }, t.prototype.highlight = function(e, t, i) {
            if (void 0 === e && (e = null), void 0 === t && (t = !0), void 0 === i && (i = 1e4), this.removeHighlights(), null !== this.highlightTimeout && (clearTimeout(this.highlightTimeout), this.highlightTimeout = null), e)
                for (var a in e) {
                    var n = $(e[a]).addClass("highlight");
                    if (n.length > 0 && (n.get(0).scrollIntoView(), t)) break
                }
            this.highlightTimeout = setTimeout(this.removeHighlights.bind(this), i)
        }, t.prototype.removeHighlights = function() {
            this.highlightTimeout = null, $(".highlight").removeClass("highlight")
        }, t.prototype.getSerializationProperties = function(e) {
            return ["dialogInfo", "dialogContainerInfo", "quickSlotInfo", "containerSortInfo", "currentHint"]
        }, t.prototype.onMove = function() {
            this.screenInGame.onMove()
        }, t.prototype.openContainer = function(e, t) {
            void 0 === t && (t = null), this.screenInGame.openContainer(e, t)
        }, t.prototype.closeContainer = function(e) {
            this.screenInGame.closeContainer(e)
        }, t.prototype.isContainerOpen = function(e) {
            return this.screenInGame.isContainerOpen(e)
        }, t.prototype.addItemToContainer = function(e, t, i, a) {
            void 0 === i && (i = !1), void 0 === a && (a = !1), this.screenInGame.addItemToContainer(e, t, i, a)
        }, t.prototype.afterAddingMultipleItemsToContainer = function(e) {
            this.screenInGame.afterAddingMultipleItemsToContainer(e)
        }, t.prototype.removeItemFromContainer = function(e, t) {
            this.screenInGame.removeItemFromContainer(e, t)
        }, t.prototype.updateInventorySort = function() {
            this.screenInGame.updateInventorySort()
        }, t.prototype.getDialogInfo = function(e) {
            return ui.dialogInfo[e]
        }, t.prototype.setVersionExtra = function(e) {
            $("#version .extra").text(e)
        }, t.prototype.openDialogs = function() {
            this.screenInGame.openDialogs()
        }, t
    }();
    e.Ui = t
}(UI || (UI = {}));
var tooltips = {},
    tooltipsMap = {},
    globalTooltipId = 0;
! function(e) {
    e.fn.functionalTooltip = function(t) {
        for (var i = [], a = 1; a < arguments.length; a++) i[a - 1] = arguments[a];
        var n = this.get(0);
        this.is(document) && (n = document.body, n.id || (n.id = '"functional-tooltip-' + globalTooltipId));
        var o, r = tooltipsMap[n.id];
        if ("string" == typeof t) {
            if (void 0 === r) return null;
            if (o = tooltips[r], !o) return null;
            var s = void 0;
            switch (t) {
                case "instance":
                    return o;
                case "enable":
                    o.disabled = !1;
                    break;
                case "show":
                    return !o.visible && (s = i.shift(), o.show.apply(s, i), !0);
                case "update-position":
                    return s = i.shift(), o.visible === s && (o.updateTooltipPosition.apply(s, i), !0);
                case "disable":
                    o.visible && o.onClose && o.onClose.call(e(this)), o.disabled = !0, o.visible = null, o.element.style.display = "none";
                    break;
                case "hide":
                    o.visible = null, o.element.style.display = "none";
                    break;
                case "refresh":
                    o.visible && o.show.call(o.visible, null);
                    break;
                case "destroy":
                    o.element.remove(), delete tooltipsMap[r], delete tooltips[r], this.off("mouseenter"), this.off("mouseleave"), this.off("mousemove"), this.off("touchstart"), this.off("touchmove"), this.off("touchend"), this.off("remove");
                    break;
                default:
                    Utilities.Console.log(Source.Ui, "Missing tooltip function", t)
            }
        } else {
            if (void 0 !== r) return Utilities.Console.log(Source.Ui, "Tooltip already initialized", t), null;
            o = t, r = globalTooltipId, globalTooltipId++, tooltipsMap[n.id] = r, tooltips[r] = o, o.visible = null, o.element = document.createElement("div"), o.element.id = "tooltip-" + r, o.element.className = "ui-tooltip ui-widget ui-corner-all ui-widget-content", o.element.style.display = "none", n.appendChild(o.element), o.updateTooltipPosition = function(e, t, i, a) {
                var n = o.position;
                n && (n.startAtRight && (e += this.clientWidth), n.startAtBottom ? t += this.clientHeight : n.centerY && (t -= o.element.clientHeight / 2 - this.clientHeight / 2), n.leftOffset && (e += n.leftOffset), n.topOffset && (t += n.topOffset), e + o.width > document.body.clientWidth && (n.clampRight ? e = document.body.clientWidth - o.width : (e -= o.width, n.leftOffset && (e -= 2 * n.leftOffset))), t + o.height > document.body.clientHeight && (t -= o.height, n.topOffset && (t -= 2 * n.topOffset)), e < 0 && (e = 0), t < 0 && (t = 0), o.element.style.left = e + "px", o.element.style.top = t + "px", void 0 !== i && void 0 !== a && e < i && e + o.width > i && t < a && t + o.height > a ? (o.visible = null, o.element.style.display = "none") : o.visible || (o.visible = this, o.element.style.display = "block"))
            }, o.show = function(t, i) {
                if (void 0 === i && (i = !1), !t || "touchstart" !== o.lastEvent) {
                    var a = e(this);
                    t && o.onPosition && (o.position = o.onPosition.call(a));
                    var n = o.content.call(a);
                    if (0 !== n.length) {
                        var r = '<div class="ui-tooltip-content">' + n + "</div>";
                        if (t) o.visible = this, o.element.style.left = "0px", o.element.style.top = "0px", o.element.style.visibility = "hidden", o.element.style.display = "block";
                        else if (o.element.innerHTML === r) return;
                        if (o.element.innerHTML = r, o.width = o.element.clientWidth, o.height = o.element.clientHeight, t) {
                            var s = t.pageX,
                                l = t.pageY;
                            if ("touchstart" !== t.type && "touchend" !== t.type && "touchmove" !== t.type || (s = t.originalEvent.touches[0].pageX, l = t.originalEvent.touches[0].pageY), o.trackMouse || i) o.updateTooltipPosition.call(this, s, l);
                            else {
                                var p = this.getBoundingClientRect();
                                o.updateTooltipPosition.call(this, p.left, p.top, s, l)
                            }
                            o.element.style.visibility = "visible", o.onOpen && o.onOpen.call(a)
                        }
                    }
                }
            };
            var l = function() {
                o.visible = null, o.element.style.display = "none", o.onClose && o.onClose.call(e(this))
            };
            this.on("mouseenter touchstart", o.selector, function(e) {
                o.disabled || (o.visible || o.show.call(this, e), o.lastEvent = e.type, "touchstart" !== e.type && e.stopPropagation())
            }), this.on("mouseleave touchend", o.selector, function(e) {
                o.disabled || (o.visible && l.call(this), o.lastEvent = e.type, "touchend" !== e.type && e.stopPropagation())
            }), this.on("mousemove touchmove", o.selector, function(e) {
                if (!o.disabled) {
                    if (o.trackMouse)
                        if (o.visible === this) {
                            var t = e.pageX,
                                i = e.pageY;
                            "touchmove" === e.type && (t = e.originalEvent.touches[0].pageX, i = e.originalEvent.touches[0].pageY), o.updateTooltipPosition.call(this, t, i)
                        } else o.show.call(this, e);
                    else o.visible || o.show.call(this, e);
                    e.preventDefault()
                }
            }), this.on("remove", o.selector, function() {
                o.disabled || o.visible === this && l.call(this)
            })
        }
        return null
    }
}(jQuery);
var MapGen200 = function() {
        function e() {}
        return e.prototype.generateWorld = function(e) {
            var t = this;
            Utilities.Console.log(Source.MapGen, "generateTileTypes", e), ui.setLoadingMessage(e ? Message.GeneratingWorld : Message.LoadingWorld);
            var i = Utilities.WebWorkerHelpers.create(function(e) {
                var t = e.mapSize,
                    i = e.seed,
                    a = e.zMin,
                    n = e.zMax,
                    o = e.zNormal,
                    r = e.generateNewWorld,
                    s = new Uint8Array(t * t * (n + 1)),
                    l = new Float64Array((t + 1) * (t + 1)),
                    p = new Float64Array((t + 1) * (t + 1));
                Utilities.Random.setSeed(i);
                for (var d = function(e, i) {
                    return l[e * (t + 1) + i]
                }, u = function(e, i) {
                    return p[e * (t + 1) + i]
                }, g = function(e, i, a) {
                    l[e * (t + 1) + i] = a
                }, m = function(e, i, a) {
                    p[e * (t + 1) + i] = a
                }, y = function(e, t, i) {
                    var a = i * Utilities.Random.nextFloat() - .5 * i;
                    return .5 * (e + t) + a
                }, c = 0; c <= t; c++)
                    for (var h = 0; h <= t; h++) c < 19 || h < 19 || c > t - 19 || h > t - 19 ? g(c, h, -1) : 256 === c && 256 === h || 128 === c && 128 === h || 384 === c && 384 === h || 128 === c && 384 === h || 384 === c && 128 === h ? g(c, h, 50) : g(c, h, 0), h >= 300 ? m(c, h, 100) : m(c, h, -1);
                for (var T, f, v, I, S = t; S > 1;) {
                    for (var M = 0; M < t; M += S)
                        for (var k = 0; k < t; k += S) T = M + S, f = k + S, v = Math.round(.5 * (M + T)), I = Math.round(.5 * (k + f)), d(M, k) !== -1 && d(T, k) !== -1 && (g(v, k, y(d(M, k), d(T, k), T - M)), m(v, k, y(u(M, k), u(T, k), T - M))), d(M, k) !== -1 && d(M, f) !== -1 && (g(M, I, y(d(M, k), d(M, f), f - k)), m(M, I, y(u(M, k), u(M, f), f - k))), d(T, k) !== -1 && d(T, f) !== -1 && (g(T, I, y(d(T, k), d(T, f), f - k)), m(T, I, y(u(T, k), u(T, f), f - k))), d(M, f) !== -1 && d(T, f) !== -1 && (g(v, f, y(d(M, f), d(T, f), T - M)), m(v, f, y(u(M, f), u(T, f), T - M))), d(M, I) !== -1 && d(T, I) !== -1 && (g(v, I, y(d(M, I), d(T, I), T - M)), m(v, I, y(u(M, I), u(T, I), T - M)));
                    S = Math.round(.5 * S)
                }
                for (var b, w, D, C, F, R = {
                    x: 0,
                    y: 0
                }, A = [], B = [], L = 250, x = 25, G = 25, U = t / (L - x) + 1, W = t / 2 + 50, E = function(e, i, a, n) {
                    s[a * t * t + i * t + e] = n
                }, P = function(e, i, a, n) {
                    0 === Math.floor(4 * Utilities.Random.nextFloat()) && (s[a * t * t + i * t + (e - 1)] = n), 0 === Math.floor(4 * Utilities.Random.nextFloat()) && (s[a * t * t + i * t + (e + 1)] = n), 0 === Math.floor(4 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t - 1) + e] = n), 0 === Math.floor(4 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t + 1) + e] = n), 0 === Math.floor(6 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t + 1) + (e + 1)] = n), 0 === Math.floor(6 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t - 1) + (e - 1)] = n), 0 === Math.floor(6 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t - 1) + (e + 1)] = n), 0 === Math.floor(6 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t + 1) + (e - 1)] = n)
                }, O = a; O <= n; O++)
                    for (var H = 0; H < t; H++)
                        for (var N = 0; N < t; N++) {
                            b = l[H * (t + 1) + N], F = p[H * (t + 1) + N], W = Math.round(F * U) + G, w = Math.round(b * U) + G, D = Math.round(1e3 * b) + G, C = w + 50;
                            var q = 0;
                            if (O === o) {
                                if (w < 40 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.DeepSeawater) : w < 65 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Seawater) : w < 80 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowSeawater) : w < 100 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand) : w < 110 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel), W > 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand))) : w < 130 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass), D % 50 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Tree)), W > 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), D >= 3e4 && D <= 30060 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.PalmTree), D % 8 !== 0 && D % 9 !== 0 || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.PalmTreeWithCoconuts))) : D % 64 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass))), W > 240 && W < 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel))) : w < 160 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Tree), D % 5 === 0 || D % 6 === 0 || D % 7 === 0 || D % 8 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass) : D % 19 !== 0 && D % 20 !== 0 && D % 21 !== 0 || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.BareTree)), D % 256 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.TreeWithBerries)), D % 257 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.TreeWithFungus)), W > 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), D % 4 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : D % 16 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass))), W > 240 && W < 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel))) : w < 165 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass), W > 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), D % 2 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel))), W > 240 && W < 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel))) : w < 185 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), D % 50 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Tree) : D % 449 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater)), W < 150 && W > 120 && (D % 2 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Swamp) : D % 3 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass)), D % 5 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater) : D % 6 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.TreeWithVines))), W > 250 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel), D % 449 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater))) : W > 210 && W <= 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))) : w < 186 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), W > 250 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sandstone), D % 257 !== 0 && D % 259 !== 0 || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.SandstoneWithIron), P(H, N, O, q))) : W > 220 && W <= 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 190 && W <= 220 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt)), D % 30 === 0 && B.push([H, N])) : w < 230 ? W > 250 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sandstone), D % 357 !== 0 && D % 359 !== 0 || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.SandstoneWithIron), P(H, N, O, q)), D % 361 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.SandstoneWithNiter), P(H, N, O, q))) : W > 240 && W < 260 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel), D % 3 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))) : W >= 260 && W < 300 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 190 && W <= 240 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), D % 264 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithIron), P(H, N, O, q)), D % 265 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithTalc), P(H, N, O, q)), D % 266 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithLimestone), P(H, N, O, q)), D % 267 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithCoal), P(H, N, O, q))) : w < 250 ? W > 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 240 && W < 260 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel), D % 3 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))) : W >= 260 && W < 300 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 190 && W <= 240 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), D % 164 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithIron), P(H, N, O, q)), D % 165 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithTalc), P(H, N, O, q)), D % 166 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithLimestone), P(H, N, O, q)), D % 167 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithCoal), P(H, N, O, q))) : w < 290 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), W > 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 210 && W <= 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : W > 160 && W <= 210 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks))) : (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Snow), D % 8 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks)), W > 250 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sandstone), D % 257 !== 0 && D % 259 !== 0 || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.SandstoneWithIron), P(H, N, O, q))) : W > 230 && W <= 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 220 && W <= 230 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : W > 160 && W <= 220 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks))), w > 140 && w < 160 && W > 75 && W < 150 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass), D % 16 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))), w > 185 && (W > 0 && W < 25 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : W > 150 && W < 175 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))), 0 === R.x && 0 === R.y && w > 186)
                                    for (var _ = H; _ > 1; _--)
                                        if (Math.round(l[_ * (t + 1) + N] * U) + G < 80) {
                                            R.x = _, R.y = N;
                                            break
                                        }
                            } else C < 180 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), W > 100 && W < 130 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : W > 200 && W < 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater), W > 220 && W < 230 && D % 2 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.FreshWater))), D % 328 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithIron), P(H, N, O, q)), D % 329 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithTalc), P(H, N, O, q)), D % 330 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithLimestone), P(H, N, O, q)), D % 331 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithCoal), P(H, N, O, q))) : q = C > 260 ? C < 270 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : C < 285 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater) : C < 330 ? D % 10 === 0 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater) : Utilities.TileHelpers.setTypeRaw(q, TerrainType.FreshWater) : D % 20 === 0 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.FreshWater) : Utilities.TileHelpers.setTypeRaw(q, TerrainType.DeepFreshWater) : D % 15 === 0 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks) : D % 25 === 0 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt);
                            r && (O === o ? (W < 250 ? (32850 === D && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), A.push([TileTemplateType.House, H, N, O])), 37250 !== D && 37500 !== D && 37750 !== D || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), A.push([TileTemplateType.Pond, H, N, O]))) : 31250 !== D && 33250 !== D && 34250 !== D && 35250 !== D || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), A.push([TileTemplateType.Desert, H, N, O])), 21500 === D && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), A.push([TileTemplateType.Beach, H, N, O])), w < 10 && D === -9e3 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.DeepSeawater), A.push([TileTemplateType.Boat, H, N, O]))) : 43850 === D || 43851 === D ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), A.push([TileTemplateType.House, H, N, O])) : 45850 !== D && 45851 !== D || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), A.push([TileTemplateType.CavePond, H, N, O]))), q = D % 4 === 0 ? Utilities.TileHelpers.setGfxRaw(q, 2) : D % 2 === 0 ? Utilities.TileHelpers.setGfxRaw(q, 1) : Utilities.TileHelpers.setGfxRaw(q, 0), E(H, N, O, q)
                        }
                postMessage({
                    tileGenArray: s.buffer,
                    templateSpawns: A,
                    caveSpawns: B,
                    spawnCoords: R
                }, [s.buffer])
            }, function(i) {
                var a = i.data;
                Utilities.Console.log(Source.MapGen, "msg posted");
                var n = new Uint8Array(a.tileGenArray),
                    o = a.templateSpawns,
                    r = a.caveSpawns,
                    s = a.spawnCoords;
                game.spawnCoords = s, t.setupTiles(n, o, r, e)
            });
            i.postMessage({
                mapSize: game.mapSize,
                seed: Utilities.Random.getSeed(),
                zMin: Z_MIN,
                zMax: Z_MAX,
                zNormal: Z_NORMAL,
                generateNewWorld: e
            })
        }, e.prototype.setupTiles = function(e, t, i, a) {
            Utilities.Console.log(Source.MapGen, "setupTiles", Utilities.Random.getSeed());
            var n, o, r;
            game.tile = new Array(game.mapSizeSq * (Z_MAX + 1));
            var s;
            if (a) {
                var l = 325,
                    p = 1300,
                    d = 950,
                    u = 600;
                for (r = Z_MIN; r <= Z_MAX; r++)
                    for (n = 0; n < game.mapSize; n++)
                        for (o = 0; o < game.mapSize; o++)
                            if (s = game.setTile(n, o, r, {}), s.data = e[r * game.mapSizeSq + o * game.mapSize + n], r === Z_NORMAL) switch (Utilities.TileHelpers.getType(s)) {
                                case TerrainType.Seawater:
                                    0 === Utilities.Random.nextInt(d) && game.spawnMonsterFromGroup(MonsterSpawnGroup.Water, n, o, r, !0), 0 === Utilities.Random.nextInt(p) && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r);
                                    break;
                                case TerrainType.Dirt:
                                case TerrainType.Grass:
                                case TerrainType.Swamp:
                                    0 === Utilities.Random.nextInt(d) && game.spawnMonsterFromGroup(MonsterSpawnGroup.Any, n, o, r, !0), 0 === Utilities.Random.nextInt(u) ? Item.spawn(null, n, o, r) : 0 === Utilities.Random.nextInt(l) && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r);
                                    break;
                                case TerrainType.Tree:
                                    Utilities.Random.nextInt(l) <= 24 && (Doodad.create(DoodadType.Sapling, n, o, r), game.changeTile({
                                        type: TerrainType.Grass
                                    }, n, o, r, !1));
                                    break;
                                case TerrainType.Gravel:
                                case TerrainType.Snow:
                                    0 === Utilities.Random.nextInt(d) && game.spawnMonsterFromGroup(MonsterSpawnGroup.Any, n, o, r, !0), 0 === Utilities.Random.nextInt(u) && Item.spawn(null, n, o, r);
                                    break;
                                case TerrainType.ShallowSeawater:
                                    0 === Utilities.Random.nextInt(p) && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r), 0 === Utilities.Random.nextInt(u) && MapGen.spawnShoreItem(n, o, r);
                                    break;
                                case TerrainType.Sand:
                                    0 === Utilities.Random.nextInt(l) && 0 !== Utilities.Random.nextInt(u) && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r)
                            } else switch (Utilities.TileHelpers.getType(s)) {
                                case TerrainType.Dirt:
                                    var g = Utilities.Random.nextInt(u);
                                    Utilities.Random.nextInt(d) <= 1 && game.spawnMonsterFromGroup(MonsterSpawnGroup.Any, n, o, r, !0), g <= 2 && Item.spawn(null, n, o, r), Utilities.Random.nextInt(l) <= 1 && g > 2 && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r);
                                    break;
                                case TerrainType.FreshWater:
                                case TerrainType.ShallowFreshWater:
                                case TerrainType.DeepFreshWater:
                                    0 === Utilities.Random.nextInt(d) && game.spawnMonsterFromGroup(MonsterSpawnGroup.Water, n, o, r, !0)
                            }
            } else
                for (r = Z_MIN; r <= Z_MAX; r++)
                    for (n = 0; n < game.mapSize; n++)
                        for (o = 0; o < game.mapSize; o++) game.getOrCreateTile(n, o, r).data = e[r * game.mapSizeSq + o * game.mapSize + n];
            Utilities.Console.log(Source.MapGen, "PostGenerateWorld", Utilities.Random.getSeed()), Mods.callHook(Mods.Hook.PostGenerateWorld, a);
            var m, y;
            if (a) {
                for (var c = 0; c < t.length; c++) MapGen.spawnTemplate(t[c][0], t[c][1], t[c][2], t[c][3]);
                for (m = 0; m < i.length; m++) {
                    var h = i[m][0],
                        T = i[m][1];
                    game.changeTile({
                        type: TerrainType.CaveEntrance
                    }, h, T, Z_NORMAL, !1), game.changeTile({
                        type: TerrainType.CaveEntrance
                    }, h, T, Z_CAVE, !1)
                }
            } else {
                var f = Utilities.Random.getSeed();
                for (game.monsters = game.monsters.filter(game.nullFilter), game.doodads = game.doodads.filter(game.nullFilter), game.tileEvents = game.tileEvents.filter(game.nullFilter), game.corpses = game.corpses.filter(game.nullFilter), m = 0, y = game.doodads.length; m < y; m++) {
                    var v = game.doodads[m];
                    s = game.getTile(v.x, v.y, v.z), s && (s.doodadId = m)
                }
                for (m = 0, y = game.tileEvents.length; m < y; m++) {
                    var I = game.tileEvents[m];
                    s = game.getTile(I.x, I.y, I.z), s && (s.eventId = m)
                }
                for (m = 0, y = game.monsters.length; m < y; m++) {
                    var S = game.monsters[m];
                    s = game.getTile(S.x, S.y, S.z), s && (s.monsterId = m)
                }
                for (m = 0, y = game.corpses.length; m < y; m++) {
                    var M = game.corpses[m];
                    s = game.getTile(M.x, M.y, M.z), s && (void 0 === s.corpseIds && (s.corpseIds = []), s.corpseIds.push(m))
                }
                for (var k = Object.keys(game.tileData), b = 0, w = k.length; b < w; b++)
                    for (var D = parseInt(k[b], 10), C = Object.keys(game.tileData[D]), F = 0, R = C.length; F < R; F++)
                        for (var A = parseInt(C[F], 10), B = game.tileData[D][A], L = Z_MIN; L <= Z_MAX; L++) {
                            var x = B[L];
                            if (x && x.length > 0) {
                                var G = x[0];
                                if (null !== G.type && void 0 !== G.type) {
                                    var U = game.getTile(D, A, L);
                                    Utilities.TileHelpers.setType(U, G.type), null !== G.gfx && void 0 !== G.gfx && Utilities.TileHelpers.setGfx(U, G.gfx)
                                }
                            }
                        }
                Utilities.Random.setSeed(f)
            }
            Utilities.Console.log(Source.MapGen, "finishedLoading", Utilities.Random.getSeed()), MapGen.setFinishedLoading()
        }, e
    }(),
    MapGen210 = function() {
        function e() {}
        return e.prototype.generateWorld = function(e) {
            var t = this;
            Utilities.Console.log(Source.MapGen, "generateTileTypes", e), ui.setLoadingMessage(e ? Message.GeneratingWorld : Message.LoadingWorld);
            var i = Utilities.WebWorkerHelpers.create(function(e) {
                var t = e.mapSize,
                    i = e.seed,
                    a = e.zMin,
                    n = e.zMax,
                    o = e.zNormal,
                    r = e.generateNewWorld,
                    s = new Uint8Array(t * t * (n + 1)),
                    l = new Float64Array((t + 1) * (t + 1)),
                    p = new Float64Array((t + 1) * (t + 1));
                Utilities.Random.setSeed(i);
                for (var d = function(e, i) {
                    return l[e * (t + 1) + i]
                }, u = function(e, i) {
                    return p[e * (t + 1) + i]
                }, g = function(e, i, a) {
                    l[e * (t + 1) + i] = a
                }, m = function(e, i, a) {
                    p[e * (t + 1) + i] = a
                }, y = function(e, t, i) {
                    var a = i * Utilities.Random.nextFloat() - .5 * i;
                    return .5 * (e + t) + a
                }, c = 0; c <= t; c++)
                    for (var h = 0; h <= t; h++) c < 19 || h < 19 || c > t - 19 || h > t - 19 ? g(c, h, -1) : 256 === c && 256 === h || 128 === c && 128 === h || 384 === c && 384 === h || 128 === c && 384 === h || 384 === c && 128 === h ? g(c, h, 50) : g(c, h, 0), h >= 300 ? m(c, h, 100) : m(c, h, -1);
                for (var T, f, v, I, S = t; S > 1;) {
                    for (var M = 0; M < t; M += S)
                        for (var k = 0; k < t; k += S) T = M + S, f = k + S, v = Math.round(.5 * (M + T)), I = Math.round(.5 * (k + f)), d(M, k) !== -1 && d(T, k) !== -1 && (g(v, k, y(d(M, k), d(T, k), T - M)), m(v, k, y(u(M, k), u(T, k), T - M))), d(M, k) !== -1 && d(M, f) !== -1 && (g(M, I, y(d(M, k), d(M, f), f - k)), m(M, I, y(u(M, k), u(M, f), f - k))), d(T, k) !== -1 && d(T, f) !== -1 && (g(T, I, y(d(T, k), d(T, f), f - k)), m(T, I, y(u(T, k), u(T, f), f - k))), d(M, f) !== -1 && d(T, f) !== -1 && (g(v, f, y(d(M, f), d(T, f), T - M)), m(v, f, y(u(M, f), u(T, f), T - M))), d(M, I) !== -1 && d(T, I) !== -1 && (g(v, I, y(d(M, I), d(T, I), T - M)), m(v, I, y(u(M, I), u(T, I), T - M)));
                    S = Math.round(.5 * S)
                }
                for (var b, w, D, C, F, R = {
                    x: 0,
                    y: 0
                }, A = [], B = [], L = 250, x = 25, G = 25, U = t / (L - x) + 1, W = t / 2 + 50, E = function(e, i, a, n) {
                    s[a * t * t + i * t + e] = n
                }, P = function(e, i, a, n) {
                    0 === Math.floor(4 * Utilities.Random.nextFloat()) && (s[a * t * t + i * t + (e - 1)] = n), 0 === Math.floor(4 * Utilities.Random.nextFloat()) && (s[a * t * t + i * t + (e + 1)] = n), 0 === Math.floor(4 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t - 1) + e] = n), 0 === Math.floor(4 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t + 1) + e] = n), 0 === Math.floor(6 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t + 1) + (e + 1)] = n), 0 === Math.floor(6 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t - 1) + (e - 1)] = n), 0 === Math.floor(6 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t - 1) + (e + 1)] = n), 0 === Math.floor(6 * Utilities.Random.nextFloat()) && (s[a * t * t + (i * t + 1) + (e - 1)] = n)
                }, O = a; O <= n; O++)
                    for (var H = 0; H < t; H++)
                        for (var N = 0; N < t; N++) {
                            b = l[H * (t + 1) + N], F = p[H * (t + 1) + N], W = Math.round(F * U) + G, w = Math.round(b * U) + G, D = Math.round(1e3 * b) + G, C = w + 50;
                            var q = 0;
                            if (O === o) {
                                if (w < 40 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.DeepSeawater) : w < 65 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Seawater) : w < 80 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowSeawater) : w < 100 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand) : w < 110 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel), W > 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand))) : w < 130 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass), D % 50 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Tree)), W > 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), D >= 3e4 && D <= 30060 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.PalmTree), D % 8 !== 0 && D % 9 !== 0 || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.PalmTreeWithCoconuts))) : D % 64 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass))), W > 240 && W < 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel))) : w < 160 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Tree), D % 5 === 0 || D % 6 === 0 || D % 7 === 0 || D % 8 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass) : D % 19 !== 0 && D % 20 !== 0 && D % 21 !== 0 || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.BareTree)), D % 256 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.TreeWithBerries)), D % 257 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.TreeWithFungus)), W > 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), D % 4 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : D % 16 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass))), W > 240 && W < 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel))) : w < 165 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass), W > 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), D % 2 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel))), W > 240 && W < 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel))) : w < 185 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), D % 50 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Tree) : D % 449 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater)), W < 150 && W > 120 && (D % 2 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Swamp) : D % 3 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass)), D % 5 === 0 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater) : D % 6 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.TreeWithVines))), W > 250 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel), D % 449 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater))) : W > 210 && W <= 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))) : w < 186 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), W > 250 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sandstone), D % 260 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.SandstoneWithIron), P(H, N, O, q))) : W > 220 && W <= 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 190 && W <= 220 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt)), D % 30 === 0 && B.push([H, N])) : w < 230 ? W > 250 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sandstone), D % 360 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.SandstoneWithIron), P(H, N, O, q)), D % 361 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.SandstoneWithNiter), P(H, N, O, q))) : W > 240 && W < 260 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel), D % 3 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))) : W >= 260 && W < 300 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 190 && W <= 240 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), D % 264 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithIron), P(H, N, O, q)), D % 265 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithTalc), P(H, N, O, q)), D % 266 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithLimestone), P(H, N, O, q)), D % 267 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithCoal), P(H, N, O, q))) : w < 250 ? W > 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 240 && W < 260 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel), D % 3 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))) : W >= 260 && W < 300 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 190 && W <= 240 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), D % 165 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithTalc), P(H, N, O, q)), D % 166 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithLimestone), P(H, N, O, q)), D % 167 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithCoal), P(H, N, O, q))) : w < 290 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), W > 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 210 && W <= 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : W > 160 && W <= 210 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks))) : (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Snow), D % 8 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks)), W > 250 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sandstone), D % 260 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.SandstoneWithIron), P(H, N, O, q))) : W > 230 && W <= 250 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : W > 220 && W <= 230 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : W > 160 && W <= 220 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks))), w > 140 && w < 160 && W > 75 && W < 150 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Grass),
                                    D % 16 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))), w > 185 && (W > 0 && W < 25 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : W > 150 && W < 175 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt))), 0 === R.x && 0 === R.y && w > 186)
                                    for (var _ = H; _ > 1; _--)
                                        if (Math.round(l[_ * (t + 1) + N] * U) + G < 80) {
                                            R.x = _, R.y = N;
                                            break
                                        }
                            } else C < 180 ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks), W > 100 && W < 130 ? q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt) : W > 200 && W < 250 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater), W > 220 && W < 230 && D % 2 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.FreshWater))), D % 328 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithIron), P(H, N, O, q)), D % 329 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithTalc), P(H, N, O, q)), D % 330 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithLimestone), P(H, N, O, q)), D % 331 === 0 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.RocksWithCoal), P(H, N, O, q))) : q = C > 260 ? C < 270 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : C < 285 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater) : C < 330 ? D % 10 === 0 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.ShallowFreshWater) : Utilities.TileHelpers.setTypeRaw(q, TerrainType.FreshWater) : D % 20 === 0 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.FreshWater) : Utilities.TileHelpers.setTypeRaw(q, TerrainType.DeepFreshWater) : D % 15 === 0 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.Rocks) : D % 25 === 0 ? Utilities.TileHelpers.setTypeRaw(q, TerrainType.Gravel) : Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt);
                            r && (O === o ? (W < 250 ? (32850 === D && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), A.push([TileTemplateType.House, H, N, O])), 37250 !== D && 37500 !== D && 37750 !== D || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), A.push([TileTemplateType.Pond, H, N, O]))) : 31250 !== D && 33250 !== D && 34250 !== D && 35250 !== D || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), A.push([TileTemplateType.Desert, H, N, O])), 21500 === D && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Sand), A.push([TileTemplateType.Beach, H, N, O])), w < 10 && D === -9e3 && (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.DeepSeawater), A.push([TileTemplateType.Boat, H, N, O]))) : 43850 === D || 43851 === D ? (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), A.push([TileTemplateType.House, H, N, O])) : 45850 !== D && 45851 !== D || (q = Utilities.TileHelpers.setTypeRaw(q, TerrainType.Dirt), A.push([TileTemplateType.CavePond, H, N, O]))), q = D % 4 === 0 ? Utilities.TileHelpers.setGfxRaw(q, 2) : D % 2 === 0 ? Utilities.TileHelpers.setGfxRaw(q, 1) : Utilities.TileHelpers.setGfxRaw(q, 0), E(H, N, O, q)
                        }
                postMessage({
                    tileGenArray: s.buffer,
                    templateSpawns: A,
                    caveSpawns: B,
                    spawnCoords: R
                }, [s.buffer])
            }, function(i) {
                var a = i.data;
                Utilities.Console.log(Source.MapGen, "msg posted");
                var n = new Uint8Array(a.tileGenArray),
                    o = a.templateSpawns,
                    r = a.caveSpawns,
                    s = a.spawnCoords;
                game.spawnCoords = s, t.setupTiles(n, o, r, e)
            });
            i.postMessage({
                mapSize: game.mapSize,
                seed: Utilities.Random.getSeed(),
                zMin: Z_MIN,
                zMax: Z_MAX,
                zNormal: Z_NORMAL,
                generateNewWorld: e
            })
        }, e.prototype.setupTiles = function(e, t, i, a) {
            Utilities.Console.log(Source.MapGen, "setupTiles", Utilities.Random.getSeed());
            var n, o, r;
            game.tile = new Array(game.mapSizeSq * (Z_MAX + 1));
            var s;
            if (a) {
                var l = 325,
                    p = 1300,
                    d = 950,
                    u = 600,
                    g = game.dailyChallenge ? 1 : 0;
                for (r = Z_MIN; r <= Z_MAX; r++)
                    for (n = 0; n < game.mapSize; n++)
                        for (o = 0; o < game.mapSize; o++)
                            if (s = game.setTile(n, o, r, {}), s.data = e[r * game.mapSizeSq + o * game.mapSize + n], r === Z_NORMAL) switch (Utilities.TileHelpers.getType(s)) {
                                case TerrainType.Seawater:
                                    Utilities.Random.nextInt(d) <= g && game.spawnMonsterFromGroup(MonsterSpawnGroup.Water, n, o, r, !0), 0 === Utilities.Random.nextInt(p) && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r);
                                    break;
                                case TerrainType.Dirt:
                                case TerrainType.Grass:
                                case TerrainType.Swamp:
                                    Utilities.Random.nextInt(d) <= g && game.spawnMonsterFromGroup(MonsterSpawnGroup.Any, n, o, r, !0), 0 === Utilities.Random.nextInt(u) ? Item.spawn(null, n, o, r) : 0 === Utilities.Random.nextInt(l) && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r);
                                    break;
                                case TerrainType.Tree:
                                    Utilities.Random.nextInt(l) <= 24 && (Doodad.create(DoodadType.Sapling, n, o, r), game.changeTile({
                                        type: TerrainType.Grass
                                    }, n, o, r, !1));
                                    break;
                                case TerrainType.Gravel:
                                case TerrainType.Snow:
                                    Utilities.Random.nextInt(d) <= g && game.spawnMonsterFromGroup(MonsterSpawnGroup.Any, n, o, r, !0), 0 === Utilities.Random.nextInt(u) && Item.spawn(null, n, o, r);
                                    break;
                                case TerrainType.ShallowSeawater:
                                    0 === Utilities.Random.nextInt(p) && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r), 0 === Utilities.Random.nextInt(u) && MapGen.spawnShoreItem(n, o, r);
                                    break;
                                case TerrainType.Sand:
                                    0 === Utilities.Random.nextInt(l) && 0 !== Utilities.Random.nextInt(u) && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r)
                            } else switch (Utilities.TileHelpers.getType(s)) {
                                case TerrainType.Dirt:
                                    var m = Utilities.Random.nextInt(u);
                                    Utilities.Random.nextInt(d) <= g + 1 && game.spawnMonsterFromGroup(MonsterSpawnGroup.Any, n, o, r, !0), m <= 2 && Item.spawn(null, n, o, r), Utilities.Random.nextInt(l) <= 1 && m > 2 && MapGen.spawnDoodad(Utilities.TileHelpers.getType(s), n, o, r);
                                    break;
                                case TerrainType.FreshWater:
                                case TerrainType.ShallowFreshWater:
                                case TerrainType.DeepFreshWater:
                                    Utilities.Random.nextInt(d) <= g && game.spawnMonsterFromGroup(MonsterSpawnGroup.Water, n, o, r, !0)
                            }
            } else
                for (r = Z_MIN; r <= Z_MAX; r++)
                    for (n = 0; n < game.mapSize; n++)
                        for (o = 0; o < game.mapSize; o++) game.getOrCreateTile(n, o, r).data = e[r * game.mapSizeSq + o * game.mapSize + n];
            Utilities.Console.log(Source.MapGen, "PostGenerateWorld", Utilities.Random.getSeed()), Mods.callHook(Mods.Hook.PostGenerateWorld, a);
            var y, c;
            if (a) {
                for (var h = 0; h < t.length; h++) MapGen.spawnTemplate(t[h][0], t[h][1], t[h][2], t[h][3]);
                for (y = 0; y < i.length; y++) {
                    var T = i[y][0],
                        f = i[y][1];
                    game.changeTile({
                        type: TerrainType.CaveEntrance
                    }, T, f, Z_NORMAL, !1), game.changeTile({
                        type: TerrainType.CaveEntrance
                    }, T, f, Z_CAVE, !1)
                }
            } else {
                var v = Utilities.Random.getSeed();
                for (game.monsters = game.monsters.filter(game.nullFilter), game.doodads = game.doodads.filter(game.nullFilter), game.tileEvents = game.tileEvents.filter(game.nullFilter), game.corpses = game.corpses.filter(game.nullFilter), y = 0, c = game.doodads.length; y < c; y++) {
                    var I = game.doodads[y];
                    s = game.getTile(I.x, I.y, I.z), s && (s.doodadId = y)
                }
                for (y = 0, c = game.tileEvents.length; y < c; y++) {
                    var S = game.tileEvents[y];
                    s = game.getTile(S.x, S.y, S.z), s && (s.eventId = y)
                }
                for (y = 0, c = game.monsters.length; y < c; y++) {
                    var M = game.monsters[y];
                    s = game.getTile(M.x, M.y, M.z), s && (s.monsterId = y)
                }
                for (y = 0, c = game.corpses.length; y < c; y++) {
                    var k = game.corpses[y];
                    s = game.getTile(k.x, k.y, k.z), s && (void 0 === s.corpseIds && (s.corpseIds = []), s.corpseIds.push(y))
                }
                for (var b = Object.keys(game.tileData), w = 0, D = b.length; w < D; w++)
                    for (var C = parseInt(b[w], 10), F = Object.keys(game.tileData[C]), R = 0, A = F.length; R < A; R++)
                        for (var B = parseInt(F[R], 10), L = game.tileData[C][B], x = Z_MIN; x <= Z_MAX; x++) {
                            var G = L[x];
                            if (G && G.length > 0) {
                                var U = G[0];
                                if (null !== U.type && void 0 !== U.type) {
                                    var W = game.getTile(C, B, x);
                                    Utilities.TileHelpers.setType(W, U.type), null !== U.gfx && void 0 !== U.gfx && Utilities.TileHelpers.setGfx(W, U.gfx)
                                }
                            }
                        }
                Utilities.Random.setSeed(v)
            }
            Utilities.Console.log(Source.MapGen, "finishedLoading", Utilities.Random.getSeed()), MapGen.setFinishedLoading()
        }, e
    }(),
    MapGen;
! function(e) {
    function t(e, t) {
        s = !1;
        for (var i = game.version.split("."), a = parseInt(i[0], 10), n = parseInt(i[1], 10), o = parseInt(i[2], 10), r = null, l = null; !r;) l = "MapGen" + a + n + o, window[l] ? r = new window[l] : o--;
        Utilities.Console.log(Source.MapGen, game.version + " -> " + l), r.generateWorld(e);
        var p = setInterval(function() {
            s && !game.playing && (s = !1, clearInterval(p), t())
        }, 10)
    }

    function i() {
        s = !0
    }

    function a(e, t, i) {
        Item.spawn([ItemType.StoneShovel, ItemType.Bone, ItemType.WoodenSpear, ItemType.BarkTorch, ItemType.TannedLeather, ItemType.BarkTunic, ItemType.BarkLeggings, ItemType.BarkShield, ItemType.LockPick, ItemType.OldInstructionalScroll, ItemType.TatteredMap, ItemType.Waterskin], e, t, i)
    }

    function n(e, t, i) {
        Item.spawn([ItemType.Log, ItemType.Branch, ItemType.Twigs, ItemType.Log, ItemType.Branch, ItemType.Twigs, ItemType.RawCod, ItemType.MessageInABottle, ItemType.Seaweed], e, t, i)
    }

    function o(e, t, i, a, n) {
        var o = null;
        n ? a === Z_CAVE ? o = [DoodadType.WhiteMushrooms, DoodadType.SpottedRedMushroom] : e === TerrainType.Grass ? o = [DoodadType.YellowFlowers, DoodadType.WhiteMushrooms, DoodadType.SpottedRedMushroom, DoodadType.BerryBush, DoodadType.Sapling, DoodadType.TallGrass, DoodadType.WildOnion, DoodadType.Cotton, DoodadType.PoisonIvy] : e === TerrainType.Dirt ? o = [DoodadType.GrowingGrass, DoodadType.Thistles, DoodadType.BerryBush, DoodadType.Sapling, DoodadType.TallGrass, DoodadType.PoisonIvy] : e === TerrainType.Sand ? o = [DoodadType.DeadBush, DoodadType.Cacti, DoodadType.DeadBush, DoodadType.PineapplePlant] : e === TerrainType.Swamp ? o = [DoodadType.Vines] : e !== TerrainType.Seawater && e !== TerrainType.ShallowSeawater || (o = [DoodadType.Seaweed]) : a === Z_CAVE ? o = [DoodadType.PileOfRocks, DoodadType.PileOfRocks, DoodadType.PileOfRocks, DoodadType.PileOfRocks, DoodadType.WhiteMushrooms, DoodadType.SpottedRedMushroom, DoodadType.SpottedRedMushroom, DoodadType.LockedWoodenChest] : e === TerrainType.Grass ? o = [DoodadType.YellowFlowers, DoodadType.PileOfRocks, DoodadType.WhiteMushrooms, DoodadType.SpottedRedMushroom, DoodadType.BerryBush, DoodadType.Sapling, DoodadType.TallGrass, DoodadType.WildOnion, DoodadType.Cotton, DoodadType.PoisonIvy] : e === TerrainType.Dirt ? o = [DoodadType.GrowingGrass, DoodadType.Thistles, DoodadType.BerryBush, DoodadType.Sapling, DoodadType.PileOfRocks, DoodadType.TallGrass, DoodadType.PoisonIvy] : e === TerrainType.Sand ? o = [DoodadType.DeadBush, DoodadType.Cacti, DoodadType.PileOfRocks, DoodadType.DeadBush, DoodadType.PileOfRocks, DoodadType.PineapplePlant] : e === TerrainType.Swamp ? o = [DoodadType.Vines] : e === TerrainType.Seawater || e === TerrainType.ShallowSeawater ? o = [DoodadType.Seaweed] : e !== TerrainType.CobblestoneFlooring && e !== TerrainType.SandstoneFlooring && e !== TerrainType.WoodenFlooring || (o = [DoodadType.Campfire, DoodadType.Campfire, DoodadType.LockedWoodenChest, DoodadType.Furnace, DoodadType.Kiln]), o && Doodad.create(o[Math.floor(Utilities.Random.nextFloat() * o.length)], t, i, a)
    }

    function r(e, t, i, n) {
        var r = Object.keys(templates[e]),
            s = r[Math.floor(Utilities.Random.nextFloat() * r.length)],
            l = templates[e][s],
            p = l.w,
            d = l.h,
            u = l.degrade,
            g = l.terrain.slice(),
            m = l.doodad;
        m && (m = m.slice()), 0 === Math.floor(2 * Utilities.Random.nextFloat()) && (g.reverse(), m && m.reverse());
        for (var y = [], c = 0; c < p; c++)
            for (var h = 0; h < d; h++)
                if (0 !== Math.floor(Utilities.Random.nextFloat() * u)) {
                    var T = !1,
                        f = game.getWrappedCoord(t + c),
                        v = game.getWrappedCoord(i + h),
                        I = game.getTile(f, v, n);
                    void 0 !== I.doodadId && Doodad.remove(game.doodads[I.doodadId]), Item.isContainer(I) && Item.removeContainerItems(I), void 0 !== I.monsterId && game.deleteMonsters(I.monsterId);
                    var S = void 0;
                    if (void 0 !== m && (S = m[h].charAt(c), " " !== S && l.doodadTypes)) {
                        var M = l.doodadTypes[S];
                        terrains[Utilities.TileHelpers.getType(I)].gather && game.changeTile({
                            type: TerrainType.Dirt
                        }, f, v, n, !1);
                        var k = Doodad.create(M, f, v, n);
                        M === DoodadType.WoodenDoor && y.push(k), T = !0
                    }
                    if (S = g[h].charAt(c), " " !== S) {
                        var b = l.terrainTypes[S];
                        if (game.changeTile({
                            type: b
                        }, f, v, n, !1), !T) switch (b) {
                            case TerrainType.CobblestoneFlooring:
                            case TerrainType.SandstoneFlooring:
                            case TerrainType.WoodenFlooring:
                                var w = Math.floor(600 * Utilities.Random.nextFloat()),
                                    D = Math.floor(325 * Utilities.Random.nextFloat()),
                                    C = Math.floor(500 * Utilities.Random.nextFloat());
                                w <= 70 ? a(f, v, n) : D <= 10 ? o(Utilities.TileHelpers.getType(I), f, v, n) : C <= 30 && game.spawnMonster(MonsterType.Skeleton, f, v, n, !0)
                        }
                    }
                }
        if (y.length > 0)
            for (var F = 0; F < y.length; F++) {
                var R = y[F],
                    A = world.layers[n],
                    B = A.getTile(R.x - 1, R.y),
                    L = A.getTile(R.x + 1, R.y);
                if (!A.isWall(B) && !A.isWall(L)) {
                    R.orientation = DoorOrientation.Vertical;
                    var x = game.getTile(R.x, R.y, R.z);
                    world.updateTile(R.x, R.y, R.z, x)
                }
            }
    }
    var s = !1;
    e.generateWorld = t, e.setFinishedLoading = i, e.spawnHouseItem = a, e.spawnShoreItem = n, e.spawnDoodad = o, e.spawnTemplate = r
}(MapGen || (MapGen = {}));
var globalRequire = "undefined" != typeof require ? require : void 0;
window.require = void 0;
var installDir, Steamworks;
! function(e) {
    function t() {
        return null !== he
    }

    function i() {
        return ne
    }

    function a() {
        return null !== ye
    }

    function n(e) {
        return Ie.join(installDir, e)
    }

    function o() {
        return "linux" === Ce
    }

    function r() {
        if (void 0 !== globalRequire) {
            if (te = globalRequire("fs-extra"), !te) return void Utilities.Console.log(Source.Steamworks, "Steamworks.initialize: couldn't load fs");
            if (Ie = globalRequire("path"), !Ie) return void Utilities.Console.log(Source.Steamworks, "Steamworks.initialize: couldn't load path");
            if (Te = globalRequire("os"), !Te) return void Utilities.Console.log(Source.Steamworks, "Steamworks.initialize: couldn't load os");
            if (Ce = process.platform, "darwin" === Ce ? (Utilities.Console.log(Source.Steamworks, "darwin execPath", process.execPath), installDir = Ie.resolve(process.execPath, "..", "..", "..", "..", "..", "..", ".."), Utilities.Console.log(Source.Steamworks, "darwin installDir", installDir)) : installDir = process.cwd(), re = n("logs"), se = Ie.join(re, "wayward.log"), Me = globalRequire("winston")) {
                Me.add(Me.transports.File, {
                    filename: se,
                    maxsize: 5e6,
                    maxFiles: 5,
                    json: !1
                }), Me.remove(Me.transports.Console);
                var e = Utilities.Console.log,
                    t = Utilities.Console.warn,
                    i = Utilities.Console.debug,
                    o = Utilities.Console.error;
                Utilities.Console.log = function() {
                    for (var t = [], i = 0; i < arguments.length; i++) t[i - 0] = arguments[i];
                    e.apply(console, t), Me.info(t.join(" "))
                }, Utilities.Console.info = function() {
                    for (var t = [], i = 0; i < arguments.length; i++) t[i - 0] = arguments[i];
                    e.apply(console, t), Me.info(t.join(" "))
                }, Utilities.Console.warn = function() {
                    for (var e = [], i = 0; i < arguments.length; i++) e[i - 0] = arguments[i];
                    t.apply(console, e), Me.warn(e.join(" "))
                }, Utilities.Console.debug = function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t - 0] = arguments[t];
                    i.apply(console, e), Me.debug(e.join(" "))
                }, Utilities.Console.error = function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t - 0] = arguments[t];
                    o.apply(console, e);
                    var i = e.join(" ");
                    Me.error(i), J(i)
                }, Utilities.Console.log(Source.Steamworks, "wayward.version", gameVersion);
                try {
                    Utilities.Console.log(Source.Steamworks, "wayward.build", te.readFileSync(Ie.join("resources", "app.asar", "build.txt"), {
                        encoding: "utf8"
                    }))
                } catch (r) {
                    Utilities.Console.warn(Source.Steamworks, "wayward.build", r)
                }
                Utilities.Console.log(Source.Steamworks, "electron.version", process.versions.electron), Utilities.Console.log(Source.Steamworks, "chromium.version", process.versions.chrome), Utilities.Console.log(Source.Steamworks, "os.release", Te.platform(), process.arch, Te.type(), Te.release())
            }
            if (Se = globalRequire("electron"), !Se) return void Utilities.Console.log(Source.Steamworks, "Steamworks.initialize: couldn't load electron");
            if (ce = Se.ipcRenderer, !ce) return void Utilities.Console.log(Source.Steamworks, "Steamworks.initialize: couldn't load ipc");
            if (ve = Se.remote, !ve) return void Utilities.Console.log(Source.Steamworks, "Steamworks.initialize: couldn't load remote");
            if (he = Se.shell, !he) return void Utilities.Console.log(Source.Steamworks, "Steamworks.initialize: couldn't load shell");
            if (fe = Se.webFrame, !fe) return void Utilities.Console.log(Source.Steamworks, "Steamworks.initialize: couldn't load webFrame");
            ke = globalRequire("universal-analytics"), ke || Utilities.Console.warn(Source.Steamworks, "couldn't load universal-analytics");
            var l = window.__dirname,
                p = process.env.INSTALLDIR;
            Utilities.Console.log(Source.Steamworks, "installDir", installDir, l, p);
            try {
                window.module.paths.push(installDir), installDir !== l && window.module.paths.push(l), ye = globalRequire("greenworks"), ye.initAPI() || (ye = null, Utilities.Console.warn(Source.Steamworks, "error initializing steam API."))
            } catch (r) {
                Utilities.Console.warn(Source.Steamworks, "error initializing steam API.", r)
            }
            globalRequire = void 0, ye && (installDir = ye.getCurrentGameInstallDir(), ie = ye.getSteamId(), ae = ye.getCurrentBetaName ? ye.getCurrentBetaName() : "public", Utilities.Console.log(Source.Steamworks, "initialized", ie, installDir), Utilities.Console.log(Source.Steamworks, "wayward.branch", ae), ye.onGameOverlayActive(U)), null !== De && s(De), le = n("mods"), pe = n("workshop"), de = Ie.join(pe, "mods"), ue = Ie.join(pe, "sync"), ge = Ie.join(pe, "share"), P(re), P(le), P(pe), P(de), P(ue), P(ge), $("html").delegate("a:not(#export)", "click", function() {
                var e = $(this).attr("href");
                return R(e), a() || ui.displayConfirmDialog(Message.URLHasOpenedInWebBrowser, [Message.Ok], function() {}), !1
            })
        }
    }

    function s(e) {
        De = e, De ? (ne = null !== ye && "win32" === Ce, oe = !o()) : (ne = !1, oe = !1), Utilities.Console.log(Source.Steamworks, "OverlayWorks: " + ne + ". LinksWork: " + oe)
    }

    function l(e) {
        Utilities.Console.log(Source.Steamworks, "Steamworks.initializeMods");
        var t = 1,
            i = function() {
                t--, 0 === t && (Fe = !1, h(), e())
            };
        Fe = !0, a() && (t = 3, f(i), u(function(e) {
            if (e && e.length > 0)
                for (var t = e.length, a = function() {
                    t--, 0 === t && u(i, !0)
                }, n = 0; n < e.length; n++) te.remove(Ie.join(de, e[n]), a);
            i()
        })), g(le, Mods.Type.Local, i)
    }

    function p() {
        return ie
    }

    function d() {
        return ae
    }

    function u(t, i) {
        void 0 === i && (i = !1), I(function(a, n, o, r) {
            if (null === a) {
                Utilities.Console.log(Source.Steamworks, "initializeAndLoadWorkshopMods", i, n, o, r), Fe && (o = n);
                var s = void 0;
                for (s = 0; s < r.length; s++) {
                    var l = q(r[s], Mods.Type.Workshop);
                    if (l) {
                        var p = Mods.getIndexFromPath(l);
                        null !== p && Mods.removeMod(p, !0)
                    }
                }
                var d = [],
                    u = o.length,
                    g = function() {
                        u--, u <= 0 && t(d)
                    };
                0 === u && g();
                var m = function() {
                    var t = o[s],
                        a = v(t);
                    if (Re[a] = t, i) {
                        var n = e.getModPath(a, Mods.Type.Workshop);
                        if (n) {
                            var r = Mods.getIndexFromPath(n);
                            if (null !== r) return g(), "continue"
                        }
                    }
                    Mods.initializeMod(a, Mods.Type.Workshop, function(e) {
                        null !== e ? g() : (d.push(a), g())
                    })
                };
                for (s = 0; s < o.length; s++) m()
            } else t(null)
        })
    }

    function g(e, t, i) {
        te.readdir(e, function(a, n) {
            if (a) return Utilities.Console.warn(Source.Steamworks, a), void i();
            var o = n.length,
                r = function() {
                    o--, o <= 0 && i()
                };
            0 === o && r();
            for (var s = 0; s < n.length; s++) {
                var l = n[s],
                    p = function(e) {
                        return function(i, a) {
                            return i && Utilities.Console.warn(Source.Steamworks, i), i || !a.isDirectory() ? void r() : void Mods.initializeMod(e, t, r)
                        }
                    };
                te.lstat(Ie.join(e, l), p(l))
            }
        })
    }

    function m(e) {
        var t = [];
        te.readdir(de, function(i, a) {
            if (i) return Utilities.Console.warn(Source.Steamworks, i), void e(i, null);
            var n = a.length,
                o = function() {
                    n--, n <= 0 && e(null, t)
                };
            0 === n && o();
            for (var r = 0; r < a.length; r++) {
                var s = function(e) {
                    te.lstat(Ie.join(de, e), function(i, a) {
                        i && Utilities.Console.warn(Source.Steamworks, i), a.isDirectory() && t.push(e), o()
                    })
                };
                s(a[r])
            }
        })
    }

    function y() {
        return me
    }

    function c(e) {
        if (!me) return null;
        for (var t = 0; t < me.length; t++)
            if (me[t].publishedFileId === e) return me[t];
        return null
    }

    function h() {
        for (var e = Mods.getMods(), t = 0; t < e.length; t++)
            if (Mods.isValid(t)) {
                var i = e[t];
                if (i.type !== Mods.Type.Workshop && i.publishedFileId) {
                    var a = c(i.publishedFileId);
                    null !== a && T(t, a)
                }
            }
    }

    function T(e, t) {
        if (void 0 === t && (t = null), !t) {
            var i = Mods.getFolderName(e);
            t = Re[i]
        }
        t && (Mods.setPublishId(e, t.publishedFileId), Mods.setSteamIdOwner(e, t.steamIDOwner), Mods.setLastUpdated(e, new Date(1e3 * t.timeUpdated).toLocaleString()))
    }

    function f(e) {
        Utilities.Console.log(Source.Steamworks, "refreshPublishedMods");
        var t = 0;
        t = setInterval(function() {
            Utilities.Console.log(Source.Steamworks, "refreshPublishedMods timed out"), clearInterval(t), e("timed out")
        }, 1e4), F(function(i, a) {
            if (clearInterval(t), null !== i) return void e(i);
            me = [];
            for (var n = 0; n < a.length; n++) me.push(a[n]);
            Utilities.Console.log(Source.Steamworks, "refreshPublishedMods", me), e(null)
        })
    }

    function v(e) {
        return e.fileName.substring(0, e.fileName.length - 4)
    }

    function I(e) {
        Utilities.Console.log(Source.Steamworks, "syncWorkshopItems");
        var t = 0;
        t = setInterval(function() {
            Utilities.Console.log(Source.Steamworks, "syncWorkshopItems timed out"), clearInterval(t), e("timed out", null, null, null)
        }, 1e4), ye.ugcSynchronizeItems(ue, function(i) {
            Utilities.Console.log(Source.Steamworks, "syncWorkshopItems", i), clearInterval(t), m(function(t, a) {
                if (null === t) {
                    var n = [],
                        o = [],
                        r = function(e) {
                            for (var t = 0; t < i.length; t++) {
                                var a = i[t];
                                if (v(a) === e) return !1
                            }
                            return !0
                        },
                        s = function(e) {
                            for (var t = v(e), i = 0; i < a.length; i++) {
                                var n = a[i];
                                if (n === t) return e.isUpdated
                            }
                            return !0
                        },
                        l = void 0;
                    for (l = 0; l < a.length; l++) {
                        var p = a[l];
                        r(p) && (o.push(p), te.remove(Ie.join(de, p), function() {}), te.remove(O(p), function() {}))
                    }
                    var d = i.length,
                        u = function() {
                            d--, d <= 0 && e(null, i, n, o)
                        };
                    for (0 === d && u(), l = 0; l < i.length; l++) {
                        var g = i[l];
                        s(g) ? (n.push(g), C(v(g), de, function(e) {
                            null !== e && Utilities.Console.error(Source.Steamworks, "extractArchive", e), u()
                        })) : u()
                    }
                } else Utilities.Console.error(Source.Steamworks, "enumerateInstalledWorkshopMods", t), e(t, null, null, null)
            })
        }, function(i) {
            Utilities.Console.error(Source.Steamworks, "syncWorkshopItems", i), clearInterval(t), e(i, null, null, null)
        })
    }

    function S(e, t) {
        var i = Ie.join(le, Mods.getFolderName(e)),
            a = Ie.join(i, "mod.json");
        if (!te.existsSync(a)) return void t("missing mod.json", null);
        var n = ee(),
            o = Ie.join(ge, n),
            r = Mods.getPublishFileId(e);
        r || (r = null);
        var s = r ? "" : Mods.getName(e),
            l = r ? "" : Mods.getDescription(e);
        Utilities.Console.log(Source.Steamworks, "Publishing step 1 - copying folder"), M(i, o, function(i) {
            null === i ? (Utilities.Console.log(Source.Steamworks, "Publishing step 2 - creating archive"), D(n, o, function(i) {
                null === i ? (Utilities.Console.log(Source.Steamworks, "Publishing step 3 - saving files to cloud"), k(n, function(i) {
                    null === i ? (Utilities.Console.log(Source.Steamworks, "Publishing step 4 - fetching cloud file share id"), b(n, function(i) {
                        null === i ? (Utilities.Console.log(Source.Steamworks, "Publishing step 5 - publishing file to workshop"), w(n, s, l, r, function(i, r) {
                            null === i ? (Utilities.Console.log(Source.Steamworks, "Publishing step 6 - removing temp folders"), te.remove(o, function() {
                                te.remove(H(n), function() {
                                    var i = JSON.parse(te.readFileSync(a));
                                    i.publishedFileId || (i.publishedFileId = r.toString(), Mods.setPublishId(e, i.publishedFileId)), te.writeFileSync(a, JSON.stringify(i, null, "\t")), f(function() {
                                        t(null, r)
                                    })
                                })
                            })) : t(i, null)
                        })) : t(i, null)
                    })) : t(i, null)
                })) : t(i, null)
            })) : t(i, null)
        })
    }

    function M(e, t, i) {
        te.emptyDir(t, function(a) {
            return a ? void i(a) : void te.copy(e, t, function(e) {
                return Le.indexOf(Ie.basename(e)) === -1
            }, i)
        })
    }

    function k(e, t) {
        var i = [H(e)],
            a = N(e);
        a.length > 0 && i.push(a), ye.saveFilesToCloud(i, function() {
            t(null)
        }, function(e) {
            Utilities.Console.error(Source.Steamworks, "saveFilesToCloud", e), t(e)
        })
    }

    function b(e, t) {
        var i = H(e);
        ye.fileShare(H(e), function() {
            var i = N(e);
            i.length > 0 ? ye.fileShare(i, function() {
                t(null)
            }, function() {
                t(null)
            }) : t(null)
        }, function(e) {
            Utilities.Console.error(Source.Steamworks, "getFileShareId", i, e), t(e)
        })
    }

    function w(e, t, i, a, n) {
        null === a ? ye.publishWorkshopFile(H(e), N(e), t, i, function(e) {
            n(null, e)
        }, function(e) {
            Utilities.Console.error(Source.Steamworks, "publishWorkshopFile", e), n(e, null)
        }) : ye.updatePublishedWorkshopFile(a, H(e), N(e), t, i, function() {
            n(null, a)
        }, function(e) {
            Utilities.Console.error(Source.Steamworks, "updatePublishedWorkshopFile", e), n(e, null)
        })
    }

    function D(e, t, i) {
        ye.Utils.createArchive(H(e), t, function() {
            i(null)
        }, function(e) {
            Utilities.Console.error(Source.Steamworks, "createArchive", e), i(e)
        })
    }

    function C(e, t, i) {
        ye.Utils.extractArchive(O(e), t, function() {
            i(null)
        }, function(e) {
            Utilities.Console.error(Source.Steamworks, "extractArchive", e), i(e)
        })
    }

    function F(e) {
        ye.ugcGetUserItems(ye.UGCMatchingType.Items, ye.UserUGCListSortOrder.CreationOrderAsc, ye.UserUGCList.Published, function(t) {
            e(null, t)
        }, function(t) {
            Utilities.Console.error(Source.Steamworks, "getPublishedItems", t), e(t, null)
        })
    }

    function R(e) {
        ne ? ye.activateGameOverlayToWebPage(e) : t() && oe ? he.openExternal(e) : window.open(e)
    }

    function A(e) {
        if (void 0 === e && (e = null), ne) null === e ? ye.ugcShowOverlay() : ye.ugcShowOverlay(e);
        else {
            var t = Ae;
            null !== e && (t = Be + e), R(t), a() && ui.displayConfirmDialog(Message.WorkshopHasBeenOpenedPressOkAfter, [Message.Ok], function() {
                U(!1)
            })
        }
    }

    function B() {
        if (t()) {
            var e = q("", Mods.Type.Local);
            if (e) {
                var i = Ie.join(e, "readme.txt");
                x(te.existsSync(i) ? i : e)
            }
        }
    }

    function L() {
        t() && x(te.existsSync(se) ? se : re)
    }

    function x(e) {
        try {
            he.showItemInFolder(e)
        } catch (t) {
            Utilities.Console.warn(Source.Steamworks, t), ui.displayConfirmDialog(Message.OpenFolderFailed, [Message.Ok], function() {})
        }
    }

    function G(e, t) {
        ye.ugcUnsubscribe(e, function() {
            U(!1, function() {
                t(null)
            })
        }, function(e) {
            Utilities.Console.error(Source.Steamworks, "unsubscribe", e), t(e)
        })
    }

    function U(e, t) {
        if (void 0 === t && (t = null), e || game.playing || !ui.isManageModsVisible()) t && t();
        else {
            ui.showLoadingScreen(), ui.setLoadingMessage(Message.RefreshingMods);
            var i = 2,
                a = function() {
                    i--, 0 === i && (h(), ui.refreshModManager(), ui.hideLoadingScreen(), t && t())
                };
            f(a), u(a)
        }
    }

    function W(e, t) {
        ce.send(e, t)
    }

    function E() {
        W("devtools", "1")
    }

    function P(e) {
        var t = te.existsSync(e);
        t || te.mkdirSync(e)
    }

    function O(e) {
        return Ie.join(ue, e + ".zip")
    }

    function H(e) {
        return Ie.join(ge, e + ".zip")
    }

    function N(e) {
        var t = Ie.join(ge, e, "mod.png");
        return te.existsSync(t) ? t : ""
    }

    function q(e, t, i, a) {
        void 0 === i && (i = null), void 0 === a && (a = !1);
        var n = null;
        switch (t) {
            case Mods.Type.Internal:
                var o = "mods/mods/" + e;
                null !== i && (o += "/" + i), n = o;
                break;
            case Mods.Type.Local:
                n = null === i ? Ie.join(le, e) : Ie.join(le, e, i);
                break;
            case Mods.Type.Workshop:
                n = null === i ? Ie.join(de, e) : Ie.join(de, e, i)
        }
        if (n && a) {
            try {
                var r = te.lstatSync(n);
                return r && r.isFile() ? n : null
            } catch (s) {}
            return null
        }
        return n
    }

    function _(e, t, i) {
        var a = q(e, Mods.Type.Local);
        if (a) return te.existsSync(a) ? (i(!1), void ui.displayConfirmDialog(Message.ModWithNameAlreadyExists, [Message.Ok], function() {})) : void SaveLoad.exportSave(t, function(t, n, o) {
            if (n) {
                te.mkdirSync(a);
                var r = q(e, Mods.Type.Local, "mod.json"),
                    s = q(e, Mods.Type.Local, "mod.js"),
                    l = 'var __extends = (this && this.__extends) || function (d, b) {\n\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\tfunction __() { this.constructor = d; }\n\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Mod = (function (_super) {\n\t__extends(Mod, _super);\n\tfunction Mod() {\n\t\t_super.apply(this, arguments);\n\t}\n\tMod.prototype.onInitialize = function (saveDataGlobal) {\n\t\tif (saveDataGlobal && saveDataGlobal.saved === true) {\n\t\t\treturn saveDataGlobal;\n\t\t}\n\t\tvar json = "' + o.replace(/\"/g, '\\"') + '";\n\t\tSaveLoad.getFirstFreeSlot(function(slot) { SaveLoad.importSave(slot, json, function(slot, bytes) { if (bytes > 0) { ui.refreshSlots(); ui.displayConfirmDialog(Message.ModImportedSaveGame, [Message.Ok], function() {}); } }); });\n\t\treturn { saved: true };\n\t};\n\tMod.prototype.onLoad = function (saveData) {\n\t};\n\tMod.prototype.onUnload = function () {\n\t};\n\tMod.prototype.onSave = function () {\n\t};\n\treturn Mod;\n})(Mods.Mod);',
                    p = '{\n\t"name": "Save Game - ' + e + '",\n\t"description": "A saved game",\n\t"version": "1.0.0",\n\t"author": "' + ie.screenName.replace(/\"/g, '\\"') + '",\n\t"files": ["mod.js"]\n}';
                te.writeFileSync(s, l), te.writeFileSync(r, p)
            }
            i(n)
        })
    }

    function z(e) {
        var t = q(e, Mods.Type.Local);
        t && te.remove(t, function() {})
    }

    function V() {
        for (var e = [], t = 0; t < arguments.length; t++) e[t - 0] = arguments[t];
        Me && Me.info(e.join(" "))
    }

    function Y(e) {
        fe && W("zoomfactor_add", e.toString())
    }

    function K() {
        fe && W("zoomfactor_reset", "")
    }

    function j() {
        Y(0)
    }

    function Q() {
        fe && fe.setZoomFactor(game.options.zoomFactor)
    }

    function X() {
        ke && ie && (be = ke("UA-2348518-53", {
            https: !0
        }), be.pageview("/").event("Wayward " + gameVersion, Te.platform() + " " + process.arch + " " + Te.release()).send())
    }

    function Z(e, t) {
        be && be.event("Wayward " + gameVersion + " - " + e, t).send()
    }

    function J(e) {
        be && we.indexOf(e) === -1 && (we.push(e), Z("Error", e))
    }

    function ee() {
        function e() {
            return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1)
        }
        return e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e()
    }
    var te, ie, ae, ne, oe, re, se, le, pe, de, ue, ge, me, ye = null,
        ce = null,
        he = null,
        Te = null,
        fe = null,
        ve = null,
        Ie = null,
        Se = null,
        Me = null,
        ke = null,
        be = null,
        we = [],
        De = null,
        Ce = null,
        Fe = !1,
        Re = {},
        Ae = "https://steamcommunity.com/app/379210/workshop/",
        Be = "https://steamcommunity.com/sharedfiles/filedetails/?id=",
        Le = [".git", ".gitmodules", ".vscode", "mod-reference"];
    e.isElectron = t, e.isOverlayWorking = i, e.isGreenworksEnabled = a, e.getAbsolutePath = n, e.isLinux = o, e.initialize = r, e.setupOverlayAndLinks = s, e.initializeMods = l, e.getSteamId = p, e.getBetaName = d, e.getPublishedMods = y, e.getPublishedMod = c, e.fillOutMod = T, e.publishMod = S, e.createArchive = D, e.getPublishedItems = F, e.openUrl = R, e.openWorkshop = A, e.openModsFolder = B, e.openLogsFolder = L, e.unsubscribe = G, e.sendMessage = W, e.toggleDeveloperTools = E, e.getModPath = q, e.createSaveGameMod = _, e.deleteSaveGameMod = z, e.debugLog = V, e.addZoomFactor = Y, e.setDefaultZoomFactor = K, e.updateZoomFactor = j, e.onUpdateZoomFactor = Q, e.setupReporting = X, e.recordEvent = Z, e.recordProblem = J
}(Steamworks || (Steamworks = {}));
var Mods;
! function(e) {
    ! function(e) {
        e[e.CalculateMonsterMoveType = 0] = "CalculateMonsterMoveType", e[e.CanConsumeItem = 1] = "CanConsumeItem", e[e.CanMonsterAttack = 2] = "CanMonsterAttack", e[e.CanMonsterMove = 3] = "CanMonsterMove", e[e.CanSeeMonster = 4] = "CanSeeMonster", e[e.GetAmbientColorCave = 5] = "GetAmbientColorCave", e[e.GetAmbientColorDay = 6] = "GetAmbientColorDay", e[e.GetAmbientColorNight = 7] = "GetAmbientColorNight", e[e.GetAmbientLightLevel = 8] = "GetAmbientLightLevel", e[e.GetMonsterSpriteBatchLayer = 9] = "GetMonsterSpriteBatchLayer", e[e.GetPlayerSpriteBatchLayer = 10] = "GetPlayerSpriteBatchLayer", e[e.IsPlayerSwimming = 11] = "IsPlayerSwimming", e[e.OnAddOrUpdateInventoryItem = 12] = "OnAddOrUpdateInventoryItem", e[e.OnBuild = 13] = "OnBuild", e[e.OnCraft = 14] = "OnCraft", e[e.OnCreateWorld = 15] = "OnCreateWorld", e[e.OnDisplayMessage = 16] = "OnDisplayMessage", e[e.OnGameEnd = 17] = "OnGameEnd", e[e.OnGameStart = 18] = "OnGameStart", e[e.OnItemEquip = 19] = "OnItemEquip", e[e.OnKeyBindPress = 20] = "OnKeyBindPress", e[e.OnKeyDown = 21] = "OnKeyDown", e[e.OnKeyUp = 22] = "OnKeyUp", e[e.OnMonsterDamage = 23] = "OnMonsterDamage", e[e.OnMonsterDeath = 24] = "OnMonsterDeath", e[e.OnMouseDown = 25] = "OnMouseDown", e[e.OnMouseMove = 26] = "OnMouseMove", e[e.OnMouseScroll = 27] = "OnMouseScroll", e[e.OnMouseUpOrLeave = 28] = "OnMouseUpOrLeave", e[e.OnMove = 29] = "OnMove", e[e.OnMoveDirectionUpdate = 30] = "OnMoveDirectionUpdate", e[e.OnNoInputReceived = 31] = "OnNoInputReceived", e[e.OnPlayerDamage = 32] = "OnPlayerDamage", e[e.OnShowInGameScreen = 33] = "OnShowInGameScreen", e[e.OnSpawnMonsterFromGroup = 34] = "OnSpawnMonsterFromGroup", e[e.OnTurnComplete = 35] = "OnTurnComplete", e[e.OnTurnStart = 36] = "OnTurnStart", e[e.OnUpdateWeight = 37] = "OnUpdateWeight", e[e.PostGenerateWorld = 38] = "PostGenerateWorld", e[e.PostRender = 39] = "PostRender", e[e.PostRenderWorld = 40] = "PostRenderWorld", e[e.PostRenderPostProcess = 41] = "PostRenderPostProcess", e[e.PreRender = 42] = "PreRender", e[e.PreRenderWorld = 43] = "PreRenderWorld", e[e.PreRenderPostProcess = 44] = "PreRenderPostProcess", e[e.ProcessInput = 45] = "ProcessInput", e[e.ShouldRender = 46] = "ShouldRender"
    }(e.Hook || (e.Hook = {}));
    var t = (e.Hook, function() {
        function t(e) {
            this.index = null, this.optionSectionId = 0, this.allocatedEnums = [], this.index = e
        }
        return t.prototype.getIndex = function() {
            return this.index
        }, t.prototype.getName = function() {
            return null === this.index ? null : e.getName(this.index)
        }, t.prototype.getPath = function() {
            return null === this.index ? null : e.getPath(this.index)
        }, t.prototype.createOptionsSection = function(e) {
            var t = this.index + "_" + this.optionSectionId;
            return this.optionSectionId++, ui.addOptionsSection(t, e)
        }, t.prototype.removeOptionsSection = function(e) {
            ui.removeOptionsSection(e)
        }, t.prototype.createDialog = function(e, t) {
            if (!t.title) throw "Dialog title required";
            return e.attr("mod-dialog-title", t.title), e.appendTo($("#dialogs")), ui.createDialog(e, t)
        }, t.prototype.getDialog = function(e) {
            return $('div[mod-dialog-title="' + e + '"]')
        }, t.prototype.addActionType = function(e, t, i) {
            var a = this.allocateEnum("ActionType", e, null, null, function(e) {
                Actions.add(e, i)
            }, function(e) {
                Actions.remove(e)
            });
            return Languages.getLoaded().use(a, e, t), a
        }, t.prototype.addItem = function(e) {
            if (!e.name) throw "Missing description name";
            if (null === this.index) throw "Missing mod index";
            e.mod = this.index;
            var t = this.allocateEnum("ItemType", e.name, ["Item", "defines"], function() {
                return e
            });
            return Languages.getLoaded().item(t, e.name, e.description), t
        }, t.prototype.addMonster = function(e) {
            if (!e.name) throw "Missing description name";
            if (null === this.index) throw "Missing mod index";
            e.mod = this.index;
            var t = this.allocateEnum("MonsterType", e.name, ["monsters"], function() {
                return e
            });
            return Languages.getLoaded().monster(t, e.name), t
        }, t.prototype.addTerrain = function(e, t) {
            if (void 0 === t && (t = null), !e.name) throw "Missing description name";
            if (null === this.index) throw "Missing mod index";
            e.mod = this.index;
            var i = this.allocateEnum("TerrainType", e.name, ["terrains"], function(i) {
                return e.terrainType = null !== t ? t : i, e
            }, null, function(e) {
                delete resource[e]
            });
            return Languages.getLoaded().terrain(i, e.name), i
        }, t.prototype.addTerrainResource = function(e, t, i) {
            for (var a = [], n = 0; n < t.length; n++) {
                var o = t[n];
                a.push({
                    type: o.type,
                    chance: o.chance,
                    chanceOutOf: o.chanceOutOf,
                    tileChange: o.tileChange,
                    tileChangeChance: o.tileChangeChance
                })
            }
            resource[e] = {
                items: a
            }, i && (resource[e].defaultItem = i)
        }, t.prototype.addDoodad = function(e) {
            if (!e.name) throw "Missing description name";
            if (null === this.index) throw "Missing mod index";
            e.mod = this.index;
            var t = this.allocateEnum("DoodadType", e.name, ["Doodad", "defines"], function() {
                return e
            });
            return Languages.getLoaded().doodad(t, e.name, e.prefix), t
        }, t.prototype.addMessage = function(e, t) {
            var i = this.allocateEnum("Message", e);
            return Languages.getLoaded().message(i, t), i
        }, t.prototype.addKeyBind = function(e, t) {
            var i = this.allocateEnum("KeyBind", e, null, null, null, function(e) {
                removeDefaultKeybind(e)
            });
            return addDefaultBind(i, t), i
        }, t.prototype.itemNameToObjectType = function(e) {
            for (var t = Object.keys(Item.defines), i = 0; i < t.length; i++) {
                var a = parseInt(t[i], 10);
                if (Item.defines[a].name === e) return a
            }
            return null
        }, t.prototype.getItemByType = function(e) {
            return Item.defines[e]
        }, t.prototype.getItemByName = function(e) {
            var t = this.itemNameToObjectType(e);
            return t ? this.getItemByType(t) : null
        }, t.prototype.unallocateEnums = function() {
            for (var e = 0, t = this.allocatedEnums; e < t.length; e++) {
                var i = t[e];
                Utilities.Enums.unallocate(i)
            }
            this.allocatedEnums = []
        }, t.prototype.allocateEnum = function(e, t, i, a, n, o) {
            void 0 === i && (i = null), void 0 === a && (a = null), void 0 === n && (n = null), void 0 === o && (o = null);
            var r = Utilities.Enums.allocate(e, t, i, a, n, o);
            if (r) return this.allocatedEnums.push(r), r.enumNumber;
            throw "Failed to allocate enum"
        }, t
    }());
    e.BaseMod = t;
    var i = function(e) {
        function t() {
            e.apply(this, arguments)
        }
        return __extends(t, e), t.prototype.calculateMonsterMoveType = function(e, t, i) {}, t.prototype.canConsumeItem = function(e, t) {}, t.prototype.canMonsterAttack = function(e, t) {}, t.prototype.canMonsterMove = function(e, t, i, a) {}, t.prototype.canSeeMonster = function(e, t, i) {}, t.prototype.getMonsterSpriteBatchLayer = function(e, t, i) {}, t.prototype.getPlayerSpriteBatchLayer = function(e, t) {}, t.prototype.isPlayerSwimming = function(e, t) {}, t.prototype.onAddOrUpdateInventoryItem = function(e, t) {}, t.prototype.onBuild = function(e, t, i) {}, t.prototype.onCraft = function(e) {}, t.prototype.onCreateWorld = function(e) {}, t.prototype.onDisplayMessage = function(e, t) {
            for (var i = [], a = 2; a < arguments.length; a++) i[a - 2] = arguments[a]
        }, t.prototype.onGameEnd = function(e) {}, t.prototype.onGameStart = function(e, t) {}, t.prototype.onItemEquip = function(e, t) {}, t.prototype.onKeyBindPress = function(e) {}, t.prototype.onKeyDown = function(e) {}, t.prototype.onKeyUp = function(e) {}, t.prototype.onMonsterDamage = function(e, t, i, a, n) {}, t.prototype.onMonsterDeath = function(e, t) {}, t.prototype.onMouseDown = function(e) {}, t.prototype.onMouseMove = function(e) {}, t.prototype.onMouseScroll = function(e) {}, t.prototype.onMouseUpOrLeave = function(e) {}, t.prototype.onMove = function(e, t, i, a) {}, t.prototype.onMoveDirectionUpdate = function(e) {}, t.prototype.onNoInputReceived = function() {}, t.prototype.onPlayerDamage = function(e, t) {}, t.prototype.onShowInGameScreen = function() {}, t.prototype.onSpawnMonsterFromGroup = function(e, t, i, a, n) {}, t.prototype.onTurnComplete = function() {}, t.prototype.onTurnStart = function() {}, t.prototype.onUpdateWeight = function(e) {}, t.prototype.postGenerateWorld = function(e) {}, t.prototype.postRender = function() {}, t.prototype.preRender = function() {}, t.prototype.preRenderWorld = function(e, t, i) {}, t.prototype.processInput = function() {}, t.prototype.shouldRender = function() {}, t
    }(t);
    e.Mod = i
}(Mods || (Mods = {}));
var Mods;
! function(e) {
    function t(e) {
        for (var t, i = 1; i > 0;)
            for (i = 0, t = 0; t < Y.length; t++) h(t) && !f(t) && B(t) === z.Loadable && (i++, g(t));
        for (t = 0; t < Y.length; t++) h(t) && !f(t) && T(t) && Utilities.Console.warn(Source.Mods, "Failed to load " + I(t) + ", " + z[B(t)].toString());
        Languages.reload(), e()
    }

    function i(e) {
        if (Steamworks.isElectron()) {
            if (0 === j.length) return void Steamworks.initializeMods(function() {
                e()
            });
            var t = j[0];
            j.splice(0, 1), r(t, V.Internal, function() {
                return i(e)
            })
        } else {
            if (0 === K.length) return void e();
            var t = K[0];
            K.splice(0, 1), r(t, V.Internal, function() {
                return i(e)
            })
        }
    }

    function a(t) {
        void 0 === t && (t = !1);
        var i;
        for (i = 0; i < Y.length; i++) f(i) && m(i);
        t && (e.saveData = {}, e.unloadable = {})
    }

    function n() {
        var e;
        for (e = 0; e < Y.length; e++) f(e) && y(e)
    }

    function o(e, t, i, a) {
        var n = Y[e],
            o = 0,
            r = n.info.files;
        window.Mod = void 0;
        for (var s = function(s) {
            var l = r[s],
                p = function(e) {
                    Utilities.Console.warn(Source.Mods, "Failed to load file " + l + " for " + t + ": " + e), o !== -1 && (o = -1, a(!1))
                },
                d = Steamworks.getModPath(t, i, l);
            d ? $.getScript(d, function(t, i, s) {
                if (200 === s.status) {
                    if (o++, o === r.length) {
                        var l = window.Mod;
                        if (void 0 === l) a(!1);
                        else try {
                            n.object = new l(e), a(!0)
                        } catch (d) {
                            p("status " + d.stack)
                        }
                    }
                } else p("status " + s.status)
            }).fail(function(e) {
                p(e)
            }) : p("unknown mod path")
        }, l = 0; l < r.length; l++) s(l)
    }

    function r(t, i, a, n) {
        void 0 === n && (n = !1);
        var r = Steamworks.getModPath(t, i);
        if (!r) return Utilities.Console.log(Source.Mods, "Unknown mod path"), void a(null);
        var s = e.getIndexFromPath(r);
        null !== s && (e.removeMod(s), Utilities.Console.log(Source.Mods, "Mod already exists at index, replacing...", s, t));
        var l = Steamworks.getModPath(t, i, "mod.json", i !== V.Internal);
        return l ? void $.getJSON(l, {
            _: (new Date).getTime()
        }).done(function(l) {
            if (!(l && l.name && l.description && l.version && l.author && l.files)) return Utilities.Console.warn(Source.Mods, "Failed to initialize " + t + ", missing required mod.json properties"), void a(null);
            var p = {
                    object: null,
                    info: l,
                    state: _.Error,
                    path: r,
                    type: i,
                    folderName: t,
                    publishedFileId: l.publishedFileId,
                    steamIDOwner: null,
                    lastUpdated: null
                },
                d = Y.length;
            null !== s ? (d = s, Y[d] = p) : Y.push(p), o(d, t, i, function(t) {
                if (t) {
                    var o = e.modState[r];
                    if (null !== o && void 0 !== o && o !== _.Error ? q(d, o, !0) : q(d, _.Enabled, !0), i === V.Workshop && Steamworks.fillOutMod(d), !n) try {
                        var s = Y[d].object;
                        if (!s) throw "Invalid mod object";
                        e.saveDataGlobal[v(d)] = s.onInitialize(e.saveDataGlobal[v(d)]);
                        var p = l.hooks;
                        if (p)
                            for (var u = 0; u < p.length; u++) {
                                var g = p[u];
                                g && void 0 !== e.Hook[g] || Utilities.Console.warn(Source.Mods, I(d) + " contains unknown hook " + g + ". Is the casing wrong?")
                            }
                        Utilities.Console.log(Source.Mods, "Initialized " + I(d) + " (" + d + ")")
                    } catch (m) {
                        Utilities.Console.warn(Source.Mods, "Error initializing mod " + I(d), m)
                    }
                    a(d)
                } else Utilities.Console.warn(Source.Mods, "Failed to initialize " + I(d) + ", unable to load mod files"), a(null)
            })
        }).fail(function() {
            Utilities.Console.warn(Source.Mods, "Failed to initialize " + t + ", unable to load mod.json"), a(null)
        }) : (Utilities.Console.log(Source.Mods, "Ignoring non-mod in mod folder: " + t), void a(null))
    }

    function s(t, i) {
        if (void 0 === i && (i = !1), i) {
            var a = v(t);
            delete e.saveData[a], delete e.saveDataGlobal[a], delete e.modState[C(t)]
        }
        delete Y[t]
    }

    function l() {
        return Y
    }

    function p() {
        for (var e = [], t = 0; t < Y.length; t++) f(t) && e.push(Y[t]);
        return e
    }

    function d(t) {
        for (var i = [], a = 1; a < arguments.length; a++) i[a - 1] = arguments[a];
        for (var n = Utilities.Random.getSeed(), o = void 0, r = 0; r < Y.length; r++)
            if (h(r)) {
                var s = Y[r],
                    l = s.info.hooks;
                if (f(r) && l) {
                    for (var p = !1, d = 0; d < l.length; d++)
                        if (e.Hook[t] && e.Hook[t].toString().toLowerCase() === l[d].toLowerCase()) {
                            p = !0;
                            break
                        }
                    if (!p) continue;
                    var u = e.Hook[t].toString(),
                        g = u.charAt(0).toLowerCase() + u.slice(1);
                    try {
                        var m = s.object[g];
                        if (m) {
                            if (o = m.apply(s.object, i), void 0 !== o && null !== o) break;
                            o = void 0
                        } else Utilities.Console.warn(Source.Mods, "Error calling hook " + g + " in mod " + I(r) + ": The hook function doesn't exist!")
                    } catch (y) {
                        Utilities.Console.warn(Source.Mods, "Error calling hook " + g + " in mod " + I(r), y)
                    }
                }
            }
        return Utilities.Random.setSeed(n), o
    }

    function u(e, t) {
        for (var i = [], a = 2; a < arguments.length; a++) i[a - 2] = arguments[a];
        var n = d.apply(void 0, [e].concat(i));
        return void 0 === n ? t : n
    }

    function g(t) {
        try {
            Utilities.Console.log(Source.Mods, "Loading " + I(t));
            var i = Y[t].object;
            if (!i) throw "Invalid mod object";
            i.onLoad(e.saveData[v(t)]), q(t, _.Loaded), Utilities.Console.log(Source.Mods, "Loaded " + I(t))
        } catch (a) {
            Utilities.Console.warn(Source.Mods, "Error loading mod for " + I(t), a), q(t, _.Error)
        }
    }

    function m(e) {
        y(e);
        try {
            var t = Y[e].object;
            if (!t) throw "Invalid mod object";
            t.onUnload(), t.unallocateEnums(), q(e, _.Enabled), Utilities.Console.log(Source.Mods, "Unloaded " + I(e))
        } catch (i) {
            Utilities.Console.warn(Source.Mods, "Error unloading mod for " + I(e), i)
        }
    }

    function y(t) {
        var i = v(t);
        try {
            var a = Y[t].object;
            if (!a) throw "Invalid mod object";
            e.saveData[i] = a.onSave()
        } catch (n) {
            Utilities.Console.warn(Source.Mods, "Error saving mod data for " + name, n)
        }
        e.unloadable[i] = {
            name: name,
            unloadable: !!Y[t].info.unloadable
        }
    }

    function c(e) {
        if (h(e)) {
            var t = w(e);
            if (t === V.Workshop) return void Utilities.Console.warn(Source.Mods, "Cannot reload workshop mods");
            var i = f(e);
            i && m(e), Utilities.Console.log(Source.Mods, "Reloading " + I(e) + " (" + e + ")"), r(F(e), w(e), function(e) {
                i && null !== e && g(e), Languages.reload()
            })
        }
    }

    function h(e) {
        return !!Y[e]
    }

    function T(e) {
        return h(e) && N(e) === _.Enabled
    }

    function f(e) {
        return h(e) && N(e) === _.Loaded
    }

    function v(e) {
        return R(e) || I(e)
    }

    function I(e) {
        return h(e) ? Y[e].info.name : "ERROR"
    }

    function S(e) {
        return Y[e].info.description
    }

    function M(e) {
        return Y[e].info.version
    }

    function k(e) {
        return Y[e].lastUpdated ? Y[e].lastUpdated : null
    }

    function b(e) {
        return Y[e].info.author
    }

    function w(e) {
        return Y[e].type
    }

    function D(e) {
        return Y[e].info.required_mods
    }

    function C(e) {
        return Y[e].path
    }

    function F(e) {
        return Y[e].folderName
    }

    function R(e) {
        return Y[e].publishedFileId
    }

    function A(e) {
        return Y[e].steamIDOwner
    }

    function B(e, t, i) {
        if (void 0 === t && (t = !1), void 0 === i && (i = 0), N(e) === _.Error) return z.ModLoadError;
        if (i > 10) return z.DependencyIssue;
        var a = Y[e].info.compatible_minor_versions;
        if (a && a.indexOf(gameVersionMinor) <= -1) return z.IncompatibleVersion;
        var n = D(e);
        if (n)
            for (var o = 0; o < n.length; o++) {
                var r = G(n[o].toString());
                if (0 === r.length) return z.MissingRequiredMod;
                for (var s = !1, l = 0; l < r.length; l++) {
                    var p = r[l];
                    if (e === p) return z.ModRequiresItself;
                    if (t) {
                        if (B(p, !0, i + 1) === z.Loadable) {
                            s = !0;
                            break
                        }
                    } else if (f(p)) {
                        s = !0;
                        break
                    }
                }
                if (!s) return z.CannnotLoadRequiredMod
            }
        if (w(e) === V.Workshop)
            for (var d = R(e), o = 0; o < Y.length; o++)
                if (h(o) && (T(o) || f(o)) && w(o) !== V.Workshop && R(o) === d) return z.LocalModPrecedence;
        return T(e) ? z.Loadable : z.Disabled
    }

    function L(t) {
        for (var i, a = t, n = G(t), o = 0; o < n.length; o++)
            if (i = n[o], a = e.getName(i), e.canLoad(i, !0) === z.Loadable) return {
                name: a,
                loadable: !0
            };
        return i = x(t), null !== i && (a = e.getName(i), B(i, !0) === z.Loadable) ? {
            name: a,
            loadable: !0
        } : {
            name: a,
            loadable: !1
        }
    }

    function x(e) {
        for (var t = 0; t < Y.length; t++)
            if (h(t) && I(t) === e) return t;
        return null
    }

    function G(e) {
        for (var t = [], i = 0; i < Y.length; i++) h(i) && R(i) === e && t.push(i);
        return t
    }

    function U(e) {
        for (var t = 0; t < Y.length; t++)
            if (h(t) && C(t) === e) return t;
        return null
    }

    function W(e) {
        var t = x(e);
        return null !== t && T(t)
    }

    function E(e) {
        var t = x(e);
        return null !== t && f(t)
    }

    function P(e, t) {
        Y[e].publishedFileId = t
    }

    function O(e, t) {
        Y[e].steamIDOwner = t
    }

    function H(e, t) {
        Y[e].lastUpdated = t
    }

    function N(e) {
        return Y[e].state
    }

    function q(t, i, a) {
        return void 0 === a && (a = !1), !(!a && Y[t].state === _.Error) && (Y[t].state = i, i !== _.Loaded && (e.modState[C(t)] = i), !0)
    }! function(e) {
        e[e.Disabled = 0] = "Disabled", e[e.Enabled = 1] = "Enabled", e[e.Loaded = 2] = "Loaded", e[e.Error = 3] = "Error"
    }(e.State || (e.State = {}));
    var _ = e.State;
    ! function(e) {
        e[e.Loadable = 0] = "Loadable", e[e.Disabled = 1] = "Disabled", e[e.ModLoadError = 2] = "ModLoadError", e[e.DependencyIssue = 3] = "DependencyIssue", e[e.ModRequiresItself = 4] = "ModRequiresItself", e[e.MissingRequiredMod = 5] = "MissingRequiredMod", e[e.CannnotLoadRequiredMod = 6] = "CannnotLoadRequiredMod", e[e.ReqiredModNotLoaded = 7] = "ReqiredModNotLoaded", e[e.LocalModPrecedence = 8] = "LocalModPrecedence", e[e.IncompatibleVersion = 9] = "IncompatibleVersion"
    }(e.CanLoadState || (e.CanLoadState = {}));
    var z = e.CanLoadState;
    ! function(e) {
        e[e.Internal = 0] = "Internal", e[e.Local = 1] = "Local", e[e.Workshop = 2] = "Workshop"
    }(e.Type || (e.Type = {}));
    var V = e.Type,
        Y = [],
        K = ["argus", "balancingtools", "developertools", "piratelanguage", "troposphere", "recorder", "starterquest", "treesonfire", "reincarnate"],
        j = ["starterquest"];
    e.modState = {}, e.saveData = {}, e.saveDataGlobal = {}, e.unloadable = {}, e.loadAll = t, e.initializeMods = i, e.unloadAll = a, e.saveAll = n, e.initializeMod = r, e.removeMod = s, e.getMods = l, e.getLoadedMods = p, e.callHook = d, e.callHookWithDefault = u, e.load = g, e.unload = m, e.save = y, e.reload = c, e.isValid = h, e.isEnabled = T, e.isLoaded = f, e.getIdentifier = v, e.getName = I, e.getDescription = S, e.getVersion = M, e.getLastUpdatedDate = k, e.getAuthor = b, e.getType = w, e.getRequiredMods = D, e.getPath = C, e.getFolderName = F, e.getPublishFileId = R, e.getSteamIdOwner = A, e.canLoad = B, e.canLoadFromIdentifier = L, e.getIndexFromName = x, e.getIndexFromPublishId = G, e.getIndexFromPath = U, e.isEnabledByName = W, e.isLoadedByName = E, e.setPublishId = P, e.setSteamIdOwner = O, e.setLastUpdated = H, e.getState = N, e.setState = q
}(Mods || (Mods = {}));
var TerrainMask;
! function(e) {
    e[e.Type = 63] = "Type", e[e.Wall = 64] = "Wall", e[e.Fence = 128] = "Fence"
}(TerrainMask || (TerrainMask = {}));
var ExploreMap = function(e) {
        function t() {
            e.apply(this, arguments)
        }
        return __extends(t, e), t.prototype.encode = function() {
            this.encodedData = [];
            for (var e = 0, t = 0, i = 0; i < this.data.length; i++) this.data[i] !== t ? (this.encodedData.push(e), e = 1, t = 0 === t ? 255 : 0) : e++;
            this.encodedData.push(e)
        }, t.prototype.decode = function() {
            for (var e = 0, t = 0, i = 0; i < this.encodedData.length; i++) {
                for (var a = 0; a < this.encodedData[i]; a++) this.data[e] = t, e++;
                t = 0 === t ? 255 : 0
            }
        }, t.prototype.getSerializationProperties = function(e) {
            return Serializer.SerializeAllProperties
        }, t
    }(ByteGrid),
    World = function() {
        function e(e, t) {
            this.width = e, this.height = t, this.layers = new Array, this.loaded = !1
        }
        return e.prototype.toLocal = function(e, t) {
            var i = this.width,
                a = this.width / 2;
            return t = (e - t) % i, t > a ? t -= i : t < -a && (t += i), t
        }, e.prototype.addLayer = function(e) {
            this.layers[e] = new WorldLayer(this.width, this.height, e)
        }, e.prototype.load = function() {
            this.updateAll(), this.loaded = !0
        }, e.prototype.isLoaded = function() {
            return this.loaded
        }, e.prototype.updateAll = function() {
            this.loaded = !1;
            for (var e in this.layers) this.layers[e].updateAll()
        }, e.prototype.resetExploredMap = function() {
            for (var e in this.layers) this.layers[e].resetExploredMap()
        }, e.prototype.updateTile = function(e, t, i, a) {
            var n = this.layers[i];
            n.updateTile(e, t, a, this.loaded)
        }, e.prototype.serializeObject = function(e) {
            for (var t in this.layers) this.layers[t].exploredMap.encode(), e.writeProperty(this.layers[t].exploredMap, "encodedData")
        }, e.prototype.deserializeObject = function(e) {
            for (var t in this.layers) e.readProperty(this.layers[t].exploredMap, "encodedData"), this.layers[t].exploredMap.decode()
        }, e
    }(),
    WorldLayer = function() {
        function e(e, t, i) {
            this.width = e, this.height = t, this.level = i, this.terrainMap = new Uint16Array(e * t), this.lightBlockMap = new ByteGrid(e, t), this.lightLevelMap = new ByteGrid(e, t), this.resetExploredMap()
        }
        return e.prototype.resetExploredMap = function() {
            this.exploredMap = new ExploreMap(this.width, this.height)
        }, e.prototype.getTileType = function(e, t) {
            return this.terrainMap[this.mapIndex(e, t)] & TerrainMask.Type
        }, e.prototype.getTile = function(e, t) {
            return this.terrainMap[this.mapIndex(e, t)]
        }, e.prototype.isWall = function(e) {
            return 0 !== (e & TerrainMask.Wall)
        }, e.prototype.isFence = function(e) {
            return 0 !== (e & TerrainMask.Fence)
        }, e.prototype.setTile = function(e, t, i, a, n) {
            void 0 === a && (a = !1), void 0 === n && (n = !1), this.terrainMap[this.mapIndex(e, t)] = i | (a ? TerrainMask.Wall : 0) | (n ? TerrainMask.Fence : 0)
        }, e.prototype.updateAll = function() {
            var e, t, i = game.mapSize,
                a = game.mapSize;
            for (e = 0; e < i; e++)
                for (t = 0; t < a; t++) {
                    var n = game.getTile(e, t, this.level);
                    this.setTileInteral(e, t, n)
                }
        }, e.prototype.updateTile = function(e, t, i, a) {
            if (void 0 === a && (a = !1), this.setTileInteral(e, t, i), a && this.onTileUpdate) {
                var n = world.isLoaded();
                this.onTileUpdate(e, t, n), this.onTileUpdate(e - 1, t, n), this.onTileUpdate(e + 1, t, n), this.onTileUpdate(e, t - 1, n), this.onTileUpdate(e, t + 1, n), this.onTileUpdate(e, t, n), this.onTileUpdate(e - 1, t - 1, n), this.onTileUpdate(e - 1, t + 1, n), this.onTileUpdate(e + 1, t - 1, n), this.onTileUpdate(e + 1, t + 1, n)
            }
        }, e.prototype.mapIndex = function(e, t) {
            return e - this.width * Math.floor(e / this.width) + (t - this.height * Math.floor(t / this.height)) * this.width
        }, e.prototype.updateLightBlockValue = function(e, t, i) {
            var a = this.lightBlockMap.get(e, t),
                n = this.lightBlockMap.get(e - 1, t),
                o = this.lightBlockMap.get(e + 1, t),
                r = this.lightBlockMap.get(e, t + 1),
                s = this.lightBlockMap.get(e, t - 1),
                l = a > 0 && n > 0 && o > 0 && r > 0 && s > 0,
                p = a > 0 ? l ? 255 : 127 : 0;
            this.lightBlockMap.set(e, t, p), i !== p && (n > 0 && this.updateLightBlockValue(e - 1, t, n), o > 0 && this.updateLightBlockValue(e + 1, t, o), r > 0 && this.updateLightBlockValue(e, t + 1, r), s > 0 && this.updateLightBlockValue(e, t - 1, s))
        }, e.prototype.setTileInteral = function(e, t, i) {
            var a = TerrainType.Dirt,
                n = null,
                o = 0,
                r = terrains[Utilities.TileHelpers.getType(i)],
                s = !1,
                l = !1,
                p = !1;
            if (r && (r.noLos && (s = !0), a = r.terrainType, a === TerrainType.Tree && (a = Utilities.getTileVariation(e, t) > .5 ? TerrainType.Grass : TerrainType.Dirt), r.doodad && (n = r.doodad, o = Utilities.TileHelpers.getGfx(i))), void 0 !== i.doodadId) {
                var d = game.doodads[i.doodadId];
                n = d.type;
                var u = Doodad.defines[n];
                if (u) switch (u.graphicVariation && (o = Utilities.TileHelpers.getGfx(i)), n) {
                    case DoodadType.WoodenFence:
                    case DoodadType.WoodenGate:
                    case DoodadType.WoodenGateOpen:
                        p = !0;
                        break;
                    case DoodadType.WoodenDoorOpen:
                        l = !0;
                        break;
                    case DoodadType.WoodenWall:
                    case DoodadType.StoneWall:
                    case DoodadType.ClayBrickWall:
                    case DoodadType.SandstoneWall:
                    case DoodadType.WoodenDoor:
                        s = !0, l = !0
                }
            }
            var g = this.lightBlockMap.get(e, t);
            this.lightBlockMap.set(e, t, s ? 127 : 0), this.updateLightBlockValue(e, t, g), this.setTile(e, t, a, l, p), this.onDoodadUpdate && this.onDoodadUpdate(e, t, n, o, world.isLoaded())
        }, e
    }(),
    TileAdaptor;
! function(e) {
    function t(e) {
        n = e
    }

    function i(e) {
        return e >= TerrainType.DeepFreshWater && e <= TerrainType.ShallowFreshWater ? e - 3 : e
    }

    function a(e, t) {
        e = game.getWrappedCoord(e), t = game.getWrappedCoord(t);
        var i = game.tileData[e];
        if (i) {
            var a = i[t];
            if (a) {
                var n = a[player.z];
                if (n && n.length > 1) {
                    var o = n[1].type;
                    if (TileAtlas.isWater(o)) return o
                }
            }
        }
        return TerrainType.Dirt
    }
    var n;
    e.setDefaultBackground = t;
    var o = function() {
        function e() {}
        return e.prototype.adapt = function(e, t, i, a, o) {
            var r = Math.floor(4 * Utilities.getTileVariation(t, i)),
                s = e.getTileType(t, i - 1) === a,
                l = e.getTileType(t, i + 1) === a,
                p = e.getTileType(t - 1, i) === a,
                d = e.getTileType(t + 1, i) === a,
                u = TileType.TopLeft,
                g = TileType.TopRight,
                m = TileType.BottomLeft,
                y = TileType.BottomRight,
                c = TileAtlas.terrain[a];
            if (c || (o.TLBG = o.TRBG = o.BLBG = o.BRBG = Vec2.zero, o.TLFG = o.TRFG = o.BLFG = o.BRFG = Vec2.zero), s && p ? u = a === e.getTileType(t - 1, i - 1) ? TileType.CenterTopLeft : TileType.InnerTopLeft : s && !p ? u = TileType.Left : !s && p && (u = TileType.Top), s && d ? g = a === e.getTileType(t + 1, i - 1) ? TileType.CenterTopRight : TileType.InnerTopRight : s && !d ? g = TileType.Right : !s && d && (g = TileType.Top), l && p ? m = a === e.getTileType(t - 1, i + 1) ? TileType.CenterBottomLeft : TileType.InnerBottomLeft : l && !p ? m = TileType.Left : !l && p && (m = TileType.Bottom), l && d ? y = a === e.getTileType(t + 1, i + 1) ? TileType.CenterBottomRight : TileType.InnerBottomRight : l && !d ? y = TileType.Right : !l && d && (y = TileType.Bottom), terrains[a].noBackground) o.TLBG = o.TRBG = o.BLBG = o.BRBG = Vec2.zero;
            else {
                var h = terrains[a].background,
                    T = h ? TileAtlas.terrain[h] : n;
                o.TLBG = T.getCenterTopLeft(r), o.TRBG = T.getCenterTopRight(r), o.BLBG = T.getCenterBottomLeft(r), o.BRBG = T.getCenterBottomRight(r)
            }
            o.TLFG = getTileLoc(u, c, r), o.TRFG = getTileLoc(g, c, r), o.BLFG = getTileLoc(m, c, r), o.BRFG = getTileLoc(y, c, r)
        }, e
    }();
    e.Default = o;
    var r = function(e) {
        function t() {
            e.apply(this, arguments)
        }
        return __extends(t, e), t.prototype.adapt = function(e, t, i, a, o) {
            var r, s = Math.floor(4 * Utilities.getTileVariation(t, i)),
                l = TileAtlas.isMountain(e.getTileType(t, i - 1)),
                p = TileAtlas.isMountain(e.getTileType(t, i + 1)),
                d = TileAtlas.isMountain(e.getTileType(t - 1, i)),
                u = TileAtlas.isMountain(e.getTileType(t + 1, i)),
                g = TileAtlas.isMountain(e.getTileType(t - 1, i - 1)),
                m = TileAtlas.isMountain(e.getTileType(t + 1, i - 1)),
                y = TileAtlas.isMountain(e.getTileType(t - 1, i + 1)),
                c = TileAtlas.isMountain(e.getTileType(t + 1, i + 1)),
                h = l << 0 | g << 1 | d << 2 | y << 3 | p << 4 | c << 5 | u << 6 | m << 7,
                T = TileAtlas.terrain[a],
                f = terrains[a].background,
                v = f ? TileAtlas.terrain[f] : n;
            r = this.getTileType(h), this.mountainTopFlag ? (r = TileType.BottomRight, 255 === (255 & h) ? r = TileType.CenterTopLeft : 127 === (127 & h) ? r = TileType.InnerTopRight : 87 === (223 & h) ? r = TileType.BottomRight : 223 === (223 & h) ? r = TileType.InnerBottomRight : 212 === (244 & h) || 212 === (220 & h) || 196 === (212 & h) ? r = TileType.Bottom : 29 === (29 & h) && (r = TileType.Right), o.TLFG = getTileLoc(r, T.extendedInfo, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i))), o.TLBG = T.getCenterTopLeft(s)) : (r === TileType.InnerTopLeft && 0 === (64 & h) ? (r = TileType.TopRight, o.TLFG = getTileLoc(r, T.extendedInfo, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i)))) : 4 === (69 & h) ? (r = TileType.TopRight, o.TLFG = getTileLoc(r, T.extendedInfo, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i)))) : o.TLFG = getTileLoc(r, T, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i))), o.TLBG = v.getCenterTopLeft(s));
            var I = h << 2 & 255 | h >> 6;
            r = rotateTileType90Deg(this.getTileType(I), 3), this.mountainTopFlag ? (r = TileType.BottomLeft, 255 === (255 & h) ? r = TileType.CenterTopRight : 253 === (253 & h) ? r = TileType.InnerTopLeft : 213 === (247 & h) ? r = TileType.BottomLeft : 247 === (247 & h) ? r = TileType.InnerBottomLeft : 86 === (118 & h) || 86 === (118 & h) || 70 === (86 & h) ? r = TileType.Bottom : 113 === (113 & h) && (r = TileType.Left), o.TRFG = getTileLoc(r, T.extendedInfo, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i))), o.TRBG = T.getCenterTopRight(s)) : (r === TileType.InnerTopRight && 0 === (4 & h) ? (r = TileType.TopLeft, o.TRFG = getTileLoc(r, T.extendedInfo, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i)))) : 64 === (69 & h) ? (r = TileType.TopLeft, o.TRFG = getTileLoc(r, T.extendedInfo, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i)))) : o.TRFG = getTileLoc(r, T, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i))), o.TRBG = v.getCenterTopRight(s)), I = I << 2 & 255 | I >> 6, r = rotateTileType90Deg(this.getTileType(I), 2), this.mountainTopFlag ? (r = TileType.Left, 124 === (124 & h) && (r = TileType.CenterBottomRight), o.BRFG = getTileLoc(r, T.extendedInfo, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i))), o.BRBG = T.getCenterBottomRight(s)) : (o.BRFG = getTileLoc(r, T, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i))), o.BRBG = v.getCenterBottomRight(s)), I = I << 2 & 255 | I >> 6, r = rotateTileType90Deg(this.getTileType(I), 1), this.mountainTopFlag ? (r = TileType.Right, 124 === (124 & h) && (r = TileType.CenterBottomLeft), o.BLFG = getTileLoc(r, T.extendedInfo, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i))), o.BLBG = T.getCenterBottomLeft(s)) : (o.BLFG = getTileLoc(r, T, Math.floor(2 * Utilities.getTileVariation(t, i)) + 2 * Math.floor(2 * Utilities.getTileVariation(t, i))), o.BLBG = v.getCenterBottomLeft(s)), terrains[a].noBackground && (o.TLBG = o.TRBG = o.BLBG = o.BRBG = Vec2.zero)
        }, t.prototype.getTileType = function(e) {
            return this.mountainTopFlag = !1, 5 === (5 & e) ? 2 & e ? (this.mountainTopFlag = !0, TileType.CenterTopLeft) : TileType.InnerTopLeft : 1 === (5 & e) ? TileType.Left : 4 === (5 & e) ? TileType.Top : TileType.TopLeft
        }, t
    }(o);
    e.Mountain = r, e.getWaterType = i;
    var s = function(e) {
        function t() {
            e.apply(this, arguments)
        }
        return __extends(t, e), t.prototype.adapt = function(e, t, o, r, s) {
            var l = Math.floor(4 * Utilities.getTileVariation(t, o)),
                p = TileAtlas.terrain[r];
            r = i(r);
            var d = i(e.getTileType(t, o - 1)),
                u = i(e.getTileType(t, o + 1)),
                g = i(e.getTileType(t - 1, o)),
                m = i(e.getTileType(t + 1, o)),
                y = d <= r;
            !y && TileAtlas.isFloor(d) && (y = a(t, o - 1) <= r);
            var c = u <= r;
            !c && TileAtlas.isFloor(u) && (c = a(t, o + 1) <= r);
            var h = g <= r;
            !h && TileAtlas.isFloor(g) && (h = a(t - 1, o) <= r);
            var T = m <= r;
            !T && TileAtlas.isFloor(m) && (T = a(t + 1, o) <= r);
            var f, v = TileType.TopLeft,
                I = TileType.TopRight,
                S = TileType.BottomLeft,
                M = TileType.BottomRight;
            y && h ? (f = i(e.getTileType(t - 1, o - 1)), v = f <= r || TileAtlas.isFloor(f) && a(t - 1, o - 1) <= r ? TileType.CenterTopLeft : TileType.InnerTopLeft) : y && !h ? v = TileType.Left : !y && h && (v = TileType.Top), y && T ? (f = i(e.getTileType(t + 1, o - 1)), I = f <= r || TileAtlas.isFloor(f) && a(t + 1, o - 1) <= r ? TileType.CenterTopRight : TileType.InnerTopRight) : y && !T ? I = TileType.Right : !y && T && (I = TileType.Top), c && h ? (f = i(e.getTileType(t - 1, o + 1)), S = f <= r || TileAtlas.isFloor(f) && a(t - 1, o + 1) <= r ? TileType.CenterBottomLeft : TileType.InnerBottomLeft) : c && !h ? S = TileType.Left : !c && h && (S = TileType.Bottom), c && T ? (f = i(e.getTileType(t + 1, o + 1)), M = f <= r || TileAtlas.isFloor(f) && a(t + 1, o + 1) <= r ? TileType.CenterBottomRight : TileType.InnerBottomRight) : c && !T ? M = TileType.Right : !c && T && (M = TileType.Bottom), s.TLBG = n.getCenterTopLeft(l), s.TRBG = n.getCenterTopRight(l), s.BLBG = n.getCenterBottomLeft(l), s.BRBG = n.getCenterBottomRight(l), s.TLFG = getTileLoc(v, p, l), s.TRFG = getTileLoc(I, p, l), s.BLFG = getTileLoc(S, p, l), s.BRFG = getTileLoc(M, p, l)
        }, t
    }(o);
    e.Water = s;
    var l = function() {
        function e() {}
        return e.prototype.adapt = function(e, t, i, a, n) {
            var o = Math.floor(4 * Utilities.getTileVariation(t, i)),
                r = TileAtlas.terrain[a];
            n.TLFG = getTileLoc(TileType.CenterTopLeft, r, o), n.TRFG = getTileLoc(TileType.CenterTopRight, r, o), n.BLFG = getTileLoc(TileType.CenterBottomLeft, r, o), n.BRFG = getTileLoc(TileType.CenterBottomRight, r, o), n.TLBG = Vec2.zero, n.TRBG = Vec2.zero, n.BLBG = Vec2.zero, n.BRBG = Vec2.zero
        }, e
    }();
    e.Dirt = l;
    var p = function() {
        function e() {}
        return e.prototype.adaptGate = function(e, t, i, a, n, o) {
            var r = e.isFence(e.getTile(t, i - 1)) ? 1 : 0,
                s = e.isFence(e.getTile(t, i + 1)) ? 2 : 0,
                l = e.isFence(e.getTile(t - 1, i)) ? 1 : 0,
                p = e.isFence(e.getTile(t + 1, i)) ? 2 : 0,
                d = 2 * (l | p),
                u = n ? s + 4 : 2 * r,
                g = TileAtlas.doodads[a].topLeft;
            a === DoodadType.WoodenGateOpen && n ? (o.TLBG = new Vec2([g.x + 8, g.y + u]), o.TRBG = new Vec2([g.x + 9, g.y + u]), o.BLBG = new Vec2([g.x + 8, g.y + u + 1]), o.BRBG = new Vec2([g.x + 9, g.y + u + 1])) : 0 !== s ? (o.TLBG = new Vec2([g.x + 8, g.y]), o.TRBG = new Vec2([g.x + 9, g.y]), o.BLBG = new Vec2([g.x + 8, g.y + 1]), o.BRBG = new Vec2([g.x + 9, g.y + 1])) : (o.TLBG = Vec2.zero, o.TRBG = Vec2.zero, o.BLBG = Vec2.zero, o.BRBG = Vec2.zero), o.TLFG = new Vec2([g.x + d, g.y + u]), o.TRFG = new Vec2([g.x + d + 1, g.y + u]), o.BLFG = new Vec2([g.x + d, g.y + u + 1]), o.BRFG = new Vec2([g.x + d + 1, g.y + u + 1])
        }, e.prototype.adapt = function(e, t, i, a, n) {
            var o = e.isFence(e.getTile(t, i - 1)) ? 1 : 0,
                r = e.isFence(e.getTile(t, i + 1)) ? 2 : 0,
                s = e.isFence(e.getTile(t - 1, i)) ? 1 : 0,
                l = e.isFence(e.getTile(t + 1, i)) ? 2 : 0,
                p = 2 * (s | l),
                d = 2 * (o | r),
                u = TileAtlas.doodads[a].topLeft;
            n.TLFG = new Vec2([u.x + p, u.y + d]), n.TRFG = new Vec2([u.x + p + 1, u.y + d]), n.BLFG = new Vec2([u.x + p, u.y + d + 1]), n.BRFG = new Vec2([u.x + p + 1, u.y + d + 1]), n.TLBG = Vec2.zero, n.TRBG = Vec2.zero, n.BLBG = Vec2.zero, n.BRBG = Vec2.zero
        }, e
    }();
    e.Fence = p;
    var d = function() {
        function e() {}
        return e.prototype.adaptDoor = function(e, t, i, a, n, o) {
            var r = TileAtlas.doodads[a].topLeft.x,
                s = TileAtlas.doodads[a].topLeft.y;
            n && (r += 2), o.TLFG = new Vec2([r, s]), o.TRFG = new Vec2([r + 1, s]), o.BLFG = new Vec2([r, s + 1]), o.BRFG = new Vec2([r + 1, s + 1]), o.TLBG = Vec2.zero, o.TRBG = Vec2.zero, o.BLBG = Vec2.zero, o.BRBG = Vec2.zero
        }, e.prototype.adapt = function(e, t, i, a, n) {
            var o = e.isWall(e.getTile(t, i - 1)) ? 1 : 0,
                r = e.isWall(e.getTile(t, i + 1)) ? 2 : 0,
                s = e.isWall(e.getTile(t - 1, i)) ? 1 : 0,
                l = e.isWall(e.getTile(t + 1, i)) ? 2 : 0,
                p = 2 * (s | l),
                d = 2 * (o | r);
            0 === d && 0 !== p && 6 !== p && (p += 2 * Math.floor(2 * Utilities.getTileVariation(t, i)));
            var u = TileAtlas.doodads[a].topLeft;
            n.TLFG = new Vec2([u.x + p, u.y + d]), n.TRFG = new Vec2([u.x + p + 1, u.y + d]), n.BLFG = new Vec2([u.x + p, u.y + d + 1]), n.BRFG = new Vec2([u.x + p + 1, u.y + d + 1]), n.TLBG = Vec2.zero, n.TRBG = Vec2.zero, n.BLBG = Vec2.zero, n.BRBG = Vec2.zero
        }, e
    }();
    e.Wall = d;
    var u = function(e) {
        function t() {
            e.apply(this, arguments)
        }
        return __extends(t, e), t.prototype.adapt = function(e, t, i, o, r) {
            var s, l = Math.floor(4 * Utilities.getTileVariation(t, i)),
                p = e.getTileType(t, i - 1),
                d = e.getTileType(t, i + 1),
                u = e.getTileType(t - 1, i),
                g = e.getTileType(t + 1, i),
                m = e.isWall(e.getTile(t, i)),
                y = TileAtlas.isFloor(p),
                c = TileAtlas.isFloor(d),
                h = TileAtlas.isFloor(u),
                T = TileAtlas.isFloor(g),
                f = TileType.TopLeft,
                v = TileType.TopRight,
                I = TileType.BottomLeft,
                S = TileType.BottomRight,
                M = TileAtlas.terrain[o];
            y && h ? (s = e.getTileType(t - 1, i - 1), f = TileAtlas.isFloor(s) ? TileType.CenterTopLeft : TileType.InnerTopLeft) : y && !h ? f = TileType.Left : !y && h && (f = TileType.Top), y && T ? (s = e.getTileType(t + 1, i - 1), v = TileAtlas.isFloor(s) ? TileType.CenterTopRight : TileType.InnerTopRight) : y && !T ? v = TileType.Right : !y && T && (v = TileType.Top), c && h ? (s = e.getTileType(t - 1, i + 1), I = TileAtlas.isFloor(s) ? TileType.CenterBottomLeft : TileType.InnerBottomLeft) : c && !h ? I = TileType.Left : !c && h && (I = TileType.Bottom), c && T ? (s = e.getTileType(t + 1, i + 1), S = TileAtlas.isFloor(s) ? TileType.CenterBottomRight : TileType.InnerBottomRight) : c && !T ? S = TileType.Right : !c && T && (S = TileType.Bottom), r.TLFG = getTileLoc(f, M, l), r.TRFG = getTileLoc(v, M, l), r.BLFG = getTileLoc(I, M, l), r.BRFG = getTileLoc(S, M, l);
            var k = a(t, i),
                b = TileAtlas.terrain[k];
            if (b === n) r.TLBG = b.getCenterTopLeft(l), r.TRBG = b.getCenterTopRight(l), r.BLBG = b.getCenterBottomLeft(l), r.BRBG = b.getCenterBottomRight(l);
            else {
                var w = {};
                renderer.waterAdaptor.adapt(e, t, i, k, w), r.TLBG = w.TLFG, r.TRBG = w.TRFG, r.BLBG = w.BLFG, r.BRBG = w.BRFG
            } if (m) {
                var D = !0,
                    C = game.getTile(t, i, e.level).doodadId;
                if (void 0 !== C) {
                    var F = game.doodads[C];
                    if (F.type === DoodadType.WoodenDoor || F.type === DoodadType.WoodenDoorOpen) {
                        var R = F;
                        R.orientation === DoorOrientation.Default && (D = !1)
                    }
                }
                D && (h && !T ? (r.TLFG = r.TRFG, r.BLFG = r.BRFG, r.TRFG = Vec2.zero, r.BRFG = Vec2.zero) : T && !h && (r.TRFG = r.TLFG, r.BRFG = r.BLFG, r.TLFG = Vec2.zero, r.BLFG = Vec2.zero))
            }
        }, t
    }(o);
    e.Floor = u
}(TileAdaptor || (TileAdaptor = {}));
var Shaders;
! function(e) {
    function t(e) {
        var t = $("head");
        t.children("script[data-shader='1']").remove();
        for (var i = [{
            name: "tile-shader",
            types: ["vertex", "fragment"]
        }, {
            name: "world-texture",
            types: ["vertex", "fragment"]
        }, {
            name: "basic-texture",
            types: ["vertex", "fragment"]
        }, {
            name: "alpha-debug",
            types: ["fragment"]
        }, {
            name: "blur-horizontal",
            types: ["fragment"]
        }, {
            name: "blur-vertical",
            types: ["fragment"]
        }, {
            name: "fog",
            types: ["vertex", "fragment"]
        }, {
            name: "fov",
            types: ["vertex", "fragment"]
        }, {
            name: "sprite-shader",
            types: ["vertex", "fragment"]
        }, {
            name: "particle-shader",
            types: ["vertex", "fragment"]
        }, {
            name: "glyph",
            types: ["vertex", "fragment"]
        }], a = 0, n = 0; n < i.length; n++)
            for (var o = i[n], r = 0; r < o.types.length; r++) a++,
                function(i, n) {
                    $.ajax({
                        url: "shaders/" + i + "." + n,
                        success: function(o) {
                            t.append('<script id="' + i + "-" + n + '" type="x-shader/x-' + n + '" data-shader="1">' + o + "</script>"), a--, 0 === a && e && e()
                        },
                        dataType: "text"
                    })
                }(o.name, o.types[r])
    }

    function i() {
        for (var e = Object.keys(o), t = 0; t < e.length; t++) {
            var i = e[t];
            o[i].compileProgram()
        }
    }

    function a(e, t, i) {
        var a = e.createShader(i);
        if (!a) throw "Unable to create shader";
        if (e.shaderSource(a, t), e.compileShader(a), e.getShaderParameter(a, e.COMPILE_STATUS)) return a;
        throw new Error("Shader compile error:\n" + t + "\n" + e.getShaderInfoLog(a))
    }

    function n(e, t, i) {
        var a = e.createProgram();
        if (!a) throw "Unable to create program";
        if (e.attachShader(a, t), e.attachShader(a, i), e.linkProgram(a), e.getProgramParameter(a, e.LINK_STATUS)) return a;
        throw new Error("Program link error:\n" + e.getProgramInfoLog(a))
    }
    var o = {};
    e.loadShaders = t, e.compileShaders = i;
    var r = function() {
        function e(e, t, i) {
            this.gl = e, this.vertexName = t, this.fragmentName = i, this.uniforms = {}, this.attribs = {}, o[t + i] = this, this.compileProgram()
        }
        return e.prototype.compileProgram = function() {
            try {
                var e = document.getElementById(this.vertexName).textContent,
                    t = document.getElementById(this.fragmentName).textContent,
                    i = a(this.gl, e, this.gl.VERTEX_SHADER),
                    o = a(this.gl, t, this.gl.FRAGMENT_SHADER),
                    r = n(this.gl, i, o),
                    s = this.gl.getProgramParameter(r, this.gl.ACTIVE_UNIFORMS),
                    l = this.gl.getProgramParameter(r, this.gl.ACTIVE_ATTRIBUTES),
                    p = void 0,
                    d = void 0,
                    u = void 0;
                for (u = 0; u < s; u++) d = this.gl.getActiveUniform(r, u), d && (p = this.gl.getUniformLocation(r, d.name), this.uniforms[d.name] = p);
                for (u = 0; u < l; u++) d = this.gl.getActiveAttrib(r, u), d && (p = this.gl.getAttribLocation(r, d.name), this.attribs[d.name] = p);
                this.program = r
            } catch (g) {
                Utilities.Console.error(Source.Shaders, "Failed to compile shader, better luck next time.", this.vertexName, this.fragmentName, g)
            }
        }, e
    }();
    e.CompiledProgram = r
}(Shaders || (Shaders = {}));
var CompiledProgram = Shaders.CompiledProgram,
    WorldRenderer = function() {
        function e(t, i) {
            this.gl = t, this.world = i, this.ambientIntensity = 1, this.ambientColorDay = [1, 1, 1], this.ambientColorNight = [.5, .5, 1], this.ambientColorCave = [.5, .5, .5], this.monstersInViewport = new Array, this.zoom = 1, this.tileScale = 1, this.screenspaceViewport = new Vec2, this.worldspaceViewport = new Vec2;
            var a = t.createTexture(),
                n = t.createFramebuffer(),
                o = t.createTexture(),
                r = t.createRenderbuffer(),
                s = t.createFramebuffer(),
                l = t.createTexture(),
                p = t.createFramebuffer(),
                d = t.createTexture(),
                u = t.createBuffer(),
                g = t.createBuffer(),
                m = t.createTexture();
            if (!(a && n && o && r && s && l && p && d && u && g && m)) throw "Unable to create textures / buffers";
            if (this.compositeTexture = a, t.bindTexture(t.TEXTURE_2D, this.compositeTexture), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.LINEAR), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, t.LINEAR), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE), this.compositeFramebuffer = n, t.bindFramebuffer(t.FRAMEBUFFER, this.compositeFramebuffer), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, this.compositeTexture, 0), this.layerTexture = o, t.bindTexture(t.TEXTURE_2D, this.layerTexture), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.LINEAR), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, t.LINEAR),
                t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE), this.depthBuffer = r, t.bindRenderbuffer(t.RENDERBUFFER, this.depthBuffer), this.layerFramebuffer = s, t.bindFramebuffer(t.FRAMEBUFFER, this.layerFramebuffer), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, this.layerTexture, 0), t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.RENDERBUFFER, this.depthBuffer), this.fogTexture = l, t.bindTexture(t.TEXTURE_2D, this.fogTexture), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.LINEAR), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, t.LINEAR), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE), this.fogFramebuffer = p, t.bindFramebuffer(t.FRAMEBUFFER, this.fogFramebuffer), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, this.fogTexture, 0), this.fogTextureStorage = d, t.bindTexture(t.TEXTURE_2D, this.fogTextureStorage), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.LINEAR), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, t.LINEAR), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE), this.textureShaderProgram = new CompiledProgram(t, "basic-texture-vertex", "basic-texture-fragment"), this.worldShaderProgram = new CompiledProgram(t, "world-texture-vertex", "world-texture-fragment"), this.fogShaderProgram = new CompiledProgram(t, "fog-vertex", "fog-fragment"), this.defaultAdaptor = new TileAdaptor.Default, this.waterAdaptor = new TileAdaptor.Water, this.mountainAdaptor = new TileAdaptor.Mountain, this.dirtAdaptor = new TileAdaptor.Dirt, this.wallAdaptor = new TileAdaptor.Wall, this.floorAdaptor = new TileAdaptor.Floor, this.fenceAdaptor = new TileAdaptor.Fence, this.itemBatch = new SpriteBatch(t, 16384), this.corpseBatch = new SpriteBatch(t, 128), this.monsterBatch = new SpriteBatch(t, 128), !e.positionTextureBuffer) {
                var y = [-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, -1, 0, 0, 1, 1, 1, 1, -1, 1, 0, 1];
                e.positionTextureBuffer = u, t.bindBuffer(t.ARRAY_BUFFER, e.positionTextureBuffer), t.bufferData(t.ARRAY_BUFFER, new Float32Array(y), t.STATIC_DRAW), y = [-1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1], e.positionBuffer = g, t.bindBuffer(t.ARRAY_BUFFER, e.positionBuffer), t.bufferData(t.ARRAY_BUFFER, new Float32Array(y), t.STATIC_DRAW)
            }
            if (!e.ditherTexture) {
                var c = [0, 32, 8, 40, 2, 34, 10, 42, 48, 16, 56, 24, 50, 18, 58, 26, 12, 44, 4, 36, 14, 46, 6, 38, 60, 28, 52, 20, 62, 30, 54, 22, 2, 35, 11, 43, 1, 33, 9, 41, 51, 19, 59, 27, 49, 17, 57, 25, 15, 47, 7, 39, 13, 45, 5, 37, 63, 31, 55, 23, 61, 29, 53, 21];
                e.ditherTexture = m, t.bindTexture(t.TEXTURE_2D, e.ditherTexture), t.texImage2D(t.TEXTURE_2D, 0, t.ALPHA, 8, 8, 0, t.ALPHA, t.UNSIGNED_BYTE, new Uint8Array(c)), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.NEAREST), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, t.NEAREST), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE)
            }
            this.layers = new Array;
            var h;
            for (h in i.layers) h = i.layers[h], this.layers[h.level] = new WorldLayerRenderer(t, this, h, h.width, h.height)
        }
        return e.getSubTileSize = function() {
            return this.subTileSize
        }, e.prototype.updateAll = function() {
            var e;
            for (e in this.layers) e = this.layers[e], e.updateAll()
        }, e.prototype.setSpriteTexture = function(e, t) {
            this.monsterBatch.texSprites = e, this.monsterBatch.inverseSpriteTextureSize = t, this.corpseBatch.texSprites = e, this.corpseBatch.inverseSpriteTextureSize = t, this.itemBatch.texSprites = e, this.itemBatch.inverseSpriteTextureSize = t
        }, e.prototype.getPixelSize = function() {
            return e.subTileSize * this.tileScale
        }, e.prototype.getZoom = function() {
            return this.zoom
        }, e.prototype.getTileScale = function() {
            return this.tileScale
        }, e.prototype.setZoom = function(t) {
            this.zoom = t, this.tileScale = Math.floor(Math.max(this.screenspaceViewport.x, this.screenspaceViewport.y) / (25 * this.zoom * e.subTileSize * .5)), this.tileScale <= 0 && (this.tileScale = 1), this.worldspaceViewport.x = this.screenspaceViewport.x / (e.subTileSize * this.tileScale) / 2, this.worldspaceViewport.y = this.screenspaceViewport.y / (e.subTileSize * this.tileScale) / 2
        }, e.prototype.setViewport = function(t) {
            t.x = 2 * Math.round(t.x / 2), t.y = 2 * Math.round(t.y / 2), this.screenspaceViewport.x = t.x, this.screenspaceViewport.y = t.y, this.tileScale = Math.floor(Math.max(t.x, t.y) / (25 * this.zoom * e.subTileSize * .5)), this.tileScale <= 0 && (this.tileScale = 1), this.worldspaceViewport.x = t.x / (e.subTileSize * this.tileScale) / 2, this.worldspaceViewport.y = t.y / (e.subTileSize * this.tileScale) / 2;
            var i = this.gl;
            i.bindTexture(i.TEXTURE_2D, this.compositeTexture), i.texImage2D(i.TEXTURE_2D, 0, i.RGBA, t.x, t.y, 0, i.RGBA, i.UNSIGNED_BYTE, void 0), i.bindTexture(i.TEXTURE_2D, this.layerTexture), i.texImage2D(i.TEXTURE_2D, 0, i.RGBA, t.x, t.y, 0, i.RGBA, i.UNSIGNED_BYTE, void 0), i.bindRenderbuffer(i.RENDERBUFFER, this.depthBuffer), i.renderbufferStorage(i.RENDERBUFFER, i.DEPTH_COMPONENT16, t.x, t.y), i.bindTexture(i.TEXTURE_2D, this.fogTexture), i.texImage2D(i.TEXTURE_2D, 0, i.RGBA, t.x, t.y, 0, i.RGBA, i.UNSIGNED_BYTE, void 0), i.bindTexture(i.TEXTURE_2D, this.fogTextureStorage), i.texImage2D(i.TEXTURE_2D, 0, i.RGBA, t.x, t.y, 0, i.RGBA, i.UNSIGNED_BYTE, void 0)
        }, e.prototype.getViewport = function() {
            return this.screenspaceViewport
        }, e.prototype.getTileViewport = function() {
            return this.worldspaceViewport
        }, e.prototype.renderWorld = function(t, i, a) {
            if (this.world.isLoaded()) {
                var n, o = this.gl,
                    r = this.layers[a],
                    s = this.tileScale,
                    l = this.screenspaceViewport.x,
                    p = this.screenspaceViewport.y;
                o.bindFramebuffer(o.FRAMEBUFFER, this.layerFramebuffer), o.viewport(0, 0, l, p), o.clearColor(98 / 255, 67 / 255, 30 / 255, 1), o.clear(o.COLOR_BUFFER_BIT | o.DEPTH_BUFFER_BIT), o.enable(o.BLEND), o.enable(o.DEPTH_TEST), o.blendFunc(o.SRC_ALPHA, o.ONE_MINUS_SRC_ALPHA), Mods.callHook(Mods.Hook.PreRenderWorld, s, l, p);
                var d = game.shouldRender();
                (d & RenderFlag.Terrain) === RenderFlag.Terrain && r.renderFullbright(t, i, s, l, p), (d & RenderFlag.Corpse) === RenderFlag.Corpse && this.corpseBatch.render(t, i, s, l, p), (d & RenderFlag.Item) === RenderFlag.Item && this.itemBatch.render(t, i, s, l, p), 0 !== (d & (RenderFlag.Monster | RenderFlag.Player)) && this.monsterBatch.render(t, i, s, l, p), (d & RenderFlag.Terrain) === RenderFlag.Terrain && r.postRenderFullbright(t, i, s, l, p), o.disable(o.DEPTH_TEST), o.bindFramebuffer(o.FRAMEBUFFER, this.fogFramebuffer), o.disable(o.BLEND), game.fov.disabled ? (o.clearColor(1, 1, 1, 1), o.clear(o.COLOR_BUFFER_BIT)) : (n = this.fogShaderProgram, o.useProgram(n.program), o.activeTexture(o.TEXTURE0), o.bindTexture(o.TEXTURE_2D, r.texExplored), o.uniform1i(n.uniforms.fog, 0), o.uniform2f(n.uniforms.viewportSize, l / s, p / s), o.uniform2f(n.uniforms.viewOffset, Math.floor(t * e.subTileSize * 2), Math.floor(i * e.subTileSize * 2)), o.uniform1f(n.uniforms.tileSize, e.subTileSize), o.uniform1f(n.uniforms.inverseTileSize, 1 / (2 * e.subTileSize)), o.uniform2f(n.uniforms.inverseTileDataTextureSize, 1 / world.layers[a].exploredMap.width, 1 / world.layers[a].exploredMap.height), o.bindBuffer(o.ARRAY_BUFFER, e.positionBuffer), o.vertexAttribPointer(n.attribs.position, 2, o.FLOAT, !1, 0, 0), o.enableVertexAttribArray(n.attribs.position), o.drawArrays(o.TRIANGLES, 0, 6), o.bindTexture(o.TEXTURE_2D, this.fogTextureStorage), o.copyTexSubImage2D(o.TEXTURE_2D, 0, 0, 0, 0, 0, l, p), o.clear(o.COLOR_BUFFER_BIT), n = FieldOfView.hBlurProgram, o.useProgram(n.program), o.activeTexture(o.TEXTURE0), o.bindTexture(o.TEXTURE_2D, this.fogTextureStorage), o.uniform1i(n.uniforms.data, 0), o.uniform1f(n.uniforms.blurSize, 1 / (l / s / 4)), o.bindBuffer(o.ARRAY_BUFFER, e.positionTextureBuffer), o.vertexAttribPointer(n.attribs.position, 2, o.FLOAT, !1, 16, 0), o.vertexAttribPointer(n.attribs.texture, 2, o.FLOAT, !1, 16, 8), o.enableVertexAttribArray(n.attribs.position), o.enableVertexAttribArray(n.attribs.texture), o.drawArrays(o.TRIANGLES, 0, 6)), o.bindFramebuffer(o.FRAMEBUFFER, this.compositeFramebuffer), o.disable(o.BLEND), n = this.worldShaderProgram, o.useProgram(n.program), o.activeTexture(o.TEXTURE0), o.bindTexture(o.TEXTURE_2D, this.layerTexture), o.uniform1i(n.uniforms.data, 0), o.activeTexture(o.TEXTURE1), o.bindTexture(o.TEXTURE_2D, this.fogTexture), o.uniform1i(n.uniforms.fog, 1), o.activeTexture(o.TEXTURE2), o.bindTexture(o.TEXTURE_2D, game.fov.texLight), o.uniform1i(n.uniforms.vision, 2), o.activeTexture(o.TEXTURE3), o.bindTexture(o.TEXTURE_2D, game.fov.texLightOld), o.uniform1i(n.uniforms.visionOld, 3), o.activeTexture(o.TEXTURE4), o.bindTexture(o.TEXTURE_2D, e.ditherTexture), o.uniform1i(n.uniforms.bayerMatrix, 4), o.uniform1f(n.uniforms.blackness, game.getBlackness()), o.uniform1f(n.uniforms.transition, game.turnProgress), o.uniform2f(n.uniforms.transitionOffset, .5 * +game.fov.computeOffset.x / (game.fov.maxRadius + .5), .5 * +game.fov.computeOffset.y / (game.fov.maxRadius + .5)), o.uniform2f(n.uniforms.viewportSize, l / s, p / s), o.uniform2f(n.uniforms.viewOffset, Math.floor(t * e.subTileSize * 2), Math.floor(i * e.subTileSize * 2)), o.uniform2f(n.uniforms.visionOffset, Math.floor(game.fov.maxRadius - player.x), Math.floor(game.fov.maxRadius - player.y)), o.uniform2f(n.uniforms.inverseVisionTextureSize, game.fov.getSubdivisions() / game.fov.getTextureSize(), game.fov.getSubdivisions() / game.fov.getTextureSize()), o.uniform1f(n.uniforms.tileSize, e.subTileSize), o.uniform1f(n.uniforms.inverseTileSize, 1 / (2 * e.subTileSize)), o.uniform1f(n.uniforms.lightAmbient, game.getAmbientLightLevel()), o.uniform1f(n.uniforms.ditherEnabled, game.options.visionMode ? 1 : 0);
                var u = Mods.callHookWithDefault(Mods.Hook.GetAmbientColorDay, this.ambientColorDay),
                    g = Mods.callHookWithDefault(Mods.Hook.GetAmbientColorNight, this.ambientColorNight),
                    m = Mods.callHookWithDefault(Mods.Hook.GetAmbientColorCave, this.ambientColorCave);
                player.z === Z_CAVE ? o.uniform3f(n.uniforms.colorAmbient, m[0] * this.ambientIntensity, m[1] * this.ambientIntensity, m[2] * this.ambientIntensity) : o.uniform3f(n.uniforms.colorAmbient, Utilities.lerp(u[0], g[0], game.dayNight) * this.ambientIntensity, Utilities.lerp(u[1], g[1], game.dayNight) * this.ambientIntensity, Utilities.lerp(u[2], g[2], game.dayNight) * this.ambientIntensity), o.bindBuffer(o.ARRAY_BUFFER, e.positionTextureBuffer), o.vertexAttribPointer(n.attribs.position, 2, o.FLOAT, !1, 16, 0), o.vertexAttribPointer(n.attribs.texture, 2, o.FLOAT, !1, 16, 8), o.enableVertexAttribArray(n.attribs.position), o.enableVertexAttribArray(n.attribs.texture), o.drawArrays(o.TRIANGLES, 0, 6), Mods.callHook(Mods.Hook.PostRenderWorld, s, l, p), o.bindFramebuffer(o.FRAMEBUFFER, null)
            }
        }, e.prototype.render = function() {
            var t = this.gl,
                i = this.textureShaderProgram;
            t.useProgram(i.program), t.activeTexture(t.TEXTURE0), t.bindTexture(t.TEXTURE_2D, this.compositeTexture), t.uniform1i(i.uniforms.data, 0), t.bindBuffer(t.ARRAY_BUFFER, e.positionTextureBuffer), t.vertexAttribPointer(i.attribs.position, 2, t.FLOAT, !1, 16, 0), t.vertexAttribPointer(i.attribs.texture, 2, t.FLOAT, !1, 16, 8), t.enableVertexAttribArray(i.attribs.position), t.enableVertexAttribArray(i.attribs.texture), Mods.callHook(Mods.Hook.PreRenderPostProcess), t.drawArrays(t.TRIANGLES, 0, 6), Mods.callHook(Mods.Hook.PostRenderPostProcess)
        }, e.prototype.screenToTile = function(t, i) {
            var a = this.screenspaceViewport.x / this.tileScale,
                n = this.screenspaceViewport.y / this.tileScale,
                o = 2 * e.subTileSize,
                r = Math.floor(player.x * o),
                s = Math.floor(player.y * o);
            t = t / ui.getWidth() * a, i = i / ui.getHeight() * n;
            var l = (t + r - .5 * a) / o,
                p = (i + s - .5 * n) / o;
            return new Vec2([Math.round(l), Math.round(p)])
        }, e.prototype.getViewportBounds = function() {
            var e = new Vec2([player.x - Math.ceil(.5 * this.worldspaceViewport.x), player.y - Math.ceil(.5 * this.worldspaceViewport.y)]),
                t = new Vec2([player.x + Math.ceil(.5 * this.worldspaceViewport.x), player.y + Math.ceil(.5 * this.worldspaceViewport.y)]);
            return {
                min: e,
                max: t
            }
        }, e.prototype.computeSpritesInViewport = function() {
            if (this.world.isLoaded()) {
                this.itemBatch.begin(), this.corpseBatch.begin();
                var t = game.fov.disabled ? this.getViewportBounds() : game.fov.getBounds(),
                    i = t.min.x,
                    a = t.max.x,
                    n = t.min.y,
                    o = t.max.y,
                    r = 2 * e.subTileSize,
                    s = 8;
                this.monstersInViewport.length = 0;
                for (var l = n; l <= o; ++l)
                    for (var p = i; p <= a; ++p)
                        if (game.fov.canSeeTile(p, l)) {
                            var d = game.getTile(p, l, player.z),
                                u = d.containedItems;
                            if (u)
                                for (var g = 0, m = 0, y = 0; y < u.length; y++) {
                                    var c = u[y];
                                    g++, g > 12 && (g = 1), g % 3 === 0 ? m = 12 : g % 2 === 0 ? m = 4 : g % 1 === 0 && (m = 8);
                                    var h = SpriteAtlas.itemsSmall[c.type];
                                    if (h) {
                                        var T = h.texCoord;
                                        this.itemBatch.add(p + (m - e.subTileSize) / r, l + (5 - g) / r, s, T.x, T.y, s)
                                    }
                                }
                            p === player.x && l === player.y && this.monstersInViewport.push(-1), void 0 !== d.monsterId && this.monstersInViewport.length < this.monsterBatch.capacity && Mods.callHook(Mods.Hook.CanSeeMonster, d.monsterId, game.monsters[d.monsterId], d) !== !1 && this.monstersInViewport.push(d.monsterId);
                            var f = void 0;
                            if (void 0 !== d.corpseIds)
                                for (var v = d.corpseIds, y = 0; y < v.length; ++y) {
                                    var I = game.corpses[v[y]],
                                        S = SpriteAtlas.corpses[I.type];
                                    S && (f = (I.type === MonsterType.Blood ? Utilities.TileHelpers.getGfx(d) * S.texSize : 0) + (I.aberrant ? S.texSize : 0), this.corpseBatch.add(p, l, S.texSize, S.texCoord.x + f, S.texCoord.y, S.texSize))
                                }
                            if (void 0 !== d.eventId) {
                                var M = game.tileEvents[d.eventId],
                                    k = SpriteAtlas.tileEvents[M.type],
                                    b = Math.floor((player.turns + 3 * Utilities.getTileVariation(p, l)) % 3) * k.texSize;
                                this.itemBatch.add(p, l, k.texSize, k.texCoord.x + b, k.texCoord.y, k.texSize)
                            }
                        }
                this.itemBatch.end(), this.corpseBatch.end()
            }
        }, e.prototype.batchMonsters = function() {
            this.monsterBatch.begin();
            var e = Mods.callHookWithDefault(Mods.Hook.GetPlayerSpriteBatchLayer, SpriteBatchLayer.Monster, player, SpriteBatchLayer.Monster);
            if ((game.shouldRender() & RenderFlag.Monster) !== RenderFlag.Monster) this.batchPlayer(e);
            else
                for (var t = game.turnProgress, i = game.mapSize / 2, a = this.monstersInViewport.length; a >= 0; a--) {
                    var n = void 0,
                        o = void 0,
                        r = this.monstersInViewport[a];
                    if (r !== -1) {
                        var s = game.monsters[r];
                        if (s) {
                            var l = SpriteAtlas.monsters[s.type];
                            if (l && 0 === (s.ai & MonsterAiType.Hidden)) {
                                var p = monsters[s.type],
                                    d = p && p.waterAnimations,
                                    u = l.texSize / (d ? 8 : 4),
                                    g = s.fromX,
                                    m = s.fromY,
                                    y = s.x,
                                    c = s.y;
                                player.x < i ? (g = g - player.x > i ? g - game.mapSize : g, y = y - player.x > i ? y - game.mapSize : y) : (g = player.x - g > i ? g + game.mapSize : g, y = player.x - y > i ? y + game.mapSize : y), player.y < i ? (m = m - player.y > i ? m - game.mapSize : m, c = c - player.y > i ? c - game.mapSize : c) : (m = player.y - m > i ? m + game.mapSize : m, c = player.y - c > i ? c + game.mapSize : c), n = (s.anim ? u : 0) + (s.aberrant ? 2 * u : 0), o = s.direction * u;
                                var h = 0;
                                if (d) {
                                    var T = terrains[Utilities.TileHelpers.getType(game.getTile(y, c, s.z))];
                                    T && T.water && (o += 4 * u), h = l.texOffsetY
                                }
                                var f = Mods.callHookWithDefault(Mods.Hook.GetMonsterSpriteBatchLayer, SpriteBatchLayer.Monster, r, s, SpriteBatchLayer.Monster);
                                if ((p.moveType & MoveType.Flying) === MoveType.Flying) {
                                    this.batchShadow(g, m, y, c, t, s.anim);
                                    var v = 0,
                                        I = 0,
                                        S = terrains[Utilities.TileHelpers.getType(game.getTile(Math.round(g), Math.round(m)))];
                                    S.passable || S.water || (v -= .5), S = terrains[Utilities.TileHelpers.getType(game.getTile(Math.round(y), Math.round(c)))], S.passable || S.water || (I -= .5), v -= .5, I -= .5, h = Utilities.lerp(v, I, t)
                                }
                                this.spriteBatchForLayer(f).add(Utilities.lerp(g, y, t), Utilities.lerp(m, c, t), u, l.texCoord.x + n, l.texCoord.y + o, u, 0, h - l.texOffsetY)
                            }
                        }
                    } else this.batchPlayer(e)
                }
            this.monsterBatch.end()
        }, e.prototype.batchShadow = function(e, t, i, a, n, o) {
            var r = SpriteAtlas.shadow,
                s = r.texSize;
            this.monsterBatch.add(Utilities.lerp(e, i, n), Utilities.lerp(t, a, n) - r.texOffsetY, s, r.texCoord.x + o * s, r.texCoord.y, s, 0, 0, 0, 0, 0, 100)
        }, e.prototype.batchPlayer = function(e) {
            if ((game.shouldRender() & RenderFlag.Player) === RenderFlag.Player) {
                var t = game.moveAnim;
                player.swimming && (t += 8), 1 === player.direction.x ? t += 6 : 1 === player.direction.y ? t += 4 : player.direction.y === -1 && (t += 2);
                var i = 24,
                    a = player.fromX,
                    n = player.fromY,
                    o = player.x,
                    r = player.y,
                    s = 0,
                    l = 0;
                if (player.moveType === MoveType.Flying) {
                    this.batchShadow(a, n, o, r, game.turnProgress, game.moveAnim);
                    var p = terrains[Utilities.TileHelpers.getType(game.getTile(a, n))];
                    p.passable || p.water || (s -= .5), p = terrains[Utilities.TileHelpers.getType(game.getTile(o, r))], p.passable || p.water || (l -= .5), s -= .5, l -= .5
                }
                var d = Utilities.lerp(a, o, game.turnProgress),
                    u = Utilities.lerp(n, r, game.turnProgress),
                    g = 0,
                    m = Utilities.lerp(s, l, game.turnProgress);
                player.swimming && (m += .25);
                var y = this.spriteBatchForLayer(e);
                if (y) {
                    if (null !== game.raft) {
                        1 === game.moveAnim && (m -= .0625), t -= game.moveAnim, m -= .25;
                        var c = 16;
                        y.add(d, u, c, Math.abs(player.direction.y) * c + SpriteAtlas.raft.texCoord.x, SpriteAtlas.raft.texCoord.y, c, g, m + .25)
                    }
                    var h = t * i,
                        T = SpriteAtlas.player.texCoord.x + h,
                        f = SpriteAtlas.player.texCoord.y;
                    y.add(d, u, i, T, f, i, g, m), player.status.poisoned && y.add(d, u, i, T, f + 2 * i, i, g, m), player.status.burned && y.add(d, u, i, T, f + 3 * i, i, g, m), player.status.bleeding && y.add(d, u, i, T, f + i, i, g, m);
                    for (var v = !0, I = [], S = null, M = null, k = null, b = null, w = 0, D = player.inventory.containedItems; w < D.length; w++) {
                        var C = D[w];
                        if (C.equipped) switch (C.equipped) {
                            case EquipType.LeftHand:
                                k = C;
                                break;
                            case EquipType.RightHand:
                                b = C;
                                break;
                            case EquipType.Belt:
                                S = C;
                                break;
                            case EquipType.Back:
                                M = C;
                                break;
                            default:
                                I.push(C)
                        }
                    }
                    null !== S && I.push(S), null !== M && I.push(M), null !== k && (1 === player.direction.x ? I.unshift(k) : I.push(k)), null !== b && (player.direction.x === -1 ? I.unshift(b) : I.push(b));
                    for (var F = 0, R = I; F < R.length; F++) {
                        var C = R[F],
                            A = SpriteAtlas.equips[C.type];
                        if (A) {
                            if (C.equipped === EquipType.Head) v = !1;
                            else if (player.swimming) continue;
                            var B = A.texCoord.y + (C.equipped === EquipType.RightHand ? i : 0);
                            y.add(d, u, i, A.texCoord.x + h, B, i, g, m)
                        }
                    }
                    if (v) {
                        var L = player.gender === Gender.Male ? SpriteAtlas.playerHairMan : SpriteAtlas.playerHairWoman;
                        y.add(d, u, i, L.texCoord.x + h, L.texCoord.y, i, g, m)
                    }
                }
            }
        }, e.prototype.spriteBatchForLayer = function(e) {
            switch (e) {
                case SpriteBatchLayer.Corpse:
                    return this.corpseBatch;
                case SpriteBatchLayer.Item:
                    return this.itemBatch;
                case SpriteBatchLayer.Monster:
                    return this.monsterBatch
            }
            throw "Unknown sprite batch layer"
        }, e.subTileSize = 8, e
    }(),
    WorldLayerRenderer = function() {
        function e(e, t, i, a, n) {
            var o = this;
            this.gl = e, this.renderer = t, this.worldLayer = i, this.width = a, this.height = n, this.dirty = !0, this.terrainLayer = new TileLayer(a, n, e), this.doodadLayer = new TileLayer(a, n, e), this.doodadOverLayer = new TileLayer(a, n, e), i.onTileUpdate = function(e, t, i) {
                o.computeTile(e, t, i)
            }, i.onDoodadUpdate = function(e, t, i, a, n) {
                o.setDoodad(e, t, i, a, n)
            };
            var r = e.createTexture(),
                s = e.createTexture(),
                l = e.createTexture();
            if (!r || !s || !l) throw "Unable to create texture";
            this.texLightBlock = r, e.bindTexture(e.TEXTURE_2D, this.texLightBlock), e.texImage2D(e.TEXTURE_2D, 0, e.ALPHA, i.lightBlockMap.width, i.lightBlockMap.height, 0, e.ALPHA, e.UNSIGNED_BYTE, void 0), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.REPEAT), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.REPEAT), this.texLightLevel = s, e.bindTexture(e.TEXTURE_2D, this.texLightLevel), e.texImage2D(e.TEXTURE_2D, 0, e.ALPHA, i.lightLevelMap.width, i.lightLevelMap.height, 0, e.ALPHA, e.UNSIGNED_BYTE, void 0), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.REPEAT), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.REPEAT), this.texExplored = l, e.bindTexture(e.TEXTURE_2D, this.texExplored), e.texImage2D(e.TEXTURE_2D, 0, e.ALPHA, world.width, world.height, 0, e.ALPHA, e.UNSIGNED_BYTE, i.exploredMap.data), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.REPEAT), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.REPEAT)
        }
        return e.prototype.updateAll = function() {
            for (var e = 0; e < this.width; e++)
                for (var t = 0; t < this.height; t++) this.computeTile(e, t);
            this.flush()
        }, e.prototype.setDoodad = function(e, t, i, a, n) {
            void 0 === n && (n = !1);
            var o = 8 * e + 16 * t * this.width,
                r = i ? TileAtlas.doodads[i] : null;
            r || (i = null), i === DoodadType.WoodenGate || i === DoodadType.WoodenGateOpen || (null === i ? (this.doodadLayer.setTileTLFG(o, 0, 0), this.doodadLayer.setTileTRFG(o, 0, 0), this.doodadLayer.setTileBLFG(o, 0, 0), this.doodadLayer.setTileBRFG(o, 0, 0), this.doodadLayer.setTileTLBG(o, 0, 0), this.doodadLayer.setTileTRBG(o, 0, 0), this.doodadLayer.setTileBLBG(o, 0, 0), this.doodadLayer.setTileBRBG(o, 0, 0), this.doodadOverLayer.setTileTLFG(o, 0, 0), this.doodadOverLayer.setTileTRFG(o, 0, 0), this.doodadOverLayer.setTileBLFG(o, 0, 0), this.doodadOverLayer.setTileBRFG(o, 0, 0), t === this.height - 1 && (o -= 16 * this.width * this.height), o += 16 * this.width, this.doodadOverLayer.setTileTLBG(o, 0, 0), this.doodadOverLayer.setTileTRBG(o, 0, 0), this.doodadOverLayer.setTileBLBG(o, 0, 0), this.doodadOverLayer.setTileBRBG(o, 0, 0)) : r && (r.animated ? (a = 0, this.doodadLayer.setTileTLBG(o, 255, 255), this.doodadLayer.setTileTRBG(o, 255, 255), this.doodadLayer.setTileBLBG(o, 255, 255), this.doodadLayer.setTileBRBG(o, 255, 255)) : (this.doodadLayer.setTileTLBG(o, 0, 0), this.doodadLayer.setTileTRBG(o, 0, 0), this.doodadLayer.setTileBLBG(o, 0, 0), this.doodadLayer.setTileBRBG(o, 0, 0)), this.doodadLayer.setTileTLFG(o, r.topLeft.x + 2 * a, r.topLeft.y), this.doodadLayer.setTileTRFG(o, r.topRight.x + 2 * a, r.topRight.y), this.doodadLayer.setTileBLFG(o, r.bottomLeft.x + 2 * a, r.bottomLeft.y), this.doodadLayer.setTileBRFG(o, r.bottomRight.x + 2 * a, r.bottomRight.y), r.tall ? (this.doodadOverLayer.setTileTLFG(o, r.topLeft.x + 2 * a, r.topLeft.y - 2), this.doodadOverLayer.setTileTRFG(o, r.topRight.x + 2 * a, r.topRight.y - 2), this.doodadOverLayer.setTileBLFG(o, r.bottomLeft.x + 2 * a, r.bottomLeft.y - 2), this.doodadOverLayer.setTileBRFG(o, r.bottomRight.x + 2 * a, r.bottomRight.y - 2)) : (this.doodadOverLayer.setTileTLFG(o, 0, 0), this.doodadOverLayer.setTileTRFG(o, 0, 0), this.doodadOverLayer.setTileBLFG(o, 0, 0), this.doodadOverLayer.setTileBRFG(o, 0, 0)), t === this.height - 1 && (o -= 16 * this.width * this.height), o += 16 * this.width, this.doodadOverLayer.setTileTLBG(o, 0, 0), this.doodadOverLayer.setTileTRBG(o, 0, 0), this.doodadOverLayer.setTileBLBG(o, 0, 0), this.doodadOverLayer.setTileBRBG(o, 0, 0))), n ? (this.doodadLayer.sendTileToGPU(e, t, this.gl), 0 === t ? (this.doodadOverLayer.sendTileToGPU(e, this.height - 1, this.gl), this.doodadOverLayer.sendTileToGPU(e, t, this.gl)) : (this.doodadOverLayer.sendTileToGPU(e, t - 1, this.gl), this.doodadOverLayer.sendTileToGPU(e, t, this.gl))) : this.dirty = !0
        }, e.prototype.renderFullbright = function(e, t, i, a, n) {
            this.dirty && this.flush();
            var o = this.gl,
                r = WorldRenderer.getSubTileSize();
            this.terrainLayer.render(o, e, t, r, i, a, n), this.doodadLayer.render(o, e, t, r, i, a, n), this.doodadOverLayer.render(o, e, t + 1, r, i, a, n, !0)
        }, e.prototype.postRenderFullbright = function(e, t, i, a, n) {}, e.prototype.computeTile = function(e, t, i) {
            void 0 === i && (i = !1), e -= this.width * Math.floor(e / this.width), t -= this.height * Math.floor(t / this.height);
            var a, n = this.worldLayer,
                o = n.getTile(e, t),
                r = 8 * e + 16 * t * this.width,
                s = {};
            if (n.isWall(o)) {
                var l = game.doodads[game.getTile(e, t, n.level).doodadId],
                    p = l.type;
                if (p === DoodadType.WoodenDoor || p === DoodadType.WoodenDoorOpen) {
                    var d = l,
                        u = d.orientation === DoorOrientation.Vertical;
                    this.renderer.wallAdaptor.adaptDoor(n, e, t, p, u, s), u && (a = this.doodadOverLayer, a.setTileTLFG(r, s.TLFG.x + 2, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x + 2, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x + 2, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x + 2, s.BRFG.y))
                } else this.renderer.wallAdaptor.adapt(n, e, t, p, s);
                a = this.doodadLayer, a.setTileTLFG(r, s.TLFG.x, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x, s.BRFG.y), a.setTileTLBG(r, s.TLBG.x, s.TLBG.y), a.setTileTRBG(r, s.TRBG.x, s.TRBG.y), a.setTileBLBG(r, s.BLBG.x, s.BLBG.y), a.setTileBRBG(r, s.BRBG.x, s.BRBG.y)
            } else if (n.isFence(o)) {
                var l = game.doodads[game.getTile(e, t, n.level).doodadId],
                    p = l.type;
                if (p === DoodadType.WoodenGate || p === DoodadType.WoodenGateOpen) {
                    var g = l;
                    if (this.renderer.fenceAdaptor.adaptGate(n, e, t, p, g.orientation === DoorOrientation.Vertical, s), g.orientation === DoorOrientation.Vertical) {
                        var m = TileAtlas.doodads[p].topLeft;
                        a = this.doodadOverLayer, a.setTileTLFG(r, m.x + 8, m.y + 2), a.setTileTRFG(r, m.x + 9, m.y + 2), a.setTileBLFG(r, m.x + 8, m.y + 3), a.setTileBRFG(r, m.x + 9, m.y + 3)
                    }
                } else this.renderer.fenceAdaptor.adapt(n, e, t, p, s);
                a = this.doodadLayer, a.setTileTLFG(r, s.TLFG.x, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x, s.BRFG.y), a.setTileTLBG(r, 0, 0), a.setTileTRBG(r, 0, 0), a.setTileBLBG(r, 0, 0), a.setTileBRBG(r, 0, 0), a = this.doodadOverLayer;
                var y = t === this.height - 1 ? r - 16 * this.width * (this.height - 1) : r + 16 * this.width;
                a.setTileTLBG(y, s.TLBG.x, s.TLBG.y), a.setTileTRBG(y, s.TRBG.x, s.TRBG.y), a.setTileBLBG(y, s.BLBG.x, s.BLBG.y), a.setTileBRBG(y, s.BRBG.x, s.BRBG.y)
            }
            var c = o & TerrainMask.Type;
            if (c === TerrainType.Dirt) this.renderer.dirtAdaptor.adapt(n, e, t, TerrainType.Dirt, s), a = this.terrainLayer, a.setTileTLFG(r, s.TLFG.x, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x, s.BRFG.y);
            else if (TileAtlas.isFloor(c)) this.renderer.floorAdaptor.adapt(n, e, t, c, s), a = this.terrainLayer, a.setTileTLFG(r, s.TLFG.x, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x, s.BRFG.y), a.setTileTLBG(r, s.TLBG.x, s.TLBG.y), a.setTileTRBG(r, s.TRBG.x, s.TRBG.y), a.setTileBLBG(r, s.BLBG.x, s.BLBG.y), a.setTileBRBG(r, s.BRBG.x, s.BRBG.y);
            else if (TileAtlas.isMountain(c)) {
                if (TileAtlas.isOre(c)) {
                    this.renderer.mountainAdaptor.adapt(n, e, t, c, s), a = this.doodadLayer, a.setTileTLFG(r, s.TLFG.x, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x, s.BRFG.y), a.setTileTLBG(r, 0, 0), a.setTileTRBG(r, 0, 0), a.setTileBLBG(r, 0, 0), a.setTileBRBG(r, 0, 0);
                    var h = terrains[c].leftOver;
                    void 0 !== h && (c = h)
                }
                this.renderer.mountainAdaptor.adapt(n, e, t, c, s), a = this.terrainLayer, a.setTileTLFG(r, s.TLFG.x, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x, s.BRFG.y), a.setTileTLBG(r, s.TLBG.x, s.TLBG.y), a.setTileTRBG(r, s.TRBG.x, s.TRBG.y), a.setTileBLBG(r, s.BLBG.x, s.BLBG.y), a.setTileBRBG(r, s.BRBG.x, s.BRBG.y)
            } else if (TileAtlas.isWater(c)) {
                var T = TileAdaptor.getWaterType(c),
                    f = T !== c ? 3 : 0;
                switch (T) {
                    case TerrainType.DeepSeawater:
                        this.renderer.waterAdaptor.adapt(n, e, t, TerrainType.DeepSeawater + f, s), a = this.doodadLayer, a.setTileTLFG(r, s.TLFG.x, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x, s.BRFG.y);
                    case TerrainType.Seawater:
                        this.renderer.waterAdaptor.adapt(n, e, t, TerrainType.Seawater + f, s), a = this.doodadLayer, a.setTileTLBG(r, s.TLFG.x, s.TLFG.y), a.setTileTRBG(r, s.TRFG.x, s.TRFG.y), a.setTileBLBG(r, s.BLFG.x, s.BLFG.y), a.setTileBRBG(r, s.BRFG.x, s.BRFG.y);
                    case TerrainType.ShallowSeawater:
                        this.renderer.waterAdaptor.adapt(n, e, t, TerrainType.ShallowSeawater + f, s), a = this.terrainLayer, a.setTileTLFG(r, s.TLFG.x, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x, s.BRFG.y), a.setTileTLBG(r, s.TLBG.x, s.TLBG.y), a.setTileTRBG(r, s.TRBG.x, s.TRBG.y), a.setTileBLBG(r, s.BLBG.x, s.BLBG.y), a.setTileBRBG(r, s.BRBG.x, s.BRBG.y)
                }
            } else this.renderer.defaultAdaptor.adapt(n, e, t, c, s), a = this.terrainLayer, a.setTileTLFG(r, s.TLFG.x, s.TLFG.y), a.setTileTRFG(r, s.TRFG.x, s.TRFG.y), a.setTileBLFG(r, s.BLFG.x, s.BLFG.y), a.setTileBRFG(r, s.BRFG.x, s.BRFG.y), a.setTileTLBG(r, s.TLBG.x, s.TLBG.y), a.setTileTRBG(r, s.TRBG.x, s.TRBG.y), a.setTileBLBG(r, s.BLBG.x, s.BLBG.y), a.setTileBRBG(r, s.BRBG.x, s.BRBG.y);
            i ? (this.terrainLayer.sendTileToGPU(e, t, this.gl), this.doodadLayer.sendTileToGPU(e, t, this.gl), this.doodadOverLayer.sendTileToGPU(e, t, this.gl), this.updateTileLightBlock(e, t, this.worldLayer.lightBlockMap.get(e, t))) : this.dirty = !0
        }, e.prototype.updateTileLightBlock = function(e, t, i) {
            var a = this.gl;
            a.bindTexture(a.TEXTURE_2D, this.texLightBlock), a.texSubImage2D(a.TEXTURE_2D, 0, e, t, 1, 1, a.ALPHA, a.UNSIGNED_BYTE, new Uint8Array([i]))
        }, e.prototype.flush = function() {
            if (this.dirty) {
                var e = this.gl;
                this.dirty = !1, this.terrainLayer.sendToGPU(e), this.doodadLayer.sendToGPU(e), this.doodadOverLayer.sendToGPU(e), e.bindTexture(e.TEXTURE_2D, this.texLightBlock), e.texImage2D(e.TEXTURE_2D, 0, e.ALPHA, this.worldLayer.lightBlockMap.width, this.worldLayer.lightBlockMap.height, 0, e.ALPHA, e.UNSIGNED_BYTE, this.worldLayer.lightBlockMap.data), game.updateRender = !0
            }
        }, e
    }(),
    TileLayer = function() {
        function e(t, i, a) {
            this.width = t, this.height = i;
            var n = a.createTexture();
            if (!n) throw "Unable to create texture";
            this.texTiles = n, this.tileData = new ArrayBuffer(16 * t * i), this.tileDataU8 = new Uint8Array(this.tileData), this.tileDataU32 = new Uint32Array(this.tileData), this.singleTileData = new ArrayBuffer(16), this.singleTileDataU8 = new Uint8Array(this.singleTileData), this.singleTileDataU32 = new Uint32Array(this.singleTileData), this.inverseTileDataTextureSize = new Vec2([1 / (2 * t), 1 / (2 * i)]), a.bindTexture(a.TEXTURE_2D, this.texTiles), a.texImage2D(a.TEXTURE_2D, 0, a.RGBA, 2 * t, 2 * i, 0, a.RGBA, a.UNSIGNED_BYTE, this.tileDataU8), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MAG_FILTER, a.NEAREST), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MIN_FILTER, a.NEAREST), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_S, a.REPEAT), a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_T, a.REPEAT), e.tileShaderProgram || (e.tileShaderProgram = new CompiledProgram(a, "tile-shader-vertex", "tile-shader-fragment"))
        }
        return e.setTileTexture = function(t, i) {
            e.texTileSprites = t, e.inverseTileSpriteTextureSize = i
        }, e.prototype.setTileTLFG = function(e, t, i) {
            this.tileDataU8[e + 0] = t, this.tileDataU8[e + 1] = i
        }, e.prototype.setTileTRFG = function(e, t, i) {
            this.tileDataU8[e + 4 + 0] = t, this.tileDataU8[e + 4 + 1] = i
        }, e.prototype.setTileBLFG = function(e, t, i) {
            this.tileDataU8[e + 0 + 8 * this.width + 0] = t, this.tileDataU8[e + 0 + 8 * this.width + 1] = i
        }, e.prototype.setTileBRFG = function(e, t, i) {
            this.tileDataU8[e + 4 + 8 * this.width + 0] = t, this.tileDataU8[e + 4 + 8 * this.width + 1] = i
        }, e.prototype.setTileTLBG = function(e, t, i) {
            this.tileDataU8[e + 2] = t, this.tileDataU8[e + 3] = i
        }, e.prototype.setTileTRBG = function(e, t, i) {
            this.tileDataU8[e + 4 + 2] = t, this.tileDataU8[e + 4 + 3] = i
        }, e.prototype.setTileBLBG = function(e, t, i) {
            this.tileDataU8[e + 0 + 8 * this.width + 2] = t, this.tileDataU8[e + 0 + 8 * this.width + 3] = i
        }, e.prototype.setTileBRBG = function(e, t, i) {
            this.tileDataU8[e + 4 + 8 * this.width + 2] = t, this.tileDataU8[e + 4 + 8 * this.width + 3] = i
        }, e.prototype.sendTileToGPU = function(e, t, i) {
            var a = 2 * e + 4 * t * this.width,
                n = this.singleTileDataU32;
            n[0] = this.tileDataU32[a], n[1] = this.tileDataU32[a + 1], n[2] = this.tileDataU32[a + 2 * this.width], n[3] = this.tileDataU32[a + 2 * this.width + 1], i.bindTexture(i.TEXTURE_2D, this.texTiles), i.texSubImage2D(i.TEXTURE_2D, 0, 2 * e, 2 * t, 2, 2, i.RGBA, i.UNSIGNED_BYTE, this.singleTileDataU8)
        }, e.prototype.sendToGPU = function(e) {
            e.bindTexture(e.TEXTURE_2D, this.texTiles), e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, 2 * this.width, 2 * this.height, 0, e.RGBA, e.UNSIGNED_BYTE, this.tileDataU8)
        }, e.prototype.render = function(t, i, a, n, o, r, s, l) {
            void 0 === l && (l = !1);
            var p = e.tileShaderProgram;
            t.useProgram(p.program), t.depthFunc(t.ALWAYS), t.bindBuffer(t.ARRAY_BUFFER, WorldRenderer.positionBuffer), t.vertexAttribPointer(p.attribs.position, 2, t.FLOAT, !1, 0, 0), t.enableVertexAttribArray(p.attribs.position), t.uniform2f(p.uniforms.viewportSize, r / o, s / o), t.uniform2f(p.uniforms.inverseTileSpriteTextureSize, e.inverseTileSpriteTextureSize.x, e.inverseTileSpriteTextureSize.y), t.uniform1f(p.uniforms.tileSize, n), t.uniform1f(p.uniforms.inverseTileSize, 1 / n), t.uniform1i(p.uniforms.time, player.turns), t.uniform1i(p.uniforms.fixedDepth, l ? 1 : 0), t.uniform2f(p.uniforms.viewOffset, Math.floor(i * n * 2), Math.floor(a * n * 2)), t.uniform2f(p.uniforms.inverseTileDataTextureSize, this.inverseTileDataTextureSize.x, this.inverseTileDataTextureSize.y), t.uniform2f(p.uniforms.tileDataTextureSize, this.width, this.height), t.activeTexture(t.TEXTURE0), t.uniform1i(p.uniforms.sprites, 0), t.bindTexture(t.TEXTURE_2D, e.texTileSprites), t.activeTexture(t.TEXTURE1), t.uniform1i(p.uniforms.tiles, 1), t.bindTexture(t.TEXTURE_2D, this.texTiles), t.drawArrays(t.TRIANGLES, 0, 6)
        }, e.prototype.clear = function() {
            for (var e = this.tileDataU8, t = e.length, i = 0; i < t; ++i) e[i] = 0
        }, e
    }();
game = null, audio = null, ui = null, player = null, world = null, renderer = null, quickLoad = null;
var Game = function() {
    function e() {
        var e = this;
        this.interval = 16.6666, this.mapSize = 512, this.mapSizeSq = this.mapSize * this.mapSize, this.halfMapSize = this.mapSize / 2, this.version = gameVersion, this.dailyChallenge = !1, this.raft = null, this.lastPlayedVersion = null, this.crafted = {}, this.newCrafted = {}, this.highscores = [], this.seeds = {
            base: 0,
            saved: 0
        }, this.options = {
            alternateContextMenu: !1,
            autoGather: !0,
            autoPickup: !0,
            binds: [],
            currentGame: 0,
            dialogOpacity: .5,
            dropOnGather: !1,
            effects: .4,
            fontStyle: !0,
            hints: !0,
            keepSortActive: !1,
            mouseMovement: !0,
            music: .2,
            mute: !1,
            skipIntro: !1,
            visionMode: !1,
            windowMode: !1,
            worldTooltips: !0,
            zoomFactor: 1,
            zoomLevel: 4,
            zoomOnScroll: !0,
            keyBinds: []
        }, this.playedCount = 0, this.gameLoop = function(t) {
            if (requestAnimationFrame(e.gameLoop), audio.processEffects(), e.playing) {
                e.processMessages(), e.notifier.update();
                var i = (t - e.time) / 1e3;
                e.time = t, 1 !== e.turnProgress && (e.updateRender = !0), e.turnProgress = 1 - Math.min(1, Math.max(0, (e.turnFinishTime - e.time) / (Delay.Movement * e.interval))), 1 !== e.turnProgress && (e.updateRender = !0), Mods.callHook(Mods.Hook.PreRender), e.render(i), Mods.callHook(Mods.Hook.PostRender),
                    e.time >= e.nextProcessInput && !e.turnProgressCompleted && (e.turnProgressCompleted = !0, Mods.callHook(Mods.Hook.OnTurnComplete), ui.refreshWorldTooltips()), Mods.callHook(Mods.Hook.ProcessInput), e.time >= e.nextProcessInput && (e.processInput(), e.turnProgressCompleted && Mods.callHook(Mods.Hook.OnNoInputReceived))
            }
        }, audio = new WAudio, ui = new UI.Ui, ui.initialize();
        var t = document.getElementById("game").getContext("experimental-webgl"),
            i = document.getElementById("game-map").getContext("2d");
        if (null === t || null === i) throw "Invalid gl context";
        this.glContext = t, this.mapContext = i, this.glContext.getExtension("EXT_frag_depth"), Utilities.ItemImageCache.initialize(), ResourceLoader.initialize(this.glContext), FieldOfView.compileShaders(this.glContext), this.notifier = new Notifier.Notifier(this.glContext, 16), this.particleSystem = new ParticleSystem(this.glContext)
    }
    return e.getVersionInfo = function(e, t) {
        void 0 === t && (t = "2.0.5"), e || (e = t);
        var i = e.split(".");
        return {
            str: e,
            major: parseInt(i[0], 10),
            minor: parseInt(i[1], 10),
            patch: parseInt(i[2], 10)
        }
    }, e.prototype.createWorld = function() {
        world = new World(this.mapSize, this.mapSize), world.addLayer(Z_CAVE), world.addLayer(Z_NORMAL)
    }, e.prototype.createWorldRenderer = function() {
        Mods.callHook(Mods.Hook.OnCreateWorld, world), renderer = new WorldRenderer(this.glContext, world), renderer.setZoom(Math.pow(2, (this.options.zoomLevel || 4) / 2)), this.resizeRenderer()
    }, e.prototype.resizeRenderer = function() {
        renderer && (renderer.setViewport(new Vec2([this.glContext.canvas.width, this.glContext.canvas.height])), player && renderer.computeSpritesInViewport(), this.playing && this.updateGame())
    }, e.prototype.setupWorldResources = function() {
        renderer.setSpriteTexture(this.spriteTexture, this.spriteTextureSizeInversed), TileLayer.setTileTexture(this.tileTexture, this.tileTextureSizeInversed), this.notifier.setTexture(this.spriteTexture, this.spriteTextureSizeInversed)
    }, e.prototype.checkWaterFill = function(e, t, i, a) {
        if (!(this.fillCount >= a)) {
            var n = this.getTile(e, t, i);
            if (n) {
                var o = Utilities.TileHelpers.getType(this.getTile(e, t, i));
                (terrains[o].shallowWater || terrains[o].water) && (this.fillTile[e] && this.fillTile[e][t] || (this.fillCount++, this.fillTile[e] = this.fillTile[e] || [], this.fillTile[e][t] = !0, this.checkWaterFill(e - 1, t, i, a), this.checkWaterFill(e, t - 1, i, a), this.checkWaterFill(e + 1, t, i, a), this.checkWaterFill(e, t + 1, i, a)))
            }
        }
    }, e.prototype.isMonsterHidden = function(e) {
        return 0 !== (e.ai & MonsterAiType.Hidden)
    }, e.prototype.checkForHiddenMob = function(e, t, i) {
        var a = this.getTile(e, t, i).monsterId;
        if (void 0 !== a) {
            var n = this.monsters[a];
            0 !== (n.ai & MonsterAiType.Hidden) && (n.ai &= ~MonsterAiType.Hidden, n.ai |= MonsterAiType.Hostile, ui.displayMessage(Message.CreatureAppears, MessageType.None, this.getName(monsters[n.type], TextCase.Sentence)), this.updateGame())
        }
    }, e.prototype.getWrappedCoord = function(e) {
        return e - this.mapSize * Math.floor(e / this.mapSize)
    }, e.prototype.getTileInFrontOfPlayer = function() {
        return this.getTile(player.x + player.direction.x, player.y + player.direction.y)
    }, e.prototype.getTile = function(e, t, i) {
        return void 0 === i && (i = player.z), this.tile[i * this.mapSizeSq + this.getWrappedCoord(t) * this.mapSize + this.getWrappedCoord(e)]
    }, e.prototype.getTileUnsafe = function(e, t, i) {
        return void 0 === i && (i = player.z), this.tile[i * this.mapSizeSq + t * this.mapSize + e]
    }, e.prototype.setTile = function(e, t, i, a) {
        return this.tile[i * this.mapSizeSq + t * this.mapSize + e] = a, a
    }, e.prototype.getOrCreateTile = function(e, t, i) {
        var a = i * this.mapSizeSq + t * this.mapSize + e,
            n = this.tile[a];
        return n ? n : (n = {}, this.tile[a] = n, n)
    }, e.prototype.nullFilter = function(e) {
        return null !== e
    }, e.prototype.saveGame = function(e) {
        if (!this.saveClear) {
            this.unloading = e === SaveType.Quit, this.seeds.saved = Utilities.Random.getSeed();
            var t = !1;
            this.dailyChallenge || (e === SaveType.InGame ? Mods.saveAll() : Mods.unloadAll(), this.playing && (t = !0, SaveLoad.save(this.slot, function(e, t) {
                var i = (t / 1024 / 1024).toFixed(3);
                ui.displayMessage(Message.GameHasBeenSavedIsTakingUpMB, MessageType.None, i)
            }))), t || SaveLoad.save(-1, function() {})
        }
    }, e.prototype.addZoomLevel = function(e) {
        var t = Math.max(Math.min(this.options.zoomLevel + this.options.zoomLevel / 8 * e, 8), 1);
        t !== this.options.zoomLevel && (this.options.zoomLevel = t, this.setZoomLevel())
    }, e.prototype.setZoomLevel = function() {
        renderer && (renderer.setZoom(Math.pow(2, this.options.zoomLevel / 2)), this.playing && (renderer.computeSpritesInViewport(), this.updateRender = !0))
    }, e.prototype.getFireMessage = function(e) {
        return e <= 4 ? Message.FireAlmostExtinguished : e <= 8 ? Message.FireIsStruggling : e <= 16 ? Message.FireIsHealthy : Message.FireIsRaging
    }, e.prototype.outputFireMessage = function(e) {
        ui.displayMessage(this.getFireMessage(e))
    }, e.prototype.play = function(e) {
        var t = this;
        if (Utilities.Console.log(Source.Game, "play", e), this.slot = e, this.dailyChallenge = e === -1, this.initializeGameState(), this.createWorld(), ui.showLoadingScreen(), this.dailyChallenge) {
            var i = new Date,
                a = 10 * i.getDate() * i.getDate() * i.getFullYear() * (i.getDay() + 1) * (i.getDay() + 1) * i.getFullYear() * (i.getMonth() + 1) * (i.getMonth() + 1);
            return void this.prePlay(a, !1)
        }
        SaveLoad.isSlotUsed(this.slot, function(e, i) {
            i ? (player = new Player, SaveLoad.load(t.slot, function() {
                player.state === PlayerState.Traveling && t.initializeGameState(!0), t.prePlay(player.state === PlayerState.Traveling ? null : t.seeds.base, !0)
            })) : t.prePlay(null, !1)
        })
    }, e.prototype.loadResources = function() {
        ResourceLoader.loadResources(this)
    }, e.prototype.postLoadResources = function() {
        Utilities.Console.log(Source.Game, "postLoadResources"), this.loadedResources = !0, this.loadedResources && this.loadedWorld && this.playGame()
    }, e.prototype.postGenerateWorld = function() {
        Utilities.Console.log(Source.Game, "postGenerateWorld", Utilities.Random.getSeed()), this.loadedWorld = !0, this.loadedResources ? this.playGame() : ui.setLoadingMessage(Message.LoadingSprites)
    }, e.prototype.playGame = function() {
        Utilities.Console.log(Source.Game, "playGame", Utilities.Random.getSeed()), Utilities.ItemImageCache.cacheAllItemImageOutlines(), ui.setupItemBackgrounds(), ui.setLoadingMessage(Message.FinalizingWorld);
        var e;
        if (this.isLoadingSave) {
            Utilities.Random.setSeed(this.seeds.saved), player.state === PlayerState.Traveling ? (player.x = this.spawnCoords.x, player.y = this.spawnCoords.y, this.raft = null, SaveLoad.deleteSlot(this.slot, function() {}), Item.resetMapsInContainer(player.inventory), ui.displayMessage(Message.TravelToFarOffLands, MessageType.Stat)) : ui.displayMessage(Message.LastPlaceYouLeftOff, MessageType.Stat), Item.loadTileReferences(), Item.loadReferences();
            var t = Item.getItemsInContainer(player.inventory);
            for (e = 0; e < t.length; e++) {
                var i = t[e];
                i.containedWithin === player.inventory && ui.addItemToContainer(i, player.inventory, !0, !0), i.quickSlot && ui.setQuickSlot(i.quickSlot, i.id, !0), i.equipped && ui.setEquipSlot(i.equipped, i.id, !0)
            }
            ui.afterAddingMultipleItemsToContainer(player.inventory), ui.loadQuickSlots()
        } else {
            for (player.gender = Utilities.Random.nextFloat() > .5 ? Gender.Male : Gender.Female; 0 === this.spawnCoords.x && 0 === this.spawnCoords.y;) {
                var a = Math.floor(Utilities.Random.nextFloat() * this.mapSize),
                    n = Math.floor(Utilities.Random.nextFloat() * this.mapSize),
                    o = this.getTile(a, n, Z_NORMAL);
                terrains[Utilities.TileHelpers.getType(o)].passable && Utilities.TileHelpers.getType(o) !== TerrainType.ShallowSeawater && Utilities.TileHelpers.getType(o) !== TerrainType.Sand && (this.spawnCoords.x = a, this.spawnCoords.y = n)
            }
            player.x = this.spawnCoords.x, player.y = this.spawnCoords.y;
            var r = Item.create(ItemType.TatteredShirt);
            r.equipped = EquipType.Chest, ui.setEquipSlot(r.equipped, r.id, !0);
            var s = Item.create(ItemType.TatteredPants);
            if (s.equipped = EquipType.Legs, ui.setEquipSlot(s.equipped, s.id, !0), this.dailyChallenge) player.dexterity = Math.floor(5 * Utilities.Random.nextFloat() + 80), player.strength = Math.floor(2 * Utilities.Random.nextFloat() + 45), player.starvation = Math.floor(2 * Utilities.Random.nextFloat() + 15), player.dehydration = Math.floor(2 * Utilities.Random.nextFloat() + 15), player.stamina = player.dexterity - Math.floor(20 * Utilities.Random.nextFloat() + 15), player.health = player.strength - Math.floor(10 * Utilities.Random.nextFloat() + 10), player.hunger = player.starvation - Math.floor(4 * Utilities.Random.nextFloat() + 5), player.thirst = player.dehydration - Math.floor(4 * Utilities.Random.nextFloat() + 5), player.monsterSpawner = 50;
            else {
                var l = 0,
                    p = Object.keys(milestoneData);
                for (e = 0; e < p.length; e++) {
                    var d = p[e];
                    milestoneData[d].amount === -1 && l++
                }
                l >= 1 && ui.displayMessage(Message.PastExperiencesProvideBenefits, MessageType.Stat), player.dexterity = Math.floor(Utilities.Random.nextFloat() * (10 + l) + 80), player.strength = Math.floor(Utilities.Random.nextFloat() * (5 + l) + 45), player.starvation = Math.floor(Utilities.Random.nextFloat() * (5 + l) + 15), player.dehydration = Math.floor(Utilities.Random.nextFloat() * (5 + l) + 15), player.stamina = player.dexterity - Math.floor(10 * Utilities.Random.nextFloat()), player.health = player.strength - Math.floor(5 * Utilities.Random.nextFloat()), player.hunger = player.starvation - Math.floor(2 * Utilities.Random.nextFloat()), player.thirst = player.dehydration - Math.floor(2 * Utilities.Random.nextFloat());
                for (var u = [], g = Object.keys(player.skills), m = 0; m < g.length; m++) u.push(g[m]);
                var y = u[Math.floor(u.length * Utilities.Random.nextFloat())];
                player.skills[y].core = Math.floor(4 * Utilities.Random.nextFloat() + 8 + l), Item.create(ItemType.LeafBedroll), Math.floor(100 * Utilities.Random.nextFloat() - l) <= 0 && Item.create(ItemType.OrnateCape);
                for (var c = Utilities.Random.randomFromInterval(7, 10 + l), h = 0; h < c - 1; h++) {
                    var T = [ItemType.RedBerries, ItemType.WhiteMushrooms, ItemType.StrippedBark, ItemType.Branch, ItemType.ThistleSeeds, ItemType.LargeRock, ItemType.TreeBark, ItemType.String, ItemType.Twigs, ItemType.LargeRock, ItemType.Bone, ItemType.AnimalSkull, ItemType.Shale, ItemType.PlantRoots, ItemType.SharpRock, ItemType.GrassBlades];
                    Item.create(T[Math.floor(Utilities.Random.nextFloat() * T.length)])
                }
            }
            player.updateDirection(FacingDirection.South), ui.displayMessage(Message.AwakeToFindYourself, MessageType.Stat);
            var f = [ItemType.GlassBottleOfUnpurifiedFreshWater, ItemType.GlassBottleOfPurifiedFreshWater, ItemType.GlassBottleOfDesalinatedWater, ItemType.WaterskinOfUnpurifiedFreshWater, ItemType.WaterskinOfPurifiedFreshWater, ItemType.WaterskinOfDesalinatedWater, ItemType.ClayJugOfUnpurifiedFreshWater, ItemType.ClayJugOfPurifiedFreshWater, ItemType.ClayJugOfDesalinatedWater];
            Item.create(f[Math.floor(Utilities.Random.nextFloat() * f.length)]);
            var v = [ItemType.StoneAxe, ItemType.StoneKnife, ItemType.StoneShovel];
            Item.create(v[Math.floor(Utilities.Random.nextFloat() * v.length)]);
            var I = [ItemType.MortarAndPestle, ItemType.Bandage, ItemType.Waterskin, ItemType.GlassBottle, ItemType.ClayJug, ItemType.FishingRod, ItemType.BarkTorch, ItemType.Bow, ItemType.CordedSling, ItemType.SmallBag];
            Item.create(I[Math.floor(Utilities.Random.nextFloat() * I.length)]);
            for (var S = 0; S < 3; S++) Doodad.updateAll(this.doodads)
        }
        player.fromX = player.x, player.fromY = player.y, player.state = PlayerState.None, ui.updateSkillsDialog(), ui.updateMilestonesDialog(), this.updateCraftTableAndWeight(), Mods.callHook(Mods.Hook.OnGameStart, this.isLoadingSave, this.playedCount), world.layers[player.z] || (player.z = Z_NORMAL), Utilities.Console.log(Source.Game, "Loading world..."), world.load(), Utilities.Console.log(Source.Game, "Loaded world"), Utilities.Console.log(Source.Game, "Updating renderer..."), renderer.updateAll(), Utilities.Console.log(Source.Game, "Renderer updated");
        var M = 20,
            k = 4;
        for (this.fov = new FieldOfView(this.glContext, M, k), this.fov.radius = 15, this.flowField = new FlowField(M), player.calculateEquipmentStats(), this.fov.compute(), this.flowField.update(), this.fadeInAmount = 1, e = 0; e < player.inventory.containedItems.length; e++) {
            var i = player.inventory.containedItems[e];
            if (i.equipped) {
                var b = Item.defines[i.type];
                b && b.onEquip && b.onEquip(i)
            }
        }
        this.updateGame(), ui.switchToScreen(ScreenId.Game), ui.openDialogs(), this.addDelay(Delay.Movement, !0), this.playing = !0, this.playedCount++
    }, e.prototype.deleteMonsters = function(e) {
        var t = this.monsters[e],
            i = this.getTile(t.x, t.y, t.z);
        i && delete i.monsterId, delete this.monsters[e], renderer.computeSpritesInViewport()
    }, e.prototype.resetGameState = function() {
        Utilities.Console.log(Source.Game, "resetGameState", this.slotName, PlayerState[player.state], this.savedHighscore), Mods.callHook(Mods.Hook.OnGameEnd, player.state);
        var e = TitleScreenId.EndGame;
        switch (player.state) {
            case PlayerState.None:
                e = TitleScreenId.Default;
                break;
            case PlayerState.Dead:
                audio.queueEffect(SfxType.Death), ui.displayMessage(Message.YouDied, MessageType.Bad, player.deathBy), ui.displayHint(HintType.Death);
                break;
            case PlayerState.Won:
                this.wonGame = !0, ui.displayMessage(Message.ReturningToCivilizationSetOffAgain, MessageType.Stat)
        }
        player.state !== PlayerState.Dead && player.state !== PlayerState.Won || this.savedHighscore || (this.savedHighscore = !0, this.highscores.push({
            name: this.slotName,
            score: player.score,
            message: player.state === PlayerState.Won ? messages[Message.ReturnedToCivilization] : makeString(Message.Killed, player.deathBy),
            dailyChallenge: this.dailyChallenge,
            date: Date.now()
        })), player.state === PlayerState.Dead ? SaveLoad.deleteSlot(this.slot, function() {}) : this.saveGame(SaveType.BackToMainMenu), this.playing = !1, this.notifier.clear(), audio.updateMusicSpeed(1), Mods.unloadAll(!0), Utilities.Enums.reset(), ui.onGameEnd(player.state === PlayerState.Dead), player.state === PlayerState.Traveling ? this.play(this.slot) : e === TitleScreenId.EndGame ? player.state === PlayerState.Won ? ui.switchToScreen(ScreenId.Title, e) : setTimeout(function() {
            ui.switchToScreen(ScreenId.Title, e)
        }, 2e3) : ui.switchToScreen(ScreenId.Title)
    }, e.prototype.initializeGameState = function(e) {
        void 0 === e && (e = !1), Utilities.Console.log(Source.Game, "initializeGameState", e), this.version = gameVersion, this.saveVersion = gameVersion, this.isLoadingSave = !1, e || (this.slotName = this.dailyChallenge ? messages[Message.DailyChallengeMode] : makeString(Message.DefaultGameName, this.slot + 1)), this.tile = [], this.tileData = [], this.tileContainers = [], this.monsters = [], this.doodads = [], this.tileEvents = [], this.corpses = [], this.time = 0, this.nextProcessInput = 0, this.turnFinishTime = 0, this.turnProgress = 0, this.turnProgressCompleted = !1, this.healthRegen = 80, this.hintIndex = 0, this.hungerRegen = 110, this.moveAnim = 0, this.messageTimer = 125, this.saveClear = !1, this.playing = !1, this.savedHighscore = !1, this.wonGame = !1, this.staminaRegen = 10, this.thirstRegen = 80, this.updateRender = !1, this.walkSoundCounter = 0, this.raft = null, this.fillCount = 0, this.fillTile = [], this.unloading = !1, this.spawnCoords = {
            x: 0,
            y: 0
        }, this.fadeInAmount = 0, this.contaminatedWater = [], this.dayNight = 0, this.dayNightSwitch = 0, this.particleSystem.clear(), e ? world.resetExploredMap() : (this.items = [], ui.initializeGameState()), Utilities.Enums.initializeGameState(), "undefined" != typeof gc && gc()
    }, e.prototype.checkUnderPlayer = function(e, t, i, a) {
        void 0 === i && (i = !0), void 0 === a && (a = !1);
        var n;
        if (n = e ? this.getTile(player.x + player.direction.x, player.y + player.direction.y, player.z) : this.getTile(player.x, player.y, player.z)) {
            if (void 0 !== n.doodadId) {
                var o = this.doodads[n.doodadId],
                    r = Doodad.defines[o.type];
                if (r.fire) this.getBurned();
                else if (r.damage) {
                    var s = r.damage + Utilities.Random.randomFromInterval(player.strength / 30, player.strength / 15) - player.defense.base + Math.floor(player.skills[SkillType.Parrying].percent / 10);
                    Item.damageEquipment(), s >= 1 ? (player.damage(-s, messages[Message.BySteppingOnA] + this.getName(r)), ui.displayMessage(Message.SteppingOnHasInjuredYouForDamage, MessageType.Bad, this.getName(r), s)) : ui.displayMessage(Message.ArmorProtectedFromInjuryAgainst, MessageType.None, this.getName(r))
                } else if (r.trap) {
                    var l = Math.ceil(100 * Utilities.Random.nextFloat());
                    if (player.skills[SkillType.Trapping].percent <= l - 50) {
                        var p = Math.floor(6 * Utilities.Random.nextFloat() + 2) - Math.floor(player.skills[SkillType.Trapping].percent / 20);
                        Item.damageEquipment(), p >= 1 ? (player.skillGain(SkillType.Trapping, .1, !1), player.damage(-p, messages[Message.BySteppingOnTrap]), ui.displayMessage(Message.InjuredFromTrap, MessageType.Bad)) : ui.displayMessage(Message.SetTrapOffButNoDamage);
                        var d = Doodad.defines[o.type].resource;
                        if (d) {
                            var u = Item.create(d[0].item, o.quality, Item.getTileContainer(o.x, o.y, o.z));
                            u.minDur = o.minDur - 1, u.maxDur = o.maxDur, Doodad.remove(o)
                        }
                    } else ui.displayMessage(Message.MoveOverTrapButDoNotSetOff)
                } else Doodad.checkForTrampling(this.doodads[n.doodadId]);
                r.causesStatus && Doodad.causeStatus(r)
            }
            if (void 0 !== n.eventId) {
                var g = this.tileEvents[n.eventId];
                this.getBurned();
                var m = Math.ceil(100 * Utilities.Random.nextFloat()),
                    y = Math.floor(player.skills[SkillType.Camping].percent / 4);
                m + y >= 75 ? g.spread -= 5 : g.spread += 5, g.spread <= -1 && (ui.displayMessage(Message.TrampledFire), TileEvent.remove(n.eventId))
            }
            var c = n;
            if (t && (this.options.autoPickup || e || a) && c.containedItems && c.containedItems.length > 0) {
                var h = c.containedItems[c.containedItems.length - 1];
                Item.moveToContainer(h, player.inventory), ui.displayMessage(Message.YouPickedUp, MessageType.None, this.getName(Item.defines[h.type])), this.addDelay(Delay.LongPause), c.containedItems.length >= 3 && ui.displayHint(HintType.FastPickup)
            }
            t && i && !e && Utilities.TileHelpers.getType(n) === TerrainType.CaveEntrance && player.nextX !== -1 && (this.particleSystem.clear(), player.z === Z_NORMAL ? (this.setPlayerZ(Z_CAVE), ui.displayHint(HintType.CaveDarkness)) : this.setPlayerZ(Z_NORMAL))
        }
    }, e.prototype.setPlayerZ = function(e) {
        this.fov.compute(), player.z = e, this.particleSystem.clear(), this.fov.compute(), this.updateGame()
    }, e.prototype.shouldRender = function() {
        var e = Mods.callHook(Mods.Hook.ShouldRender);
        return null === e || void 0 === e ? 65535 : e
    }, e.prototype.inspect = function(e, t, i) {
        void 0 === i && (i = player.z);
        var a = this.getTile(e, t, i);
        return a ? this.inspectTile(a) : []
    }, e.prototype.inspectTile = function(e) {
        var t = [],
            i = Utilities.TileHelpers.getType(e);
        if (t.push({
            type: InspectType.Tile,
            messagePack: {
                message: Message.YouSee,
                args: [this.getName(terrains[i])]
            }
        }), void 0 !== e.monsterId) {
            var a = e.monsterId,
                n = this.monsters[a];
            t.push({
                type: InspectType.Monster,
                messagePack: {
                    message: Message.YouSee,
                    type: n.aberrant ? MessageType.Bad : MessageType.None,
                    args: [this.getName(monsters[n.type])]
                }
            }), t.push({
                type: InspectType.Monster,
                messagePack: this.getMonsterInspectMessage(n)
            })
        }
        if (void 0 !== e.doodadId && (t = t.concat(Doodad.inspect(this.doodads[e.doodadId]))), void 0 !== e.eventId) {
            var o = this.tileEvents[e.eventId];
            t.push({
                messagePack: {
                    message: Message.YouSee,
                    args: [TileEvent.tileEvents[o.type].name]
                }
            }), t.push({
                messagePack: {
                    message: this.getFireMessage(o.decay)
                }
            })
        }
        if (void 0 !== e.corpseIds) {
            for (var r = "", s = 0; s < e.corpseIds.length; s++) r += this.getName(corpses[this.corpses[e.corpseIds[s]].type]) + ", ";
            r = r.slice(0, -2), t.push({
                messagePack: {
                    message: Message.YouSee,
                    args: [r]
                }
            })
        }
        var l = e,
            p = l.containedItems;
        return p && p.length > 0 && t.push({
            type: InspectType.Items,
            messagePack: {
                message: Message.YouSee,
                args: [Item.getItemsString(p)]
            }
        }), t
    }, e.prototype.getMonsterInspectMessage = function(e) {
        var t = Math.floor(e.hp / e.maxhp * 100),
            i = player.skills[SkillType.Anatomy].percent;
        return i <= 25 ? t >= 50 ? {
            message: Message.CreatureAppearsHealthy
        } : {
            message: Message.CreatureAppearsUnhealthy
        } : i <= 50 ? t >= 66 ? {
            message: Message.CreatureSeemsUnimpaired
        } : t >= 33 ? {
            message: Message.CreatureSeemsHurt
        } : {
            message: Message.CreatureSeemsInjured
        } : i <= 75 ? t >= 75 ? {
            message: Message.CreatureLooksHealthyAndUndamaged
        } : t >= 50 ? {
            message: Message.CreatureLooksBarelyHurt
        } : t >= 25 ? {
            message: Message.CreatureLooksInjured
        } : {
            message: Message.CreatureLooksSeverelyDamaged
        } : {
            message: Message.CreatureIsAtPercentHealth,
            type: MessageType.None,
            args: [t]
        }
    }, e.prototype.placeCorpse = function(e) {
        e.decay = corpses[e.type].decay, this.corpses.push(e);
        var t = this.getTile(e.x, e.y, e.z);
        void 0 === t.corpseIds && (t.corpseIds = []), t.corpseIds.push(this.corpses.length - 1)
    }, e.prototype.placeTileEvent = function(e) {
        this.tileEvents.push(e);
        var t = this.getTile(e.x, e.y, e.z);
        t.eventId = this.tileEvents.length - 1, world.updateTile(e.x, e.y, e.z, t)
    }, e.prototype.damageMonster = function(e, t, i, a, n) {
        var o = this.monsters[e].type,
            r = monsters[o],
            s = this.monsters[e].x,
            l = this.monsters[e].y,
            p = this.monsters[e].z,
            d = Mods.callHook(Mods.Hook.OnMonsterDamage, e, this.monsters[e], t, i, a);
        if (void 0 !== d) return d;
        var u = this.fov.canSeeTile(s, l),
            g = monsters[o].defense.base;
        game.monsters[e].aberrant && (g *= Math.max(Math.ceil(player.strength / 25), 2), g > 15 && (g = 15));
        for (var m = monsters[o].defense.resist, y = 0, c = "", h = monsters[o].defense.vulnerable, T = 0, f = "", v = !1, I = 1; I < DamageType.Last; I <<= 1) {
            if (i & I && m[I]) {
                var S = m[I];
                switch (S) {
                    case 99:
                        a && ui.displayMessage(Message.DidNotSeemToBeHurting, MessageType.Bad, a, game.getName(monsters[o])), v = !0;
                        break;
                    case 100:
                        a && ui.displayMessage(Message.SeemsToHaveDrawnEnergy, MessageType.Bad, game.getName(monsters[o], TextCase.Sentence), a), this.monsters[e].hp += t, this.monsters[e].hp > this.monsters[e].maxhp && (this.monsters[e].hp = this.monsters[e].maxhp), this.notifier.addStat(this.monsters[e].x, this.monsters[e].y, StatType.EnemyHealth, t), audio.queueEffect(SfxType.Miss, 0, this.monsters[e].aberrant ? .5 : 1), v = !0;
                        break;
                    default:
                        c += fullDamageType(I) + ", ", y += S
                }
            }
            i & I && h[I] && (f += fullDamageType(I) + ", ", T += h[I])
        }
        var M = t + T,
            k = M - (g + y),
            b = "";
        if (T && (b += makeString(Message.DamageAppearedEffective, f.slice(0, -2))), y && (T && (b += " "), b += makeString(Message.DamageAppearedIneffective, c.slice(0, -2))), k <= 0 && !v) {
            k = 0;
            var w = Math.ceil(100 * Utilities.Random.nextFloat());
            w <= 10 ? k = 1 : a && ui.displayMessage(Message.FailedToCauseDamage, MessageType.Bad, game.getName(monsters[o]), a, b)
        }
        if (k >= 1 && !v) {
            this.monsters[e].hp = this.monsters[e].hp - k, a && ui.displayMessage(Message.HitForDamage, MessageType.Attack, game.getName(monsters[o]), k, a, b), o === MonsterType.Slime && 0 === Math.floor(9 * Utilities.Random.nextFloat()) && (s = Math.floor(Utilities.Random.nextFloat() + this.monsters[e].x - Utilities.Random.nextFloat()), l = Math.floor(Utilities.Random.nextFloat() + this.monsters[e].y - Utilities.Random.nextFloat()), null !== this.spawnMonster(MonsterType.Slime, s, l, player.z) && u && ui.displayMessage(Message.HasSplit, MessageType.Bad, this.getName(monsters[o], TextCase.Sentence)));
            var D = {
                r: 0,
                g: 0,
                b: 0
            };
            this.monsters[e].aberrant && r.aberrantBlood ? D = {
                r: r.aberrantBlood[0],
                g: r.aberrantBlood[1],
                b: r.aberrantBlood[2]
            } : r.blood ? D = {
                r: r.blood[0],
                g: r.blood[1],
                b: r.blood[2]
            } : (D = {
                r: 210,
                g: 0,
                b: 0
            }, 0 === Math.floor(10 * Utilities.Random.nextFloat()) && this.placeCorpse({
                type: MonsterType.Blood,
                x: s,
                y: l,
                z: p
            })), this.createParticles(s, l, D.r, D.g, D.b), this.notifier.addStat(game.monsters[e].x, game.monsters[e].y, StatType.EnemyHealth, -k), audio.queueEffect(SfxType.MonsterHit, 0, this.monsters[e].aberrant ? .5 : 1)
        }
        if (this.monsters[e].hp > 0) return null;
        if (a && ui.displayMessage(Message.YouHaveKilled, MessageType.None, this.getName(r)), n || this.monsters[e].respawned || (player.addMilestone(MilestoneType.Hunter), player.addMilestone(MilestoneType.Extincteur)), !this.monsters[e].respawned) {
            var C = void 0;
            if (this.monsters[e].loot) {
                var F = this.monsters[e].loot;
                this.monsters[e].aberrant && o === MonsterType.LivingMushroom && (F = [ItemType.SpottedRedMushroom]);
                for (var R = 0; R < F.length; R++) C = Item.create(F[R], ItemQuality.Random, Item.getTileContainer(s, l, p))
            }
            if (r.lootGroup) {
                var A = Item.lootGroup[r.lootGroup][Math.floor(Utilities.Random.nextFloat() * Item.lootGroup[r.lootGroup].length)];
                C = Item.create(A, ItemQuality.Random, Item.getTileContainer(s, l, p))
            }
            if (this.monsters[e].aberrant) {
                player.addMilestone(MilestoneType.Abnormalizer);
                var B = Math.floor(Utilities.Random.nextFloat() * (Utilities.Enums.getOfficialMax(ItemType) - 1)) + 1;
                C = Item.create(B, ItemQuality.Random, Item.getTileContainer(s, l, p)), u && ui.displayMessage(Message.AberrantCreatureDroppedItem, MessageType.Good, this.getName(Item.defines[B]))
            }
        }
        if (o !== MonsterType.Cod && o !== MonsterType.Blindfish && corpses[o]) {
            var L = {
                type: o,
                x: s,
                y: l,
                z: p,
                aberrant: !1,
                decay: corpses[o].decay
            };
            this.monsters[e].aberrant && (L.aberrant = !0), this.placeCorpse(L)
        }
        return o === MonsterType.JellyCube ? this.spawnMonster(MonsterType.Slime, s, l, p) : o === MonsterType.Drake && player.addMilestone(MilestoneType.DragonSlayer), player.updateMalignity(r.malignity), Mods.callHook(Mods.Hook.OnMonsterDeath, e, this.monsters[e]), this.deleteMonsters(e), k
    }, e.prototype.blockMove = function() {
        this.moveAnim = 1 - this.moveAnim, this.addDelay(Delay.ShortPause), this.updateGame()
    }, e.prototype.makeCaveEntrance = function() {
        if (player.z === Z_CAVE) return null;
        var e = {
                x: player.x + player.direction.x,
                y: player.y + player.direction.y
            },
            t = {
                x: 0,
                y: 0
            };
        for (t.x = e.x - 1; t.x < e.x + 2; t.x++)
            for (t.y = e.y - 1; t.y < e.y + 2; t.y++)
                if (Utilities.TileHelpers.getType(this.getTile(t.x, t.y, Z_NORMAL)) === TerrainType.CaveEntrance) return null;
        if (0 === Math.floor(40 * Utilities.Random.nextFloat())) {
            this.addDelay(Delay.Collision), ui.displayMessage(Message.DiscoveredCaveEntrance, MessageType.Good), this.changeTile({
                type: TerrainType.CaveEntrance
            }, e.x, e.y, player.z, !1), this.changeTile({
                type: TerrainType.CaveEntrance
            }, e.x, e.y, Z_CAVE, !1);
            var i = this.getTile(e.x, e.y, Z_CAVE).doodadId;
            return void 0 !== i && Doodad.damage(this.doodads[i], !0), TerrainType.CaveEntrance
        }
        return null
    }, e.prototype.findUnique = function(e, t) {
        for (var i, a = [], n = e.slice().sort(), o = t.slice().sort(), r = !1, s = 0; s < n.length; s++) {
            i = n.shift();
            for (var l = o.length - 1; l >= 0 && !r; l--) o[l] === i && (o.splice(l, 1), r = !0);
            r || a.push(i), r = !1
        }
        return a
    }, e.prototype.updateCraftTableAndWeightNextTurn = function() {
        this.shouldUpdateCraftTableAndWeight = !0
    }, e.prototype.hasDelay = function() {
        return this.time < this.nextProcessInput
    }, e.prototype.addDelay = function(e, t) {
        t ? this.nextProcessInput = this.time + e * this.interval : this.time >= this.nextProcessInput ? this.nextProcessInput = this.time + e * this.interval : this.nextProcessInput += e * this.interval
    }, e.prototype.createParticles = function(e, t, i, a, n, o) {
        void 0 === o && (o = 1), this.fov.canSeeTile(e, t) && this.particleSystem.spawn(e, t, i, a, n, o)
    }, e.prototype.spawnMonsterFromGroup = function(e, t, i, a, n, o) {
        var r = [],
            s = 0;
        switch (e) {
            case MonsterSpawnGroup.Guardians:
                s = 15, r = [MonsterType.Slime, MonsterType.GiantSpider, MonsterType.GiantRat, MonsterType.Bear, MonsterType.GreyWolf, MonsterType.JellyCube, MonsterType.Imp, MonsterType.FireElemental, MonsterType.Skeleton, MonsterType.PirateGhost, MonsterType.Hobgoblin, MonsterType.Kraken, MonsterType.Harpy];
                break;
            case MonsterSpawnGroup.Water:
                r = a === Z_CAVE ? [MonsterType.Blindfish, MonsterType.Blindfish, MonsterType.Kraken] : player.getMalignity() < 0 ? [MonsterType.Cod] : player && player.getMalignity() >= monsters[MonsterType.Kraken].spawnMalignity ? [MonsterType.Cod, MonsterType.Cod, MonsterType.Shark, MonsterType.Kraken] : [MonsterType.Cod, MonsterType.Cod, MonsterType.Cod, MonsterType.Shark];
                break;
            case MonsterSpawnGroup.Any:
                if (a === Z_CAVE) s = 3, r = [MonsterType.LivingRock, MonsterType.Zombie, MonsterType.Imp, MonsterType.GiantSpider, MonsterType.VampireBat, MonsterType.Rat, MonsterType.GiantRat, MonsterType.Skeleton, MonsterType.PirateGhost, MonsterType.Harpy];
                else if (player && this.dayNight >= .8 && player.getMalignity() > 0) s = 3, r = [MonsterType.VampireBat, MonsterType.Zombie, MonsterType.GiantSpider, MonsterType.GiantRat];
                else {
                    s = 1;
                    for (var l = 0; l < monsters.length; l++) {
                        var p = monsters[l];
                        if (p && p.spawnTiles !== MonsterSpawnableTiles.None) {
                            var d = p.spawnMalignity;
                            (d || 0 === d) && (player.getMalignity() >= d || p.spawnOnNegativeMalignity) && r.push(l)
                        }
                    }
                }
        }
        if (Mods.callHook(Mods.Hook.OnSpawnMonsterFromGroup, e, r, t, i, a) === !1) return null;
        if (r.length > 0) {
            var l = r[Math.floor(Utilities.Random.nextFloat() * r.length)];
            return s = 100 - s, 0 === Math.floor(Utilities.Random.nextFloat() * s) && (o = !0), player.getMalignity() < 0 && (o = !1), this.spawnMonster(l, t, i, a, n, o)
        }
        return null
    }, e.prototype.spawnMonster = function(e, t, i, a, n, o) {
        var r = this.getTile(t, i, a);
        if (!r) return null;
        var s = !1;
        if (void 0 !== r.doodadId) {
            var l = this.doodads[r.doodadId];
            Doodad.defines[l.type] && Doodad.defines[l.type].blockMove && (s = !0), Doodad.defines[l.type] && Doodad.defines[l.type].fire && e !== MonsterType.FireElemental && (s = !0)
        }
        if (void 0 !== r.eventId && e !== MonsterType.FireElemental && (s = !0), player && t === player.x && i === player.y && a === player.z || void 0 !== r.monsterId || s && !n) return null;
        if (e === MonsterType.Shark && a === Z_CAVE) return null;
        var p = monsters[e].spawnTiles;
        if (!n && p !== MonsterSpawnableTiles.None && spawnableTiles[p].indexOf(Utilities.TileHelpers.getType(r)) === -1) return null;
        var d = Math.floor(Utilities.Random.nextFloat() * (monsters[e].maxhp - monsters[e].minhp) + monsters[e].minhp),
            u = !1;
        o && (d *= Math.max(Math.ceil(player.strength / 25), 2), u = !0);
        var g = [],
            m = monsters[e].loot;
        if (m)
            for (var y in m) {
                var c = m[y],
                    h = c.chance;
                h ? Math.ceil(100 * Utilities.Random.nextFloat()) <= h && g.push(c.item) : g.push(c.item)
            }
        this.monsters.push({
            type: e,
            fromX: t,
            fromY: i,
            x: t,
            y: i,
            z: a,
            direction: FacingDirection.South,
            hp: d,
            maxhp: d,
            loot: g,
            ai: monsters[e].ai,
            anim: 0,
            aberrant: u
        });
        var T = this.monsters.length - 1;
        return this.getTile(t, i, a).monsterId = T, T
    }, e.prototype.makeMiniMap = function(e, t, i, a) {
        var n = 38,
            o = 456,
            r = o / n,
            s = this.glContext;
        if (!this.cartographyTexture) {
            var l = s.createTexture();
            if (!l) return;
            this.cartographyTexture = l, s.bindTexture(s.TEXTURE_2D, this.cartographyTexture), s.texParameteri(s.TEXTURE_2D, s.TEXTURE_MAG_FILTER, s.NEAREST), s.texParameteri(s.TEXTURE_2D, s.TEXTURE_MIN_FILTER, s.NEAREST), s.texParameteri(s.TEXTURE_2D, s.TEXTURE_WRAP_S, s.CLAMP_TO_EDGE), s.texParameteri(s.TEXTURE_2D, s.TEXTURE_WRAP_T, s.CLAMP_TO_EDGE), s.texImage2D(s.TEXTURE_2D, 0, s.RGBA, o, o, 0, s.RGBA, s.UNSIGNED_BYTE, void 0)
        }
        var p = s.createFramebuffer();
        s.bindFramebuffer(s.FRAMEBUFFER, p), s.framebufferTexture2D(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, this.cartographyTexture, 0);
        var d = o / (n * WorldRenderer.getSubTileSize() * 2);
        s.viewport(0, 0, o, o), s.clearColor(98 / 255, 67 / 255, 30 / 255, 1), s.clear(s.COLOR_BUFFER_BIT), s.enable(s.BLEND), s.blendFunc(s.SRC_ALPHA, s.ONE_MINUS_SRC_ALPHA), renderer.layers[i].renderFullbright(e - .5, t - .5, d, o, o), renderer.layers[i].postRenderFullbright(e - .5, t - .5, d, o, o);
        var u = new Uint8Array(o * o * 4);
        s.readPixels(0, 0, o, o, s.RGBA, s.UNSIGNED_BYTE, u), s.deleteFramebuffer(p), s.bindFramebuffer(s.FRAMEBUFFER, null);
        var g, m, y = this.mapContext.createImageData(o, o);
        for (g = 0; g < o; g++)
            for (m = 0; m < o; m++) {
                var c = 4 * (g * o + m),
                    h = 4 * ((o - g) * o + m);
                y.data[c] = u[h], y.data[c + 1] = u[h + 1], y.data[c + 2] = u[h + 2], y.data[c + 3] = u[h + 3]
            }
        if (this.mapContext.putImageData(y, 0, 0), a) {
            for (this.mapContext.fillStyle = "#000000", m = 0; m < n; m++)
                for (g = 0; g < n; g++) {
                    var T = Math.ceil(100 * Utilities.Random.nextFloat());
                    player.skills[SkillType.Cartography].percent <= T - 50 && this.mapContext.fillRect(m * r, g * r, r, r)
                }
            this.mapContext.fillStyle = "#00ff00", this.mapContext.fillRect(o / 2, o / 2, r, r)
        }
        ui.openMapDialog()
    }, e.prototype.getBlackness = function() {
        return this.fadeInAmount ? 1 - this.fadeInAmount : 1
    }, e.prototype.getAmbientLightLevel = function() {
        var e = 1 - this.dayNight;
        return player.z === Z_CAVE && (e = .05), Mods.callHookWithDefault(Mods.Hook.GetAmbientLightLevel, e, e)
    }, e.prototype.getLightSourceAt = function(e, t) {
        var i = this.getTile(e, t);
        if (!i) return 0;
        var a = 0;
        if (void 0 !== i.doodadId) {
            var n = Doodad.defines[this.doodads[i.doodadId].type];
            n && n.fire && (a = Math.floor(12 * Utilities.Random.nextFloat() + 119))
        }
        if (void 0 !== i.eventId && (a = Math.floor(12 * Utilities.Random.nextFloat() + 119)), void 0 !== i.monsterId) {
            var o = i.monsterId;
            this.monsters[o].type === MonsterType.FireElemental && (a = Math.max(Math.floor(12 * Utilities.Random.nextFloat() + 85), a))
        }
        if (player.z === Z_CAVE && Utilities.TileHelpers.getType(i) === TerrainType.CaveEntrance && (a = Math.max(6 * (1 - this.dayNight) * 17, a)), e === player.x && t === player.y) {
            var r = 0;
            player.lightBonus && (r = 34 + 12 * Utilities.Random.nextFloat() + 17 * player.lightBonus), a = Math.max(Math.floor(r), a)
        }
        return a
    }, e.prototype.isOnScreen = function(e, t, i) {
        return i === player.z && Utilities.isInBound2Wrapped(renderer.getViewportBounds(), e, t)
    }, e.prototype.changeTile = function(e, t, i, a, n) {
        if (t = this.getWrappedCoord(t), i = this.getWrappedCoord(i), void 0 !== e.type && null !== e.type) {
            var o = Math.floor(3 * Utilities.Random.nextFloat()),
                r = this.getTile(t, i, a);
            if (!r) return;
            terrains[Utilities.TileHelpers.getType(r)] && terrains[Utilities.TileHelpers.getType(r)].noGfxSwitch && (o = Utilities.TileHelpers.getGfx(r)), this.tileData[t] = this.tileData[t] || [], this.tileData[t][i] = this.tileData[t][i] || [], this.tileData[t][i][a] = this.tileData[t][i][a] || [];
            var s = this.tileData[t][i][a];
            if (n) Utilities.TileHelpers.getType(r) === TerrainType.Grass ? s.length > 0 ? s[0].type = TerrainType.Dirt : s.push({
                type: TerrainType.Dirt
            }) : s.length <= 0 && s.push({
                type: Utilities.TileHelpers.getType(r)
            }), s.unshift(e);
            else {
                s.length <= 0 && s.push(e), s[0].type = e.type, s[0].gfx = o;
                var l = terrains[e.type].strength,
                    p = terrains[e.type].durability;
                null !== s[0].strength && void 0 !== s[0].strength && 0 !== s[0].strength || void 0 === l || (s[0].strength = l), null !== s[0].minDur && void 0 !== s[0].minDur || null === p || void 0 === p || (s[0].minDur = p), null !== s[0].maxDur && void 0 !== s[0].maxDur || null === p || void 0 === p || (s[0].maxDur = p)
            }
            Utilities.TileHelpers.setGfx(r, o), Utilities.TileHelpers.setType(r, e.type), world.updateTile(t, i, a, r)
        }
    }, e.prototype.checkMonsterMove = function(e, t, i, a, n, o) {
        var r = monsters[t.type];
        i = this.getWrappedCoord(i), a = this.getWrappedCoord(a);
        var s = this.getTile(i, a, n),
            l = Mods.callHook(Mods.Hook.CanMonsterMove, e, t, s, o);
        if (l === !1) return 1;
        if (l === !0) return 0;
        if (o === MoveType.None) return 2;
        if (void 0 !== s.monsterId) return 3;
        if (i === player.x && a === player.y && n === player.z && !r.fishable) return 4;
        var p = terrains[Utilities.TileHelpers.getType(s)];
        if (p.isMountain && (o & MoveType.Mountain) !== MoveType.Mountain) return 5;
        if ((o & MoveType.Flying) === MoveType.Flying) return 0;
        if (p.shallowWater && ((o & MoveType.ShallowWater) !== MoveType.ShallowWater || t.type === MonsterType.FireElemental)) return 6;
        if (p.water && ((o & MoveType.Water) !== MoveType.Water || t.type === MonsterType.FireElemental)) return 7;
        if (!p.water && !p.shallowWater && (o & MoveType.Land) !== MoveType.Land) return 8;
        if (void 0 !== s.doodadId) {
            var d = s.doodadId,
                u = this.doodads[d];
            if ((Doodad.defines[u.type].fire || Doodad.defines[u.type].blockMove) && !r.breaksWalls) return 9
        }
        return void 0 !== s.eventId ? 10 : p.skill === SkillType.Lumberjacking && (o & MoveType.Tree) !== MoveType.Tree ? 11 : this.isTileFull(i, a, n) ? 12 : 0
    }, e.prototype.isTileFull = function(e, t, i) {
        void 0 === i && (i = player.z);
        var a = this.getTile(e, t, i);
        return !a || this.isTileFullEx(a)
    }, e.prototype.isTileFullEx = function(e) {
        var t = e;
        return t.containedItems && t.containedItems.length >= 12
    }, e.prototype.isTileEmpty = function(e, t, i) {
        void 0 === i && (i = player.z);
        var a = this.getTile(e, t, i);
        if (!a) return !1;
        var n = a;
        return !(!terrains[Utilities.TileHelpers.getType(a)].passable || void 0 !== a.doodadId || n.containedItems && n.containedItems.length > 0 || void 0 !== a.monsterId || void 0 !== a.corpseIds || void 0 !== a.eventId || player.x === e && player.y === t && player.z === i)
    }, e.prototype.contaminateWater = function() {
        if (0 !== this.contaminatedWater.length) {
            for (var e = []; this.contaminatedWater.length > 0;) {
                var t = this.contaminatedWater.pop();
                if (!t) return;
                var i = world.layers[t.z],
                    a = i.getTileType(t.x, t.y);
                if (!(a > TerrainType.ShallowFreshWater)) {
                    a > TerrainType.ShallowSeawater && this.changeTile({
                        type: a - 3
                    }, t.x, t.y, t.z, !1);
                    var n = i.getTileType(t.x + 1, t.y);
                    n > TerrainType.ShallowSeawater && n <= TerrainType.ShallowFreshWater && e.push({
                        x: t.x + 1,
                        y: t.y,
                        z: t.z
                    }), n = i.getTileType(t.x - 1, t.y), n > TerrainType.ShallowSeawater && n <= TerrainType.ShallowFreshWater && e.push({
                        x: t.x - 1,
                        y: t.y,
                        z: t.z
                    }), n = i.getTileType(t.x, t.y + 1), n > TerrainType.ShallowSeawater && n <= TerrainType.ShallowFreshWater && e.push({
                        x: t.x,
                        y: t.y + 1,
                        z: t.z
                    }), n = i.getTileType(t.x, t.y - 1), n > TerrainType.ShallowSeawater && n <= TerrainType.ShallowFreshWater && e.push({
                        x: t.x,
                        y: t.y - 1,
                        z: t.z
                    })
                }
            }
            this.contaminatedWater = e
        }
    }, e.prototype.passTurn = function(e) {
        if (this.turnFinishTime = this.time + Delay.Movement * this.interval, this.turnProgressCompleted = !1, player.fromX = player.x, player.fromY = player.y, player.nextX !== -1 && (player.x = player.nextX, player.y = player.nextY), this.contaminateWater(), e === TurnType.DontEnterCaves ? this.checkUnderPlayer(!1, !0, !1) : e === TurnType.CheckUnderPlayer ? this.checkUnderPlayer(!1, !0) : e === TurnType.ForcePickUp ? this.checkUnderPlayer(!1, !0, !0, !0) : this.checkUnderPlayer(), this.shouldUpdateCraftTableAndWeight && this.updateCraftTableAndWeight(), this.moveAnim = 1 - this.moveAnim, player.nextX = -1, player.nextY = -1, player.staminaCheck(), player.staminaTimer++, player.healthTimer++, player.hungerTimer++, player.thirstTimer++, player.monsterSpawnTimer++, player.turns++, player.addMilestone(MilestoneType.Survivor), player.staminaTimer >= this.staminaRegen && (player.weight <= .9 * (player.strength + player.weightBonus) || e === TurnType.Resting) && (player.stamina += 1, player.staminaTimer = 0), !player.status.bleeding && !player.status.poisoned && !player.status.burned && player.healthTimer >= this.healthRegen && (player.health += 1, player.healthTimer = 0), player.hungerTimer >= this.hungerRegen && (player.hunger -= 1, player.hunger < 0 && (player.damage(player.hunger, messages[Message.DueToStarvation]), player.stamina += player.hunger, ui.displayMessage(Message.StarvingToDeath, MessageType.Bad)), player.hungerTimer = 0), player.thirstTimer >= this.thirstRegen && (player.thirst -= 1, player.thirst < 0 && (player.damage(player.thirst, messages[Message.DueToDehydration]), player.stamina += player.thirst, ui.displayMessage(Message.DyingOfDehydration, MessageType.Bad)), player.thirstTimer = 0), player.monsterSpawnTimer >= player.monsterSpawner) {
            var t = this.monsters.reduce(function(e, t) {
                return "undefined" != typeof t ? e + 1 : e
            }, 0);
            if (t >= 300) player.monsterSpawnTimer = 0;
            else {
                var i = void 0,
                    a = void 0,
                    n = Math.floor(4 * Utilities.Random.nextFloat());
                switch (n) {
                    case 0:
                        i = Math.floor(30 * Utilities.Random.nextFloat() + player.x + 10), a = Math.floor(30 * Utilities.Random.nextFloat() + player.y + 10);
                        break;
                    case 1:
                        i = Math.floor(Utilities.Random.nextFloat() * -30 + player.x - 10), a = Math.floor(Utilities.Random.nextFloat() * -30 + player.y - 10);
                        break;
                    case 2:
                        i = Math.floor(30 * Utilities.Random.nextFloat() + player.x + 10), a = Math.floor(Utilities.Random.nextFloat() * -30 + player.y - 10);
                        break;
                    default:
                    case 3:
                        i = Math.floor(Utilities.Random.nextFloat() * -30 + player.x - 10), a = Math.floor(30 * Utilities.Random.nextFloat() + player.y + 10)
                }
                if (!this.fov.canSeeTile(i, a)) {
                    i = this.getWrappedCoord(i), a = this.getWrappedCoord(a);
                    var o = this.getTile(i, a, player.z);
                    o && (0 === Math.floor(2 * Utilities.Random.nextFloat()) && terrains[Utilities.TileHelpers.getType(o)].water ? this.spawnMonsterFromGroup(MonsterSpawnGroup.Water, i, a, player.z) && (player.monsterSpawnTimer = 0) : this.spawnMonsterFromGroup(MonsterSpawnGroup.Any, i, a, player.z) && (player.monsterSpawnTimer = 0))
                }
            }
        }
        if (this.autoSaveTimer++, this.autoSaveTimer >= 5e3 && (ui.displayMessage(Message.AutomaticallySavingGame), this.saveGame(SaveType.InGame), "undefined" != typeof gc && gc(), this.autoSaveTimer = 0), player.stepCounter++, player.stepCounter >= 20) {
            if (Doodad.updateAll(this.doodads), this.corpsesUpdate(), TileEvent.updateAll(this.tileEvents), player.stepCounter = 0, this.dayNight >= .85 ? (this.dayNightSwitch = 1, player.monsterSpawner >= 100 && player.monsterSpawner--) : this.dayNight <= .002 && (this.dayNightSwitch = 0), 0 === this.dayNightSwitch ? this.dayNight >= .825 || this.dayNight <= .175 ? this.dayNight += .002 : this.dayNight += .01 : this.dayNight >= .825 || this.dayNight <= .175 ? this.dayNight -= .002 : this.dayNight -= .01, player.z === Z_NORMAL && this.dayNight >= .65 && ui.displayHint(HintType.Nightfall), player.status.bleeding)
                if (0 === Math.floor(8 * Utilities.Random.nextFloat())) player.status.bleeding = !1, ui.displayMessage(Message.BleedingHasStopped);
                else {
                    var r = Utilities.Random.randomFromInterval(player.strength / 25, player.strength / 10);
                    player.damage(-r, messages[Message.ByBleedingOut]), ui.displayMessage(Message.BleedingToDeathLostHealth, MessageType.Bad, r), this.createParticles(player.x, player.y, 255, 0, 0), 0 === Math.floor(3 * Utilities.Random.nextFloat()) && this.placeCorpse({
                        type: MonsterType.Blood,
                        x: player.x,
                        y: player.y,
                        z: player.z
                    }), player.hungerTimer++, player.thirstTimer++, player.staminaTimer--
                }
            if (player.status.poisoned)
                if (0 === Math.floor(8 * Utilities.Random.nextFloat())) player.status.poisoned = !1, ui.displayMessage(Message.PoisonWorkedItsCourse);
                else {
                    var s = Utilities.Random.randomFromInterval(player.strength / 25, player.strength / 10);
                    player.damage(-s, messages[Message.ByPoisoning]), ui.displayMessage(Message.PoisonedLostHealth, MessageType.Bad, s), player.thirstTimer += 2, player.staminaTimer -= 2
                }
            if (player.status.burned)
                if (0 === Math.floor(10 * Utilities.Random.nextFloat())) player.status.burned = !1, ui.displayMessage(Message.NoLongerFeelPainOBeingfBurned);
                else {
                    var l = Utilities.Random.randomFromInterval(player.strength / 55, player.strength / 45);
                    player.damage(-l, messages[Message.ByBurnInjuries]), ui.displayMessage(Message.FeltBurningPainLostHealth, MessageType.Bad, l)
                }
        }
        var p, d = Math.floor(Utilities.Random.nextFloat() * this.mapSize),
            u = Math.floor(Utilities.Random.nextFloat() * this.mapSize),
            g = this.getTile(d, u, player.z),
            m = Utilities.TileHelpers.getType(g);
        if (m === TerrainType.BarePalmTree) this.changeTile({
            type: TerrainType.PalmTree
        }, d, u, player.z, !1);
        else if (m === TerrainType.BareTree) this.changeTile({
            type: TerrainType.Tree
        }, d, u, player.z, !1);
        else if (m === TerrainType.Tree && this.tileData[d] && this.tileData[d][u] && this.tileData[d][u][player.z] && this.tileData[d][u][player.z].length > 0 && this.tileData[d][u][player.z][0].strength < terrains[TerrainType.Tree].strength) this.tileData[d][u][player.z][0].strength++;
        else if (m === TerrainType.PalmTree && this.tileData[d] && this.tileData[d][u] && this.tileData[d][u][player.z] && this.tileData[d][u][player.z].length > 0 && this.tileData[d][u][player.z][0].strength < terrains[TerrainType.PalmTree].strength) this.tileData[d][u][player.z][0].strength++;
        else if (void 0 !== g.monsterId) {
            var y = g.monsterId;
            p = Math.floor(3 * Utilities.Random.nextFloat()), 0 === p && this.monsters[y].hp < monsters[this.monsters[y].type].maxhp ? this.monsters[y].hp++ : 1 === p ? this.damageMonster(y, 1, DamageType.True, "", !0) : 2 === p && this.damageMonster(y, 999, DamageType.True, "", !0)
        } else if (void 0 !== g.doodadId) {
            var c = this.doodads[g.doodadId];
            Doodad.defines[c.type].spreadMax && (p = Math.floor(3 * Utilities.Random.nextFloat()), 0 === p ? Doodad.remove(c) : 1 === p ? c.spread++ : 2 === p && c.spread >= 1 && c.spread--)
        } else void 0 === g.doodadId && 0 === Math.floor(1e3 * Utilities.Random.nextFloat()) && MapGen.spawnDoodad(m, d, u, player.z, !0);
        Item.decayItems() && this.updateCraftTableAndWeight(), this.flowField.update(), this.monsterMove(e), player.fromX === this.mapSize - 1 && 0 === player.x && (player.fromX = -1), 0 === player.fromX && player.x === this.mapSize - 1 && (player.fromX = this.mapSize), player.fromY === this.mapSize - 1 && 0 === player.y && (player.fromY = -1), 0 === player.fromY && player.y === this.mapSize - 1 && (player.fromY = this.mapSize), Mods.callHook(Mods.Hook.OnTurnStart), this.swimCheck(), ui.tooltipRefresh(), e === TurnType.Resting ? this.updateGame(!0) : (this.fov.compute(), this.updateGame())
    }, e.prototype.updateGame = function(e) {
        e || (this.updateRender = !0, renderer.computeSpritesInViewport()), ui.hideActionsMenu(), this.stats(), player.calculateEquipmentStats(), player.attributes()
    }, e.prototype.removeCorpse = function(e) {
        var t = this.corpses[e].x,
            i = this.corpses[e].y,
            a = this.corpses[e].z,
            n = this.getTile(t, i, a);
        if (n.corpseIds.length > 1) {
            var o = n.corpseIds.indexOf(e);
            o > -1 && n.corpseIds.splice(o, 1)
        } else delete n.corpseIds;
        delete this.corpses[e], world.updateTile(t, i, a, n)
    }, e.prototype.checkAndRemoveBlood = function() {
        var e = this.getTileInFrontOfPlayer(),
            t = 0;
        if (void 0 !== e.corpseIds) {
            for (var i in e.corpseIds) this.corpses[e.corpseIds[i]].type === MonsterType.Blood && t++;
            if (t >= e.corpseIds.length) {
                for (var i in e.corpseIds) delete this.corpses[e.corpseIds[i]];
                return delete e.corpseIds, world.updateTile(player.x + player.direction.x, player.y + player.direction.y, player.z, e), !0
            }
            return !1
        }
        return !0
    }, e.prototype.checkForMobInRange = function(e) {
        for (var t, i, a = {
            id: 0,
            x: 0,
            y: 0,
            z: player.z,
            found: !1,
            obstacle: !1,
            water: !1
        }, n = 0, o = 0, r = null, s = 1; s <= e; s++) {
            if (t = player.x, i = player.y, 1 === player.direction.x ? (n = t + s, o = i) : player.direction.x === -1 ? (n = t - s, o = i) : 1 === player.direction.y ? (n = t, o = i + s) : player.direction.y === -1 && (n = t, o = i - s), n -= this.mapSize * Math.floor(n / this.mapSize), o -= this.mapSize * Math.floor(o / this.mapSize), r = this.getTile(n, o), !r) return a;
            if (!terrains[Utilities.TileHelpers.getType(r)].passable && !terrains[Utilities.TileHelpers.getType(r)].water) return a.x = n, a.y = o, a.obstacle = !0, a;
            if (void 0 !== r.monsterId) return a.id = r.monsterId, a.x = n, a.y = o, a.z = player.z, a.found = !0, a;
            a.x = n, a.y = o, a.z = player.z
        }
        return r && terrains[Utilities.TileHelpers.getType(r)].water && (a.water = !0), a
    }, e.prototype.updateCraftTableAndWeight = function() {
        this.shouldUpdateCraftTableAndWeight = !1;
        var e = this.crafted,
            t = [],
            i = [];
        for (var a in e) {
            var n = parseInt(a, 10);
            if (Item.defines[a] && Item.defines[a].craftable !== !1) {
                var o = Item.defines[a].recipe;
                if (o) {
                    var r = new Item.ItemRecipeRequirementChecker(o, (!1));
                    r.process(player.inventory) ? t.push(n) : i.push(n)
                }
            }
        }
        ui.updateCraftingDialog(t, i);
        for (var s = 0, l = 0; l < player.inventory.containedItems.length; l++) {
            var p = player.inventory.containedItems[l],
                d = Item.defines[p.type];
            d && this.raft !== p.id && (s += p.weight, Item.isContainer(p) && (s += .5 * Item.computeContainerWeight(p)))
        }
        s = Utilities.roundNumber(s, 1);
        var u = Mods.callHook(Mods.Hook.OnUpdateWeight, s);
        void 0 !== u && (s = u), player.weight = s, ui.refreshAttributes()
    }, e.prototype.rangeFinder = function(e, t) {
        0 === e && (e = 1), 0 === t && (t = 1);
        var i = Math.ceil(t / 100 * 6) - 1,
            a = i;
        i > e && (a = e);
        var n = Utilities.Random.randomFromInterval(a, e),
            o = n + i;
        return 1 === e && (o = Math.floor(o / 2)), o < 1 && o++, o
    }, e.prototype.getHeight = function(e, t, i) {
        var a = i * Utilities.Random.nextFloat() - .5 * i;
        return .5 * (e + t) + a
    }, e.prototype.setupSave = function(e) {
        this.tileContainers = [], Item.saveTileReferences(this.tileContainers)
    }, e.prototype.onGlobalSlotLoaded = function(t, i) {
        var a = this;
        Utilities.Console.log(Source.Game, "onGlobalSlotLoaded", i), i && (this.upgradeGlobalSave(e.getVersionInfo(this.lastPlayedVersion)), ui.setFontStyle(), ui.updateWindowMode(), Steamworks.updateZoomFactor(), audio.updateVolume()), ui.setOpacity(), Utilities.Console.log(Source.Game, "Initializing mods"), Mods.initializeMods(function() {
            Utilities.Console.log(Source.Game, "Initialized mods"), a.loadResources(), audio.playMusic();
            var e = Languages.saveData.language;
            if (null !== e && (Languages.getLoaded() && Languages.getLoaded().getName() === e || Languages.load(e) || (Languages.saveData.language = null)), Languages.getLoaded() || Languages.load("English"), requestAnimationFrame(a.gameLoop), $(["images/ui/cover.jpg", "images/ui/death.jpg", "images/ui/win.jpg"]).preload(), ui.switchToScreen(ScreenId.Cover), i && (!a.lastPlayedVersion || 0 === a.lastPlayedVersion.indexOf("2.0."))) {
                for (var t = Mods.getMods(), n = 0; n < t.length; n++) Mods.getType(n) !== Mods.Type.Internal && Mods.getState(n) === Mods.State.Enabled && Mods.setState(n, Mods.State.Disabled);
                ui.displayConfirmDialog(Message.WelcomeToWayward21, [Message.Ok], function() {})
            }
            a.lastPlayedVersion = gameVersion
        })
    }, e.prototype.onSaveLoaded = function() {
        this.upgradeSave(e.getVersionInfo(this.saveVersion)), this.setZoomLevel()
    }, e.prototype.upgradeSave = function(e) {
        var t = !1;
        void 0 !== player.talent && (player.score = player.talent, player.malignityPlus = player.talent, delete player.talent, t = !0), t && Utilities.Console.log(Source.Game, "Upgrading save from " + e.str + " to " + gameVersion), this.saveVersion = gameVersion
    }, e.prototype.upgradeGlobalSave = function(e) {
        for (var t = !1, i = 0, a = this.highscores; i < a.length; i++) {
            var n = a[i];
            void 0 !== n.talent && (n.score = n.talent, delete n.talent, t = !0)
        }
        if (this.options.keyBinds) {
            var o = Object.keys(this.options.keyBinds);
            if (o.length > 0) {
                for (var r = 0, s = o; r < s.length; r++) {
                    var l = s[r],
                        p = parseInt(l, 10),
                        d = this.options.keyBinds[p];
                    this.options.binds[p] = {
                        value: d,
                        type: BindType.Keyboard
                    }
                }
                delete this.options.keyBinds, t = !0
            }
        }
        t && Utilities.Console.log(Source.Game, "Upgrading global save from " + e.str + " to " + gameVersion)
    }, e.prototype.setRaft = function(e) {
        this.raft !== e && (this.raft = e, this.raft ? ui.displayMessage(Message.BeginUsingRaft) : ui.displayMessage(Message.StopUsingRaft), this.updateCraftTableAndWeightNextTurn())
    }, e.prototype.getSerializationProperties = function(e) {
        return ["version", "saveVersion", "seeds", "items", "tileData", "monsters", "tileContainers", "doodads", "tileEvents", "corpses", "contaminatedWater", "savedHighscore", "dayNight", "dayNightSwitch", "raft"]
    }, e.prototype.getBurned = function(e) {
        void 0 === e && (e = !1);
        var t = Utilities.Random.randomFromInterval(player.strength / 20, player.strength / 10) - (player.defense.base + player.defenses[DamageType.Fire]) + Math.floor(player.skills[SkillType.Parrying].percent / 10);
        return Item.damageEquipment(), t >= 1 ? (player.damage(-t, messages[Message.ByBurnInjuries]), e || ui.displayMessage(Message.BadlyBurnedLostHealth, MessageType.Bad, t), this.createParticles(player.x, player.y, 210, 125, 20), player.status.burned || (player.status.burned = !0, ui.displayHint(HintType.Burned)), t) : (ui.displayMessage(Message.NearlyBurnedEquipmentProtectedYou), null)
    }, e.prototype.spawnClawWorm = function() {
        0 === Math.floor(200 * Utilities.Random.nextFloat()) && this.spawnMonster(MonsterType.ClawWorm, player.x + Math.floor(3 * Utilities.Random.nextFloat()) - 1, player.y + Math.floor(3 * Utilities.Random.nextFloat()) - 1, player.z) && ui.displayMessage(Message.StirredUpClawWorm, MessageType.None)
    }, e.prototype.getName = function(e, t, i) {
        void 0 === t && (t = TextCase.None), void 0 === i && (i = !0);
        var a = e.name || "";
        return i && e.prefix && (a = e.prefix + a), e.suffix && (a += e.suffix), Utilities.String.formatCase(a, t)
    }, e.prototype.fireBreath = function(e, t, i, a, n) {
        for (var o = 0; o < 3; o++) {
            var r = e,
                s = t;
            a === FacingDirection.West ? r -= 1 + o : a === FacingDirection.East ? r += 1 + o : a === FacingDirection.North ? s -= 1 + o : a === FacingDirection.South && (s += 1 + o);
            var l = game.getTile(r, s),
                p = terrains[Utilities.TileHelpers.getType(l)];
            if (!p.passable || void 0 !== l.doodadId && !Doodad.defines[game.doodads[l.doodadId].type].flammable || p.water || p.shallowWater) break;
            if (void 0 !== l.monsterId) {
                var d = Utilities.Random.randomFromInterval(4, 6);
                n && game.damageMonster(l.monsterId, d, DamageType.Fire, n, !1)
            }
            game.placeTileEvent(TileEvent.create(TileEvent.Type.Fire, r, s, i)), game.createParticles(r, s, 210, 125, 20)
        }
    }, e.prototype.processInput = function() {
        if (ui.isHelpOverlayShown() || ui.isOptionsOverlayShown()) return void ui.runHotKeys();
        var t, i = null,
            a = 0;
        for (t = 0; t < e.gameMovement.length; t++) {
            var n = e.gameMovement[t];
            if (ui.getMousePlayerDirection() === n.direction || ui.getTouchPlayerDirection() === n.direction) {
                i = n, ui.setTouchPlayerDirection(null);
                break
            }
            var o = ui.getBindDownTime(n.keyBind);
            void 0 !== o && o > 0 && o > a && (i = n, a = o)
        }
        if (null !== i) {
            if (player.facingDirection !== i.direction) {
                var r = player.facingDirection === FacingDirection.West && i.direction === FacingDirection.East || player.facingDirection === FacingDirection.East && i.direction === FacingDirection.West || player.facingDirection === FacingDirection.North && i.direction === FacingDirection.South || player.facingDirection === FacingDirection.South && i.direction === FacingDirection.North;
                if (player.updateDirection(i.direction), !player.isMoving || r) return this.updateGame(), void this.addDelay(Delay.Movement)
            }
            return this.move(i.direction), void(player.isMoving = !0)
        }
        player.isMoving = !1, ui.isBindDown(KeyBind.Idle) || ui.getTouchPlayerDirection() === FacingDirection.None || this.options.mouseMovement && ui.isMouseMovementBlockerVisible() && ui.isBindDown(KeyBind.PrimaryMouse) && ui.getMousePlayerDirection() === FacingDirection.None ? (ui.setTouchPlayerDirection(null), player.nextX = player.x, player.nextY = player.y, this.addDelay(Delay.ShortPause), this.passTurn(TurnType.ForcePickUp)) : ui.runHotKeys()
    }, e.prototype.processMessages = function() {
        if (this.messageTimer--, this.messageTimer <= 0) {
            var e = ui.getMessageCount();
            e > 5 && (ui.removeOldestMessage(), this.messageTimer = 125 - 10 * e)
        }
    }, e.prototype.prePlay = function(e, t) {
        var i = this;
        Utilities.Console.log(Source.Game, "prePlay", e, t), this.isLoadingSave = t, ui.setLoadingMessage(Message.LoadingMods), Utilities.Enums.restore(), Mods.loadAll(function() {
            Item.generateLookups(), Utilities.Console.log(Source.Game, "createWorldRenderer"), i.createWorldRenderer(), Utilities.Console.log(Source.Game, "loadWorldResources"), i.playPostSeed(e)
        })
    }, e.prototype.playPostSeed = function(e) {
        var t = this;
        Utilities.Console.log(Source.Game, "playPostSeed 1"), null !== e && Utilities.Random.setSeed(e), this.seeds.base = Utilities.Random.getSeed(), Utilities.Console.log(Source.Game, "playPostSeed 2", this.seeds.base), this.isLoadingSave || (player = new Player, this.dailyChallenge && (player.malignityPlus = 64e3)), this.loadedResources = !1, this.loadedWorld = !1, this.loadResources(), this.setupWorldResources(), MapGen.generateWorld(!this.isLoadingSave || player.state === PlayerState.Traveling, function() {
            t.postGenerateWorld()
        })
    }, e.prototype.render = function(e) {
        var t = Utilities.lerp(player.fromX, player.x, this.turnProgress),
            i = Utilities.lerp(player.fromY, player.y, this.turnProgress);
        this.updateRender && (this.updateRender = !1, renderer.batchMonsters(), renderer.renderWorld(t, i, player.z), this.fadeInAmount && (this.fadeInAmount = Math.max(this.fadeInAmount - .005, 0), 0 === this.fadeInAmount && delete this.fadeInAmount, this.updateRender = !0));
        var a = this.glContext;
        a.viewport(0, 0, 2 * Math.round(a.canvas.width / 2), 2 * Math.round(a.canvas.height / 2)), a.clear(a.COLOR_BUFFER_BIT), renderer.render(), this.particleSystem.simulate(e) && this.particleSystem.render(t, i), void 0 !== this.debugRenderer && this.debugRenderer.renderDebug(), this.notifier.render(t, i, 2 * WorldRenderer.getSubTileSize(), renderer.getTileScale(), renderer.getViewport().x, renderer.getViewport().y)
    }, e.prototype.move = function(e) {
        player.nextX = player.x, player.nextY = player.y;
        var t = player.directionToMovement(e),
            i = this.getWrappedCoord(t.x + player.x),
            a = this.getWrappedCoord(t.y + player.y),
            n = this.getTile(i, a);
        if (n && Mods.callHook(Mods.Hook.OnMove, i, a, n, e) !== !1 && player.staminaCheck()) {
            if (player.addMilestone(MilestoneType.Explorer, Utilities.TileHelpers.getType(this.getTile(player.x, player.y, player.z))), player.addMilestone(MilestoneType.Explorer, Utilities.TileHelpers.getType(this.getTile(i, a, player.z))), void 0 !== n.monsterId) return this.addDelay(Delay.Collision, !0), Actions.execute(ActionType.Attack, null), void this.passTurn(TurnType.DontEnterCaves);
            if (terrains[Utilities.TileHelpers.getType(n)].gather) return this.options.autoGather ? void Actions.execute(ActionType.Gather, null) : void this.blockMove();
            if (Actions.openDoor()) return void this.blockMove();
            if (void 0 !== n.doodadId) {
                var o = this.doodads[n.doodadId];
                if (void 0 !== Doodad.defines[o.type].weightCapacity) return Actions.openContainer(o, this.getName(Doodad.defines[o.type], TextCase.Title), !1), void this.blockMove();
                if (Doodad.defines[o.type].blockMove && !Doodad.defines[o.type].isLocked) return void this.blockMove();
                if (Doodad.defines[o.type].isLocked) {
                    ui.displayMessage(Message.ObjectIsLocked), Doodad.damage(o), this.createParticles(player.x + player.direction.x, player.y + player.direction.y, 55, 30, 10), player.skillGain(SkillType.Tactics, .1, !1);
                    var r = null,
                        s = null;
                    for (var l in player.inventory.containedItems) {
                        var p = player.inventory.containedItems[l];
                        p.equipped === EquipType.RightHand ? s = p : p.equipped === EquipType.LeftHand && (r = p)
                    }
                    if (!r && s) Item.damage(s);
                    else if (r && !s) Item.damage(r);
                    else if (r && s) Item.damage(0 === Math.floor(2 * Utilities.Random.nextFloat()) ? r : s);
                    else if (!r && !s) {
                        var d = Math.ceil(100 * Utilities.Random.nextFloat());
                        player.skills[SkillType.Tactics].percent <= d - 75 && (ui.displayMessage(Message.HurtHandsHittingWithoutWeapons, MessageType.Bad, this.getName(Doodad.defines[o.type])), player.damage(-1, messages[Message.UsingBareFistsToFight]))
                    }
                    return player.staminaReduction(SkillType.Tactics), player.checkWeight(), this.addDelay(Delay.Collision), void this.passTurn(TurnType.CheckUnderPlayer)
                }
                ui.displayHint(HintType.Doodads)
            }
            void 0 !== n.corpseIds && ui.displayHint(HintType.CorpseCarving);
            var u = SfxType.Walk;
            if ((terrains[Utilities.TileHelpers.getType(n)].water || terrains[Utilities.TileHelpers.getType(n)].shallowWater) && (u = SfxType.Swim), this.walkSoundCounter-- <= 0 && (this.walkSoundCounter = 4, audio.queueEffect(u)), terrains[Utilities.TileHelpers.getType(n)].shallowWater) {
                var g = terrains[Utilities.TileHelpers.getType(n)].particles;
                this.createParticles(player.x + player.direction.x, player.y + player.direction.y, g[0], g[1], g[2])
            }
            null !== this.raft && Item.damage(this.items[this.raft], 1);
            for (var l = 0; l < player.inventory.containedItems.length; l++) {
                var p = player.inventory.containedItems[l];
                if (p.equipped) {
                    var m = Item.defines[p.type];
                    if (m) {
                        var y = m.onEquipEffect;
                        y && y[0] === OnEquipType.Telescopy && Item.damage(p, 1)
                    }
                }
            }
            terrains[Utilities.TileHelpers.getType(n)].water || this.setRaft(null), player.checkWeight(), this.addDelay(Delay.Movement), player.updateDirection(e), player.nextX = i, player.nextY = a, ui.onMove(), this.passTurn(TurnType.CheckUnderPlayer)
        }
    }, e.prototype.showStatsHint = function() {
        player.stamina <= 8 && ui.displayHint(HintType.StaminaReplenishment) || player.health <= 8 && ui.displayHint(HintType.HealthProblems) || player.status.bleeding && ui.displayHint(HintType.Bleeding) || player.status.poisoned && ui.displayHint(HintType.Poisoned) || player.thirst <= 3 && ui.displayHint(HintType.Dehydration)
    }, e.prototype.stats = function() {
        player.health > player.strength && (player.health = player.strength), player.stamina > player.dexterity && (player.stamina = player.dexterity), player.hunger > player.starvation && (player.hunger = player.starvation), player.thirst > player.dehydration && (player.thirst = player.dehydration), this.showStatsHint(), ui.refreshStats(), player.health / player.strength <= .1 ? audio.updateMusicSpeed(1.5) : audio.updateMusicSpeed(1), player.health <= 0 && (player.state = PlayerState.Dead, this.resetGameState())
    }, e.prototype.getPotentialRecipesInContainer = function(e, t, i) {
        for (var a = 0; a < e.containedItems.length; a++) {
            var n = e.containedItems[a];
            if (!t[n.type]) {
                t[n.type] = !0;
                var o = Item.defines[n.type].recipes;
                if (o)
                    for (var r = 0; r < o.length; r++) o[r] in this.crafted && (i[o[r]] = !0)
            }
            var s = n;
            s.containedItems && s.containedItems.length > 0 && this.getPotentialRecipesInContainer(s, t, i)
        }
    }, e.prototype.corpsesUpdate = function() {
        for (var e = this.corpses, t = 0, i = e.length; t < i; t++)
            if (e[t]) {
                if (monsters[e[t].type] && monsters[e[t].type].respawn && 0 === Math.floor(10 * Utilities.Random.nextFloat())) {
                    var a = e[t].aberrant || !1,
                        n = this.spawnMonster(e[t].type, e[t].x, e[t].y, e[t].z, !1, a);
                    if (null !== n) {
                        this.fov.canSeeTile(e[t].x, e[t].y) && ui.displayMessage(Message.ReturnsToLife, MessageType.None, this.getName(monsters[e[t].type], TextCase.Sentence)), this.monsters[n].hp = 3, this.monsters[n].respawned = !0, this.removeCorpse(t);
                        continue
                    }
                }
                e[t].decay >= 1 ? e[t].decay-- : 0 === e[t].decay && this.removeCorpse(t)
            }
    }, e.prototype.monsterBurn = function(e) {
        var t = this.getTile(e.x, e.y, e.z);
        if (void 0 !== t.eventId) {
            var i = Utilities.Random.randomFromInterval(4, 8);
            if (this.damageMonster(t.monsterId, i, DamageType.Fire, "", !1), !e) return !1
        }
        return !0
    }, e.prototype.monsterMove = function(e) {
        for (var t = 0, i = !1, a = 0, n = 0; n < this.monsters.length; n++)
            if (void 0 !== this.monsters[n] && this.monsters[n].z === player.z) {
                var o = this.monsters[n],
                    r = monsters[o.type],
                    s = r.moveType,
                    l = Mods.callHook(Mods.Hook.CalculateMonsterMoveType, n, o, s);
                if (void 0 !== l && (s = l), o.fromX = o.x, o.fromY = o.y, this.monsters[n].anim = 1 - this.monsters[n].anim, !r.fishable) {
                    o.hp <= 3 && s !== MoveType.None && (o.ai |= MonsterAiType.Scared, o.ai &= ~MonsterAiType.Hostile);
                    var p = !1;
                    if (Math.abs(o.x - player.x) + Math.abs(o.y - player.y) === 1 && (0 === (o.ai & MonsterAiType.Hostile) && s !== MoveType.None || (p = !0), (o.ai & MonsterAiType.Scared) !== MonsterAiType.Scared && o.ai !== MonsterAiType.Neutral || 0 !== Math.floor(3 * Utilities.Random.nextFloat()) || (p = !0)), p && Mods.callHook(Mods.Hook.CanMonsterAttack, n, o) !== !1) {
                        t = Math.floor(Utilities.Random.nextFloat() * (monsters[o.type].maxatk - monsters[o.type].minatk) + monsters[o.type].minatk), o.aberrant && (t *= Math.max(Math.ceil(player.strength / 25), 2), o.ai |= MonsterAiType.Hostile, o.ai &= ~MonsterAiType.Scared), o.fromX = o.x + (player.x - o.x) / 3, o.fromY = o.y + (player.y - o.y) / 3, o.direction = Math.ceil((Math.atan2(player.y - o.y, o.x - player.x) + Math.PI) / (Math.PI / 2)) % 4;
                        for (var d = r.damageType, u = 0, g = 1; g < DamageType.Last; g <<= 1) d & g && (u += player.defenses[g]);
                        var m = Message.None;
                        u > 0 ? m = Message.ArmorAppearedResistant : u < 0 && (m = Message.ArmorAppearedVulnerable), u += player.defense.base;
                        var y = Utilities.roundNumber(player.skills[SkillType.Parrying].percent / 10, 0) + u;
                        if (y = Math.floor(Utilities.Random.nextFloat() * y + u / 3), t -= y, 0 !== (o.ai & MonsterAiType.Hidden)) {
                            o.ai |= MonsterAiType.Hostile, o.ai &= ~MonsterAiType.Hidden;
                            continue
                        }
                        if (Item.damageEquipment(), t > 0 || t <= 0 && 0 === Math.floor(8 * Utilities.Random.nextFloat())) {
                            t <= 0 && (t = 1), this.createParticles(player.x, player.y, 255, 0, 0), 0 === Math.floor(15 * Utilities.Random.nextFloat()) && this.placeCorpse({
                                type: MonsterType.Blood,
                                x: player.x,
                                y: player.y,
                                z: player.z
                            }), player.skillGain(SkillType.Parrying, .1, !1), ui.displayMessage(Message.HasHitYouForDamage, MessageType.Bad, this.getName(r, TextCase.Sentence), t, messages[m]);
                            var c = void 0,
                                h = Math.floor(player.skills[SkillType.Anatomy].percent / 20);
                            if (r.canCauseStatus)
                                for (var T = 0; T < r.canCauseStatus.length; T++) switch (r.canCauseStatus[T]) {
                                    case StatusType.Bleeding:
                                        player.status.bleeding || (c = Math.ceil(100 * Utilities.Random.nextFloat()), c <= 8 - h && (ui.displayMessage(Message.BleedingProfusely), player.skillGain(SkillType.Anatomy, .1, !1), player.status.bleeding = !0));
                                        break;
                                    case StatusType.Poisoned:
                                        player.status.poisoned || (c = Math.ceil(100 * Utilities.Random.nextFloat()), c <= 8 - h && (ui.displayMessage(Message.BeenPoisoned, MessageType.Bad), player.skillGain(SkillType.Anatomy, .1, !1), player.status.poisoned = !0));
                                        break;
                                    case StatusType.Burned:
                                        c = Math.floor(5 * Utilities.Random.nextFloat()), 0 === c && this.getBurned()
                                }
                            player.damage(-t, messages[Message.By] + this.getName(r), 6 * a), a++
                        } else player.skillGain(SkillType.Parrying, !1, !1), audio.queueEffect(SfxType.Miss, 6 * a), a++, ui.displayMessage(Message.DealtNoDamageToYou, MessageType.Miss, this.getName(r, TextCase.Sentence));
                        o.type === MonsterType.Drake && 0 === Math.floor(6 * Utilities.Random.nextFloat()) && game.fireBreath(o.x, o.y, o.z, o.direction), player.staminaReduction(SkillType.Parrying), this.addDelay(Delay.ShortPause), this.monsterBurn(o);
                        continue
                    }
                }
                var f = this.fov.getBounds();
                if (f.min.x -= player.x, f.min.y -= player.y, f.max.x -= player.x, f.max.y -= player.y, f.min.scale(2), f.max.scale(2), f.min.x += player.x, f.min.y += player.y, f.max.x += player.x, f.max.y += player.y, o.z === player.z && Utilities.isInBound2Wrapped(f, o.x, o.y)) {
                    if (s !== MoveType.None) {
                        !i && e !== TurnType.Resting && r.makeNoise && 0 === Math.floor(30 * Utilities.Random.nextFloat()) && (audio.queueEffect(SfxType.MonsterNoise), i = !0);
                        var v = Math.floor(30 * Utilities.Random.nextFloat());
                        0 !== (o.ai & MonsterAiType.Hostile) && v >= 2 && v <= 4 && 0 === (o.ai & MonsterAiType.Fearless) && (o.ai |= MonsterAiType.Random, o.ai &= ~MonsterAiType.Hostile), 0 !== (o.ai & MonsterAiType.Hostile) && 0 !== (o.ai & MonsterAiType.Fearless) && 0 === v && (o.ai |= MonsterAiType.Random, o.ai &= ~MonsterAiType.Hostile), (0 !== (o.ai & MonsterAiType.Random) && v >= 5 && v <= 15 || 0 !== (o.ai & MonsterAiType.Random) && 0 !== (o.ai & MonsterAiType.Fearless) && v >= 1 && v <= 15) && (o.ai |= MonsterAiType.Hostile, o.ai &= ~MonsterAiType.Random);
                        var I = o.x,
                            S = o.y,
                            M = o.z,
                            k = null;
                        if (0 !== (o.ai & MonsterAiType.Hostile) && this.flowField.isInFlowField(o.x, o.y)) {
                            var b = this.flowField.getMoveDirection(o.x, o.y, s);
                            b === FacingDirection.West ? I -= 1 : b === FacingDirection.East ? I += 1 : b === FacingDirection.North ? S -= 1 : b === FacingDirection.South && (S += 1)
                        } else if (0 !== (o.ai & MonsterAiType.Scared) && 0 !== Math.floor(8 * Utilities.Random.nextFloat()) && this.flowField.isInFlowField(o.x, o.y)) {
                            var b = this.flowField.getOpposingMoveDirection(o.x, o.y, s);
                            b === FacingDirection.West ? I -= 1 : b === FacingDirection.East ? I += 1 : b === FacingDirection.North ? S -= 1 : b === FacingDirection.South && (S += 1)
                        } else
                            for (var w = Utilities.shuffle([0, 1, 2, 3, 4]), D = 0; D < 4; D++) {
                                switch (w[D]) {
                                    case 0:
                                        I = o.x + 1, S = o.y;
                                        break;
                                    case 1:
                                        I = o.x, S = o.y + 1;
                                        break;
                                    case 2:
                                        I = o.x - 1, S = o.y;
                                        break;
                                    case 3:
                                        I = o.x, S = o.y - 1;
                                        break;
                                    case 4:
                                        I = o.x, S = o.y
                                }
                                if (o.type === MonsterType.TimeSkitter || o.type === MonsterType.SkeletalMage ? 0 === Math.floor(9 * Utilities.Random.nextFloat()) && (I = o.x + Math.floor(6 * Utilities.Random.nextFloat() - 3), S = o.y + Math.floor(6 * Utilities.Random.nextFloat() - 3)) : r.fishable && 0 === Math.floor(4 * Utilities.Random.nextFloat()) && (I = o.x + Math.floor(3 * Utilities.Random.nextFloat()) - 1, S = o.y + Math.floor(3 * Utilities.Random.nextFloat()) - 1), 0 === this.checkMonsterMove(n, o, I, S, M, s)) break
                            }
                        switch (o.direction = Math.ceil((Math.atan2(S - o.fromY, o.fromX - I) + Math.PI) / (Math.PI / 2)) % 4, I = this.getWrappedCoord(I), S = this.getWrappedCoord(S), o.type) {
                            case MonsterType.FireElemental:
                                if (0 === Math.floor(40 * Utilities.Random.nextFloat())) {
                                    var C = o.x + Math.floor(6 * Utilities.Random.nextFloat() - 3),
                                        F = o.y + Math.floor(6 * Utilities.Random.nextFloat() - 3),
                                        R = this.getTile(C, F, M);
                                    if (!R) continue;
                                    terrains[Utilities.TileHelpers.getType(R)].flammable && void 0 === R.monsterId && void 0 === R.eventId && (this.placeTileEvent(TileEvent.create(TileEvent.Type.Fire, C, F, M)), game.createParticles(C, F, 210, 125, 20)), audio.queueEffect(SfxType.Throw)
                                }
                                break;
                            case MonsterType.AcidSpitterDemon:
                                if (0 === Math.floor(30 * Utilities.Random.nextFloat())) {
                                    var A = o.x + Math.floor(6 * Utilities.Random.nextFloat() - 3),
                                        B = o.y + Math.floor(6 * Utilities.Random.nextFloat() - 3);
                                    this.isTileEmpty(A, B, M) && Doodad.create(DoodadType.Acid, A, B, M)
                                }
                                break;
                            case MonsterType.SkeletalMage:
                                if (0 === Math.floor(80 * Utilities.Random.nextFloat())) {
                                    var L = player.x + player.direction.x,
                                        x = player.y + player.direction.y;
                                    if (this.isTileEmpty(L, x, player.z)) {
                                        Doodad.create(DoodadType.StoneWall, L, x, player.z);
                                        var G = Doodad.defines[DoodadType.StoneWall].particles;
                                        G && game.createParticles(L, x, G[0], G[1], G[2]), audio.queueEffect(SfxType.PickUp)
                                    }
                                }
                                break;
                            case MonsterType.Bogling:
                                if (0 === Math.floor(40 * Utilities.Random.nextFloat())) {
                                    var U = this.getTile(o.x, o.y, o.z);
                                    if (!U) continue;
                                    if (Utilities.TileHelpers.getType(U) !== TerrainType.Swamp) {
                                        this.changeTile({
                                            type: TerrainType.Swamp
                                        }, o.x, o.y, o.z, !0);
                                        var G = terrains[TerrainType.Swamp].particles;
                                        game.createParticles(o.x, o.y, G[0], G[1], G[2])
                                    }
                                }
                                break;
                            case MonsterType.Hobgoblin:
                                if (0 === Math.floor(150 * Utilities.Random.nextFloat())) {
                                    var W = o.x + Math.floor(2 * Utilities.Random.nextFloat() - 1),
                                        E = o.y + Math.floor(2 * Utilities.Random.nextFloat() - 1);
                                    this.isTileEmpty(W, E, o.z) && Doodad.create(DoodadType.SetHobgoblinSnare, W, E, o.z)
                                }
                                break;
                            case MonsterType.Chicken:
                            case MonsterType.Harpy:
                                0 !== Math.floor(500 * Utilities.Random.nextFloat()) || this.isTileFull(o.x, o.y, o.z) || Item.create(ItemType.Feather, ItemQuality.Random, Item.getTileContainer(o.x, o.y, o.z));
                        }
                        if (0 === this.checkMonsterMove(n, o, I, S, M, s) && (k = this.getTile(I, S, M)), null !== k && void 0 !== k.doodadId && (s & MoveType.Flying) !== MoveType.Flying) {
                            var P = this.doodads[k.doodadId];
                            if (o.type !== MonsterType.Hobgoblin || P.type !== DoodadType.WoodenDoor && P.type !== DoodadType.WoodenGate || (P.type === DoodadType.WoodenDoor ? P.type = DoodadType.WoodenDoorOpen : P.type === DoodadType.WoodenGate && (P.type = DoodadType.WoodenGateOpen), world.updateTile(P.x, P.y, P.z, k)), Doodad.defines[P.type].fire || Doodad.defines[P.type].blockMove) {
                                if (Doodad.defines[P.type].blockMove && r.breaksWalls && 0 === Math.floor(5 * Utilities.Random.nextFloat())) {
                                    Doodad.damage(P);
                                    var G = Doodad.defines[P.type].particles;
                                    G && game.createParticles(P.x, P.y, G[0], G[1], G[2])
                                }
                                k = null
                            } else Doodad.checkForTrampling(P, n) && 0 !== (o.ai & MonsterAiType.Hidden) && (o.ai |= MonsterAiType.Hostile, o.ai &= ~MonsterAiType.Hidden)
                        }
                        if (null !== k) {
                            var O = this.getTile(o.x, o.y, o.z);
                            delete O.monsterId, k.monsterId = n, o.x = I, o.y = S;
                            var H = this.getTile(o.x, o.y, o.z);
                            if (terrains[Utilities.TileHelpers.getType(H)].shallowWater || terrains[Utilities.TileHelpers.getType(H)].water) {
                                var N = terrains[Utilities.TileHelpers.getType(H)].particles;
                                this.createParticles(o.x, o.y, N[0], N[1], N[2])
                            }
                            if (!this.monsterBurn(o)) continue;
                            if (void 0 !== k.doodadId) {
                                var P = this.doodads[k.doodadId];
                                if (Doodad.defines[P.type].trap) {
                                    var q = Math.ceil(100 * Utilities.Random.nextFloat()),
                                        _ = 0;
                                    if (P.type === DoodadType.SetHobgoblinSnare ? 75 >= q - 50 && (_ = Math.floor(6 * Utilities.Random.nextFloat() + 3), audio.queueEffect(SfxType.MonsterHit, 0, o.aberrant ? .5 : 1), ui.displayMessage(Message.HasBeenHurtByATrap, MessageType.None, this.getName(monsters[o.type], TextCase.Sentence))) : player.skills[SkillType.Trapping].percent <= q - 50 && (_ = Math.floor(3 * Utilities.Random.nextFloat() + 6) + Math.floor(player.skills[SkillType.Trapping].percent / 10), audio.queueEffect(SfxType.MonsterHit, 0, o.aberrant ? .5 : 1), player.skillGain(SkillType.Trapping, !1, !1), player.addMilestone(MilestoneType.Trapper), ui.displayMessage(Message.HasBeenHurtByYourTrap, MessageType.Attack, this.getName(monsters[o.type], TextCase.Sentence))), _) {
                                        this.damageMonster(n, _, DamageType.Blunt, "", !1);
                                        var z = Doodad.defines[P.type].resource;
                                        if (z) {
                                            var V = Item.create(z[0].item, P.quality, Item.getTileContainer(P.x, P.y, P.z));
                                            V.minDur = P.minDur - 1, V.maxDur = P.maxDur
                                        }
                                        Doodad.remove(P)
                                    }
                                }
                            }
                        } else this.monsterBurn(o)
                    }
                } else {
                    if (this.dayNight < .75 && (o.type === MonsterType.VampireBat || o.type === MonsterType.Zombie)) {
                        this.deleteMonsters(n);
                        continue
                    }
                    o.hp >= r.minhp && 0 === Math.floor(2e4 * Utilities.Random.nextFloat()) && this.deleteMonsters(n)
                }
            }
        return !0
    }, e.prototype.swimCheck = function() {
        var e = terrains[Utilities.TileHelpers.getType(this.getTile(player.x, player.y))];
        player.swimming = !(!e.water || null !== this.raft);
        var t = Mods.callHook(Mods.Hook.IsPlayerSwimming, player, player.swimming);
        if (void 0 !== t && (player.swimming = t), player.swimming) {
            var i = e.particles;
            this.createParticles(player.x, player.y, i[0], i[1], i[2]), 0 === Math.floor(7 * Utilities.Random.nextFloat()) && player.skillGain(SkillType.Swimming, !1, !1), 0 === Math.floor(3 * Utilities.Random.nextFloat()) && player.status.burned && (player.status.burned = !1, player.addMilestone(MilestoneType.Doctor, StatusType.Burned), ui.displayMessage(Message.NoLongerFeelPainOBeingfBurned));
            var a = player.skills[SkillType.Swimming].percent;
            player.staminaReduction(SkillType.Swimming), this.addDelay(Math.max(25 - a / 2, Delay.Movement))
        }
    }, e.gameMovement = [{
        keyBind: KeyBind.Right,
        direction: FacingDirection.East,
        x: 1,
        y: 0
    }, {
        keyBind: KeyBind.Left,
        direction: FacingDirection.West,
        x: -1,
        y: 0
    }, {
        keyBind: KeyBind.Up,
        direction: FacingDirection.North,
        x: 0,
        y: -1
    }, {
        keyBind: KeyBind.Down,
        direction: FacingDirection.South,
        x: 0,
        y: 1
    }], e
}();
window.onload = function() {
    try {
        Steamworks.initialize()
    } catch (e) {
        Utilities.Console.log(Source.Game, "Failed to initialized steamworks", e)
    }
    Shaders.loadShaders(function() {
        game = new Game, ui.onWindowResize(), SaveLoad.initialize()
    })
};
var Item;
! function(e) {
    function t(e) {
        var t;
        if (void 0 === e || null === e) t = {
            type: fe.Null
        };
        else if (e === player.inventory) t = {
            type: fe.Inventory
        };
        else if (e === Te) t = {
            type: fe.World
        };
        else if (e.containedWithin === Te) {
            var i = e;
            t = {
                type: fe.Tile,
                x: i.x,
                y: i.y,
                z: i.z
            }
        } else if (void 0 === e.containedWithin || null === e.containedWithin) {
            var a = e;
            t = {
                type: fe.Doodad,
                x: a.x,
                y: a.y,
                z: a.z
            }
        } else t = {
            type: fe.Item,
            id: e.id
        };
        return t
    }

    function i(e) {
        if (!e) return null;
        switch (e.type) {
            case fe.Inventory:
                return player.inventory;
            case fe.Doodad:
                var t = e;
                if (t) {
                    var i = game.getTile(t.x, t.y, t.z);
                    if (i) {
                        var a = i.doodadId;
                        if (void 0 !== a) {
                            var n = game.doodads[a];
                            if (n) return n
                        }
                    }
                }
                return null;
            case fe.World:
                return Te;
            case fe.Tile:
                var o = e;
                return game.getTile(o.x, o.y, o.z);
            case fe.Item:
                var r = e;
                return game.items[r.id];
            default:
                return null
        }
    }

    function a() {
        for (var e = ve; e < game.items.length; ++e)
            if (null === game.items[e] || void 0 === game.items[e]) return ve = e, e;
        for (var e = 0; e < ve; ++e)
            if (null === game.items[e] || void 0 === game.items[e]) return ve = e, e;
        return -1
    }

    function n(t) {
        var i = t.type;
        game.playing && game.notifier.addItem(player.x, player.y, i), player.addMilestone(MilestoneType.Collector, i), Y(i, ItemTypeGroup.Treasure) && player.addMilestone(MilestoneType.Treasurer, i);
        var a = e.defines[i];
        if (a) {
            var n = a.recipes;
            if (n)
                for (var o = 0; o < n.length; o++) {
                    var r = e.defines[n[o]].recipe;
                    if (r) {
                        var s = new Se(r, (!1));
                        s.process(player.inventory), s.isDiscovered() && (game.crafted[n[o]] || (game.newCrafted[n[o]] = !0), game.crafted[n[o]] = !0)
                    }
                }
        }
    }

    function o(t, i) {
        t.type = i, t.quality !== ItemQuality.Legendary || e.defines[t.type].equip || (t.quality = ItemQuality.Exceptional, delete t.legendary), ui.updateItem(t), re(t, player.inventory) && (Mods.callHook(Mods.Hook.OnAddOrUpdateInventoryItem, t, player.inventory), n(t))
    }

    function r(e) {
        var t = e.containedWithin;
        t && (t.containedItems.splice(t.containedItems.indexOf(e), 1), e.containedWithin = null, (se(t) || ui.isContainerOpen(t)) && ui.removeItemFromContainer(e, t))
    }

    function s(e, t, i) {
        if (void 0 === i && (i = !1), v(e) && re(t, e)) return void ui.displayMessage(Message.CannotPlaceContainerInItself);
        var a = re(e, player.inventory),
            o = re(t, player.inventory);
        if (r(e), t.containedItems.push(e), e.containedWithin = t, ui.addItemToContainer(e, t, !1, i), o && Mods.callHook(Mods.Hook.OnAddOrUpdateInventoryItem, e, t), !a && o) n(e);
        else if (a && (!o || t !== player.inventory)) {
            var s = ee(t, !0);
            s.push(e);
            for (var l = 0; l < s.length; l++) d(s[l], o);
            ui.displayHint(HintType.MovingItems)
        }
    }

    function l(e) {
        for (var t = e.containedItems.length - 1; t > 0; t--) p(e.containedItems[t])
    }

    function p(e) {
        if (e) {
            var t = e;
            if (void 0 !== t.containedItems) {
                if (!t.containedWithin) throw "Removed a container that's not contained within anything.";
                k(t, t.containedWithin)
            }
            r(e), d(e), delete game.items[e.id]
        }
    }

    function d(e, t) {
        void 0 === t && (t = !1), e.equipped && ui.removeItemFromEquipSlot(e.id);
        var i = e.quickSlot;
        i && !t && (ui.removeItemFromQuickSlot(e.id), ui.refreshQuickSlots())
    }

    function u(t) {
        for (var i = [], a = 0, n = t.components; a < n.length; a++) {
            var o = n[a],
                r = o.consumedAmount;
            if (r >= 1 && o.disassembleAmount && o.disassembleAmount > 0)
                for (var s = o.type, l = void 0, p = 0; p < r; p++) {
                    var d = void 0;
                    z(s) ? (l = e.defines[ce(s)], d = h(ce(s))) : (l = e.defines[s], d = h(s)), l && l.disassemble && l.recipe && (d.disassembly = u(l.recipe)), i.push(d)
                }
        }
        return i
    }

    function g(t) {
        for (var i = 0, a = 0, n = t.components; a < n.length; a++) {
            var o = n[a],
                r = o.consumedAmount;
            if (r >= 1 && o.ignoreWeight !== !0) {
                var s = o.type,
                    l = void 0;
                l = z(s) ? e.defines[ce(s)] : e.defines[s], i += l.recipe && !l.weight ? g(l.recipe) * r : l.weight * r, l.reducedWeight && (i -= l.reducedWeight * r)
            }
        }
        return i
    }

    function m(t) {
        var i = e.defines[t];
        if (!i) return 0;
        var a = 0,
            n = i.recipe;
        if (i.weight) a = i.weight;
        else if (i.inheritWeight) {
            var o = e.defines[i.inheritWeight];
            if (!o) return 0;
            o.weight ? a = o.weight : o.recipe && (n = o.recipe)
        }
        if (0 === a && n && (a = g(n)), 0 !== a) {
            i.reducedWeight && (a -= i.reducedWeight);
            var r = .8 * a,
                s = 1.2 * a;
            a = Utilities.Random.nextFloat() * (s - r) + r, a < .1 && (a = .1)
        }
        return Utilities.roundNumber(a, 1)
    }

    function y(e) {
        var t = 0;
        if (e.disassembly)
            for (var i = 0, a = e.disassembly; i < a.length; i++) {
                var n = a[i];
                t += n.disassembly ? y(n) : n.weight
            }
        return Utilities.roundNumber(t, 1)
    }

    function c(t) {
        if (t.disassembly)
            for (var i = 0, a = t.disassembly; i < a.length; i++) {
                var n = a[i];
                void 0 === n.weight && (n.disassembly ? (c(n), n.weight = y(n)) : n.weight = m(n.type))
            } else {
                var o = e.defines[t.type];
                if (o && o.disassemble) {
                    var r = o.recipe;
                    r && (t.disassembly = u(r), t.weight = y(t))
                }
            }
        void 0 === t.weight && (t.weight = m(t.type))
    }

    function h(t, i) {
        void 0 === i && (i = ItemQuality.Random);
        var a = e.defines[t],
            n = {
                type: t
            };
        a.durability ? n.maxDur = Math.floor(a.durability) - Math.floor(3 * Utilities.Random.nextFloat()) : n.maxDur = 6 - Math.floor(3 * Utilities.Random.nextFloat()), a.decayMax && (n.decay = f(n));
        var o = e.defines[t].recipe;
        if (a.disassemble && o && (n.disassembly = u(o), n.weight = y(n)), void 0 === n.weight && (n.weight = m(t)), i === ItemQuality.Random ? Ie.update(n, Ie.createRandom(void 0 !== a.equip)) : (i !== ItemQuality.Legendary || a.equip || (i = ItemQuality.Exceptional), Ie.update(n, i)), void 0 !== a.weightCapacity) {
            var r = n;
            r.weightCapacity = a.weightCapacity, r.containedItems = []
        } else t === ItemType.TatteredMap && x(n);
        return n.minDur = n.maxDur, n
    }

    function T(e, t, i) {
        void 0 === t && (t = ItemQuality.Random), void 0 === i && (i = player.inventory);
        var n = h(e, t);
        return n.id = a(), n.id < 0 ? (n.id = game.items.length, game.items.push(n)) : game.items[n.id] = n, s(n, i), n
    }

    function f(t) {
        return e.defines[t.type].decayMax + 10 * t.maxDur
    }

    function v(e) {
        return void 0 !== e.containedItems
    }

    function I(e, t) {
        void 0 === t && (t = null), ui.displayMessage(Message.DumpContentsOfContainerInInventory), k(e, player.inventory, null, t)
    }

    function S(e) {
        var t = e.weight;
        return v(e) && (t += M(e)), t
    }

    function M(e) {
        for (var t = 0, i = 0, a = e.containedItems.length; i < a; i++) t += S(e.containedItems[i]);
        return t
    }

    function k(e, t, i, a) {
        void 0 === i && (i = null), void 0 === a && (a = null);
        for (var n = M(t), o = t.weightCapacity, r = [], l = 0, p = e.containedItems.length; l < p; l++) {
            var d = e.containedItems[l];
            null !== i && d.type !== i || null !== a && d.quality !== a || r.push(d)
        }
        for (var u = 0, l = 0, p = r.length; l < p; l++) {
            var d = r[l],
                g = S(d);
            if (!(n + g <= o)) {
                ui.displayMessage(Message.NoMoreRoomInContainer);
                break
            }
            if (t.containedWithin && !w(g, t.containedWithin)) {
                ui.displayMessage(Message.NoMoreRoomInContainer);
                break
            }
            u++, s(d, t, !0), n += g
        }
        u && (ui.afterAddingMultipleItemsToContainer(t), audio.queueEffect(SfxType.PickUp), game.updateCraftTableAndWeight())
    }

    function b(e, t) {
        t === player.inventory || w(S(e), t) ? (s(e, t), audio.queueEffect(SfxType.PickUp), game.updateCraftTableAndWeight()) : ui.displayMessage(Message.NoMoreRoomInContainer)
    }

    function w(e, t) {
        var i = M(t) + e;
        return i <= t.weightCapacity && (!t.containedWithin || w(e, t.containedWithin))
    }

    function D(t) {
        if (t.equipped) {
            t.equipped = void 0;
            var i = e.defines[t.type];
            i.onUnequip && i.onUnequip(t), player.calculateEquipmentStats(), player.attributes(), game.updateRender = !0, i.onEquipEffect && (game.fov.compute(), renderer.computeSpritesInViewport())
        }
    }

    function C(t, i, a) {
        if (void 0 === a && (a = !1), !t.equipped) {
            var n = e.defines[t.type];
            t.equipped = i, player.addMilestone(MilestoneType.Prepared, t.equipped), player.calculateEquipmentStats(), player.attributes(), n && n.onEquip && n.onEquip(t), Mods.callHook(he.OnItemEquip, t, i), n && n.onEquipEffect && (game.updateRender = !0, game.fov.compute()), a || game.passTurn()
        }
    }

    function F(e, t) {
        if (!game.hasDelay()) {
            if ((t === ActionType.Shoot || t === ActionType.Sling || t === ActionType.Fire) && !e.equipped) return ui.displayMessage(Message.NeedToEquipToShoot, MessageType.Bad), game.addDelay(Delay.LongPause, !0), !1;
            Actions.execute(t, e), game.addDelay(Delay.LongPause, !0)
        }
        return !0
    }

    function R(e, t, i, a) {
        if (v(e))
            for (var n = e, o = n.containedItems.length - 1; o >= 0; o--) W(n.containedItems[o], t + Utilities.Random.randomFromInterval(-1, 1), i + Utilities.Random.randomFromInterval(-1, 1), a, !0);
        p(e)
    }

    function A(t, i, a) {
        void 0 === i && (i = !1), void 0 === a && (a = null);
        var n = t.type,
            o = game.getTileInFrontOfPlayer();
        if (t.id === game.raft && game.setRaft(null), void 0 !== o.monsterId) return game.checkForHiddenMob(player.x + player.direction.x, player.y + player.direction.y, player.z), void ui.displayMessage(Message.SomethingInTheWayOfPlacing);
        if (void 0 !== o.doodadId) {
            var r = game.doodads[o.doodadId];
            if (v(r)) return void(i ? k(t.containedWithin, r, n, a) : b(t, r));
            if (!Doodad.defines[r.type].trample) return void ui.displayMessage(Message.CannotDropHere, MessageType.None, game.getName(e.defines[n]))
        }
        var s = !1;
        if (terrains[Utilities.TileHelpers.getType(o)].water && (s = !0), !terrains[Utilities.TileHelpers.getType(o)].passable && !s) return void ui.displayMessage(Message.CannotDropHere, MessageType.None, game.getName(e.defines[n]));
        var l = !1;
        if (void 0 !== o.eventId && terrains[Utilities.TileHelpers.getType(o)].passable && (l = !0), i) {
            s && ui.displayMessage(Message.DroppedAllIntoDepths, MessageType.None, game.getName(e.defines[n]));
            for (var p = [], d = t.containedWithin, u = 0, g = d.containedItems.length; u < g; u++) {
                var m = d.containedItems[u];
                m.type !== n || null !== a && m.quality !== a || p.push(m)
            }
            for (var y = 0, u = 0, g = p.length; u < g; u++) {
                var m = p[u];
                if (s) y++, B(m, m.type);
                else {
                    if (!W(m, player.x + player.direction.x, player.y + player.direction.y, player.z)) {
                        ui.displayMessage(Message.NoRoomToDrop);
                        break
                    }
                    y++, 0 === u && ui.displayMessage(l ? Message.AttemptedToDropAllIntoFire : Message.AttemptToPlaceAllOnGround, MessageType.None, game.getName(e.defines[n])), v(m) && ui.closeContainer(m)
                }
            }
            if (!y) return
        } else {
            var c = e.defines[n];
            if (s) B(t, n), ui.displayMessage(Message.DroppedIntoDepths, MessageType.None, game.getName(c));
            else {
                if (!W(t, player.x + player.direction.x, player.y + player.direction.y, player.z)) return void ui.displayMessage(Message.NoRoomToDrop);
                ui.displayMessage(l ? Message.DroppedIntoFire : Message.PlacedOnGround, MessageType.None, game.getName(c)), v(t) && ui.closeContainer(t)
            }
        }
        s ? audio.queueEffect(SfxType.Water) : audio.queueEffect(SfxType.PickUp), game.updateCraftTableAndWeightNextTurn(), game.passTurn()
    }

    function B(t, i) {
        var a = e.defines[i];
        if (a && a.use && a.use.indexOf(ActionType.Eat) > -1) {
            var n = Math.ceil(100 * Utilities.Random.nextFloat());
            n <= 7 && null !== game.spawnMonsterFromGroup(MonsterSpawnGroup.Water, player.x + player.direction.x, player.y + player.direction.y, player.z) && ui.displayMessage(Message.StirredUpCreature)
        }
        p(t)
    }

    function L(e, t, i, a) {
        null !== e && void 0 !== e || (e = a === Z_CAVE ? [ItemType.SharpRock, ItemType.LargeRock, ItemType.Stones, ItemType.SmoothRock, ItemType.Amber, ItemType.Fossil, ItemType.IronOre, ItemType.Talc, ItemType.Limestone, ItemType.Coal, ItemType.AnimalSkull, ItemType.Shale, ItemType.Bone, ItemType.WoodenSpear, ItemType.WoodenArrow, ItemType.OldInstructionalScroll] : [ItemType.Feather, ItemType.LargeRock, ItemType.Bone, ItemType.Branch, ItemType.Twigs, ItemType.StoneArrowhead, ItemType.Stones, ItemType.SharpRock, ItemType.AnimalSkull, ItemType.TreeBark, ItemType.Shale, ItemType.Amber, ItemType.Fossil, ItemType.Egg]);
        var n = e[Math.floor(Utilities.Random.nextFloat() * e.length)];
        T(n, ItemQuality.Random, U(t, i, a))
    }

    function x(e) {
        for (;;) {
            var t = Math.floor(400 * Utilities.Random.nextFloat() + 50),
                i = Math.floor(400 * Utilities.Random.nextFloat() + 50);
            if (Utilities.TileHelpers.getType(game.getTile(t, i, Z_NORMAL)) !== TerrainType.DeepSeawater) {
                e.tatteredMap = {
                    x: t,
                    y: i,
                    z: Z_NORMAL
                };
                break
            }
        }
    }

    function G(e) {
        for (var t = 0; t < e.containedItems.length; t++) {
            var i = e.containedItems[t];
            i.type === ItemType.TatteredMap ? x(i) : v(i) && G(i)
        }
    }

    function U(e, t, i) {
        var a = game.getTile(e, t, i),
            n = a;
        return void 0 === n.containedItems && (n.containedWithin = Te, n.weightCapacity = 1 / 0, n.containedItems = [], n.x = e, n.y = t, n.z = i), n
    }

    function W(t, i, a, n, o) {
        void 0 === o && (o = !1);
        var r = e.defines[t.type];
        if (!r) return !1;
        r.revert && (t.type = r.revert);
        var l = U(i, a, n);
        return !(!o && game.isTileFull(i, a, n)) && (s(t, l), !0)
    }

    function E() {
        for (var e = [], t = 0; t < player.inventory.containedItems.length; t++) {
            var i = player.inventory.containedItems[t];
            i.equipped && e.push(i)
        }
        if (e.length) {
            var a = e[Math.floor(Utilities.Random.nextFloat() * e.length)];
            P(a)
        }
    }

    function P(t, i) {
        if (t.minDur <= 0) return ui.displayMessage(Message.DestroyedFromUse, MessageType.Bad, game.getName(e.defines[t.type])), audio.queueEffect(SfxType.Fail), p(t), void(t.id === game.raft && game.setRaft(null));
        var a = 1;
        if (i) a = i;
        else {
            var n = e.defines[t.type].damageModifier;
            n && (a = n)
        }
        t.minDur -= a, O(t) && e.defines[t.type].durability && t.minDur <= 10 && (ui.displayMessage(Message.InNeedOfRepair, MessageType.Bad, game.getName(e.defines[t.type])), ui.displayHint(HintType.Durability), audio.queueEffect(SfxType.Damaged)), ui.updateItem(t)
    }

    function O(e) {
        return !!e && (e.minDur / e.maxDur <= .1 || e.minDur <= 2)
    }

    function H(t, i) {
        var a = e.defines[t].recipe;
        if (!a || !a.requiredDoodadType && !a.requiresFire) return !0;
        var n = game.getTileInFrontOfPlayer();
        if (void 0 !== n.doodadId) {
            var o = game.doodads[n.doodadId].type;
            if (o === a.requiredDoodadType || Doodad.defines[o].fire && a.requiresFire) return !0
        }
        if (void 0 !== n.eventId && a.requiresFire) return !0;
        if (i) {
            var r = void 0;
            r = a.requiresFire ? messages[Message.FireSource] : a.requiredDoodadType ? game.getName(Doodad.defines[a.requiredDoodadType]) : messages[Message.Unknown], ui.displayMessage(Message.RequiresYouToBeFacingTo, MessageType.Bad, r, messages[i])
        }
        return !1
    }

    function N(e, t) {
        var i = 0;
        if (t) switch (e) {
            case ItemQuality.Remarkable:
                i += 2;
                break;
            case ItemQuality.Exceptional:
                i += 4;
                break;
            case ItemQuality.Legendary:
                i += 8
        } else switch (e) {
            case ItemQuality.Remarkable:
                i += 15;
                break;
            case ItemQuality.Exceptional:
                i += 30;
                break;
            case ItemQuality.Legendary:
                i += 60
        }
        return i
    }

    function q(e, t) {
        for (var i = 0, a = 0; a < e.length; a++) {
            var n = e[a];
            n.quality && (i += N(n.quality, !0))
        }
        i && (i = Math.floor(i / e.length));
        for (var o = 0, a = 0; a < t.length; a++) {
            var n = t[a];
            n.quality && (o += N(n.quality, !1))
        }
        return o && (o = Math.floor(o / t.length)), o += i
    }

    function _(e, t) {
        var i = Math.ceil(100 * Utilities.Random.nextFloat()),
            a = skillChance(e.level);
        return player.skills[e.skill].percent >= a + i - t ? Me.CritSuccess : player.skills[e.skill].percent >= a + i - (75 + t) ? Me.Success : Me.Fail
    }

    function z(e) {
        return e > ItemTypeGroup.Invalid
    }

    function V(t) {
        return z(t) ? game.getName(e.groups[t], TextCase.Title) : game.getName(e.defines[t], TextCase.Title)
    }

    function Y(t, i) {
        var a = e.defines[t].group;
        if (a)
            for (var n = 0; n < a.length; n++)
                if (a[n] === i) return !0;
        return !1
    }

    function K(t, i, a, n, r) {
        var s = game.getTile(player.x, player.y, player.z);
        if (terrains[Utilities.TileHelpers.getType(s)].water) return ui.displayMessage(Message.CannotInWater, MessageType.None, messages[Message.Craft]), !1;
        if (!H(t, Message.Craft)) return !1;
        var l = e.defines[t],
            d = l.recipe;
        if (!d) return !1;
        audio.queueEffect(SfxType.Craft), player.skillGain(d.skill, !1, !1), player.stamina -= Math.max(Math.floor(m(t)), 1);
        var u = q(i, a),
            g = _(d, u);
        if (g === Me.Fail) {
            for (var y = 0; y < i.length; y++) P(i[y]);
            for (var y = 0; y < a.length; y++) P(a[y]);
            ui.displayHint(HintType.CraftingFailure);
            var c = "";
            return player.skills[d.skill].percent <= skillChance(d.level) - 40 && (c = messages[Message.LikelyFailures]), ui.displayMessage(Message.YouFailedTo, MessageType.Bad, d.skill === SkillType.Cooking ? messages[Message.Cook] : messages[Message.Craft], game.getName(e.defines[t]), c), audio.queueEffect(SfxType.Fail), game.addDelay(Delay.ShortPause), game.updateCraftTableAndWeightNextTurn(), game.passTurn(), !1
        }
        ui.displayHint(HintType.Crafting);
        for (var h = null, y = 0; y < i.length; y++) h = i[y], P(h);
        for (var y = 0; y < a.length; y++) h = a[y], p(h);
        var f = ItemQuality.None;
        if (r) void 0 !== r.quality && (f = r.quality);
        else if (g === Me.CritSuccess) {
            var v = Math.ceil(100 * Utilities.Random.nextFloat());
            l.equip && v <= 1 + u ? (f = ItemQuality.Legendary, audio.queueEffect(SfxType.Exceptional)) : f = v <= 25 + u ? ItemQuality.Exceptional : ItemQuality.Remarkable
        }
        if (l.decayMax && h && (h.decay = l.decayMax + Math.floor(10 * player.skills[d.skill].percent) + 10 * u), r ? (h = r, h.quality = f, o(h, t)) : h = T(t, f), a.length > 0 && !l.keepDurabilityOnCraft) {
            for (var I = 0, S = 0, M = 0, y = 0; y < a.length; y++) {
                for (var k = 0, b = d.components; k < b.length; k++) {
                    var w = b[k];
                    w.ignoreWeight !== !0 && 0 !== w.consumedAmount && (a[y].type === w.type || z(w.type) && Q(a[y].type, w.type)) && (M += a[y].weight)
                }
                I += a[y].minDur / a[y].maxDur;
                var D = e.defines[a[y].type].durability;
                D || (D = 6), S += a[y].maxDur / D
            }
            l.reducedWeight && (M -= l.reducedWeight), I /= a.length, S /= a.length;
            var C = e.defines[h.type].durability;
            C || (C = 6), h.maxDur = C, Ie.update(h, h.quality || ItemQuality.None), h.maxDur = Math.floor(h.maxDur * S) + Math.floor(player.skills[d.skill].percent / 10), (h.maxDur <= 0 || isNaN(h.maxDur)) && (h.maxDur = 1), h.maxDur >= 10 * C && (h.maxDur = 10 * C), h.minDur = Math.floor(h.maxDur * I), (h.minDur <= 0 || isNaN(h.minDur)) && (h.minDur = 1), M <= 0 && (M = .1), h.weight = Utilities.roundNumber(M, 1)
        }
        if (n.length > 0) {
            for (var F = [], y = 0; y < n.length; y++) F.push(n[y]);
            h.disassembly = F
        }
        return Mods.callHook(Mods.Hook.OnCraft, h), ui.updateItem(h), ui.displayMessage(Message.YouCrafted, MessageType.None, d.skill === SkillType.Cooking ? messages[Message.Cooked] : messages[Message.Crafted], game.getName(e.defines[t])), player.addMilestone(MilestoneType.Crafter), d.skill === SkillType.Cooking && player.addMilestone(MilestoneType.Chef), player.updateMalignity(d.malignity), game.addDelay(Delay.LongPause), game.updateCraftTableAndWeightNextTurn(), game.passTurn(), !0
    }

    function j() {
        for (var i = !1, a = Math.floor(5 * Utilities.Random.nextFloat()), n = 0; n < game.items.length; n++) {
            var r = game.items[n];
            if (null !== r && void 0 !== r && void 0 !== r.decay) {
                var s = r.type,
                    l = r.containedWithin,
                    d = t(l);
                if ((l === player.inventory || d.type === fe.Tile || 0 === a) && e.defines[s].decayMax)
                    if (r.decay > 0) r.decay--;
                    else {
                        if (se(r)) r.equipped && ui.removeItemFromEquipSlot(r.id), ui.displayMessage(Message.HasDecayed, MessageType.None, game.getName(e.defines[s])), i = !0;
                        else {
                            var u = e.defines[s].decaySpawn;
                            if (u && d.type === fe.Tile) {
                                var g = d;
                                if (null === game.spawnMonster(u, g.x, g.y, g.z)) continue
                            }
                        }
                        var m = e.defines[s].decaysInto;
                        m ? (r.decay = e.defines[m].decayMax, o(r, m)) : p(r)
                    }
            }
        }
        return i
    }

    function Q(t, i) {
        var a = e.defines[t],
            n = a ? a.group : null;
        return !(!n || n.indexOf(i) === -1)
    }

    function X(t, i, a) {
        for (var n = 0, o = 0; o < t.containedItems.length; o++) {
            var r = t.containedItems[o];
            r !== a && r.type === i && n++, void 0 !== e.defines[r.type].weightCapacity && (n += X(r, i, a))
        }
        return n
    }

    function $(t, i, a) {
        for (var n = 0, o = 0; o < t.containedItems.length; o++) {
            var r = t.containedItems[o];
            r !== a && Q(r.type, i) && n++, void 0 !== e.defines[r.type].weightCapacity && (n += $(r, i, a))
        }
        return n
    }

    function Z(t, i, a) {
        for (var n = 0; n < t.containedItems.length; n++) {
            var o = t.containedItems[n];
            if (o !== a && o.type === i) return o;
            if (void 0 !== e.defines[o.type].weightCapacity) {
                var r = Z(o, i, a);
                if (r) return r
            }
        }
        return null
    }

    function J(t, i, a) {
        for (var n = 0; n < t.containedItems.length; n++) {
            var o = t.containedItems[n];
            if (o.id !== a && Q(o.type, i)) return o;
            if (void 0 !== e.defines[o.type].weightCapacity) {
                var r = J(o, i, a);
                if (r) return r
            }
        }
        return null
    }

    function ee(t, i) {
        void 0 === i && (i = !0);
        var a = [];
        if (!t.containedItems) return a;
        for (var n = 0; n < t.containedItems.length; n++) {
            var o = t.containedItems[n];
            a.push(o);
            var r = e.defines[o.type];
            i && r && void 0 !== r.weightCapacity && (a = a.concat(ee(o)))
        }
        return a
    }

    function te(t, i, a) {
        void 0 === a && (a = !1);
        for (var n = [], o = 0; o < t.containedItems.length; o++) {
            var r = t.containedItems[o];
            r.type === i && n.push(r);
            var s = e.defines[r.type];
            a && s && void 0 !== s.weightCapacity && (n = n.concat(te(r, i, a)))
        }
        return n
    }

    function ie(t, i, a) {
        void 0 === a && (a = !1);
        for (var n = [], o = 0; o < t.containedItems.length; o++) {
            var r = t.containedItems[o];
            Q(r.type, i) && n.push(r);
            var s = e.defines[r.type];
            a && s && void 0 !== s.weightCapacity && (n = n.concat(ie(r, i, a)))
        }
        return n
    }

    function ae(e, t) {
        return J(player.inventory, e, t)
    }

    function ne(e, t, i) {
        return null !== Z(e, t, i)
    }

    function oe(e, t, i) {
        return null !== oe(e, t, i)
    }

    function re(e, t) {
        for (var i = e; void 0 !== i && null !== i;) {
            if (i === t) return !0;
            i = i.containedWithin
        }
        return !1
    }

    function se(e) {
        return re(e, player.inventory)
    }

    function le(e) {
        return !(!e || e.containedWithin !== Te)
    }

    function pe(t) {
        var i = "";
        if (t && t.length > 0) {
            for (var a = {}, n = 0, o = t; n < o.length; n++) {
                var r = o[n],
                    s = e.defines[r.type];
                if (s) {
                    var l = void 0;
                    a[r.type] || (a[r.type] = {
                        name: game.getName(s, TextCase.Title, !1),
                        qualities: {}
                    });
                    var p = r.quality;
                    void 0 === p && (p = ItemQuality.None);
                    var d = a[r.type].qualities;
                    d[p] ? (l = game.getName(s, TextCase.Title, !1), s.prefix && "" !== s.prefix && (l = Languages.getLoaded().plural(l)), d[p] = {
                        count: d[p].count + 1,
                        name: l
                    }) : d[p] = {
                        count: 1,
                        name: game.getName(s, TextCase.Title)
                    }
                }
            }
            var u = [],
                g = Object.keys(a);
            g.sort(function(e, t) {
                return a[parseInt(e, 10)].name > a[parseInt(t, 10)].name ? 1 : -1
            });
            for (var m = 0, y = g.length; m < y; m++) {
                var c = parseInt(g[m], 10),
                    h = a[c],
                    T = Object.keys(h.qualities);
                T.sort(function(e, t) {
                    var i = parseInt(e, 10),
                        a = parseInt(t, 10);
                    return itemQualitySortOrder[i] < itemQualitySortOrder[a] ? 1 : -1
                });
                for (var f = 0, v = T.length; f < v; f++) {
                    var p = parseInt(T[f], 10),
                        I = h.qualities[p],
                        r = "";
                    I.count > 1 && (r = I.count + " "), r += '<span class="item-' + ItemQuality[p].toLowerCase() + '">' + I.name + "</span>", u.push(r)
                }
            }
            for (var m = 0, y = u.length; m < y; m++) m > 0 && (i += " "), y > 1 && m === y - 1 && (i += messages[Message.PenultimateAnd] + " "), i += u[m], y > 2 && m < y - 1 && (i += ",")
        }
        return i
    }

    function de(t) {
        var a = t.containedItems;
        if (a) {
            for (var n = [], o = {}, r = 0; r < a.length; r++) {
                var s = game.items[a[r]];
                if (s && !o[s.id]) {
                    if (o[s.id] = !0, void 0 !== s.minDur && null !== s.minDur && void 0 !== s.maxDur && null !== s.maxDur && (isNaN(s.minDur) || isNaN(s.maxDur))) {
                        var l = 6 - Math.floor(3 * Utilities.Random.nextFloat()),
                            p = e.defines[s.type];
                        p && p.durability && (l = p.durability - Math.floor(3 * Utilities.Random.nextFloat()));
                        var d = s.minDur,
                            u = s.maxDur;
                        s.maxDur = l, Ie.update(s, s.quality), s.minDur = s.maxDur, Utilities.Console.warn(Source.Item, "Detected item with invalid durability, fixing", s, d, u, s.maxDur)
                    }
                    c(s), n.push(s)
                } else Utilities.Console.warn(Source.Item, "Invalid item, skipping", r, s, a[r])
            }
            t.containedItems = n
        }
        var g = t.containedWithin,
            m = i(g);
        null !== m && void 0 !== m && (t.containedWithin = m)
    }

    function ue() {
        for (var e = 0; e < game.items.length; e++) {
            var t = game.items[e];
            t && de(t)
        }
        de(player.inventory);
        for (var e = 0; e < game.doodads.length; e++) {
            var i = game.doodads[e];
            i && de(i)
        }
    }

    function ge(e) {
        for (var t = {}, i = 0, a = game.items.length; i < a; i++) {
            var n = game.items[i];
            if (n && le(n.containedWithin)) {
                var o = n.containedWithin;
                if (0 === o.containedItems.length) continue;
                var r = o.x + "," + o.y + "," + o.z;
                t[r] || (t[r] = {
                    containedWithin: Te,
                    containedItems: o.containedItems,
                    weightCapacity: 1 / 0,
                    x: o.x,
                    y: o.y,
                    z: o.z
                })
            }
        }
        for (var s = Object.keys(t), l = 0; l < s.length; l++) e.push(t[s[l]])
    }

    function me() {
        for (var e = 0, t = game.tileContainers.length; e < t; e++) {
            for (var i = game.tileContainers[e], a = game.getTile(i.x, i.y, i.z), n = Object.keys(i), o = 0; o < n.length; o++) a[n[o]] = i[n[o]];
            de(a)
        }
    }

    function ye(t) {
        var i = e.defines[t.type],
            a = i.returnOnUse;
        return !!a && (o(t, a[0]), a[1] || P(t), !0)
    }

    function ce(t) {
        switch (t) {
            case ItemTypeGroup.Sharpened:
                return ItemType.SharpRock;
            case ItemTypeGroup.Carbon:
                return ItemType.Charcoal;
            case ItemTypeGroup.Arrow:
                return ItemType.WoodenArrow;
            case ItemTypeGroup.Skewer:
                return ItemType.Branch;
            case ItemTypeGroup.Bone:
                return ItemType.Bone;
            case ItemTypeGroup.Fuel:
                return ItemType.Log;
            case ItemTypeGroup.Medicinal:
                return ItemType.Thistles;
            case ItemTypeGroup.Meat:
                return ItemType.CookedMeat;
            case ItemTypeGroup.Food:
                return ItemType.WhiteMushrooms;
            case ItemTypeGroup.Insect:
                return ItemType.DeadSpider;
            case ItemTypeGroup.Water:
                return ItemType.WaterskinOfPurifiedFreshWater;
            case ItemTypeGroup.Treasure:
                return ItemType.GoldCoins;
            case ItemTypeGroup.Rock:
                return ItemType.LargeRock;
            case ItemTypeGroup.Compost:
                return ItemType.Leaves;
            case ItemTypeGroup.Fabric:
                return ItemType.WovenFabric;
            case ItemTypeGroup.Needle:
                return ItemType.BoneNeedle;
            case ItemTypeGroup.Cordage:
                return ItemType.StrippedBark;
            case ItemTypeGroup.SharpenedRock:
                return ItemType.SharpRock;
            case ItemTypeGroup.Container:
                return ItemType.Waterskin;
            case ItemTypeGroup.Pole:
                return ItemType.WoodenPole;
            case ItemTypeGroup.LightSource:
                return ItemType.BarkTorch;
            case ItemTypeGroup.Repair:
                return ItemType.Grindstone;
            case ItemTypeGroup.Tongs:
                return ItemType.WoodenTongs;
            case ItemTypeGroup.Hammer:
                return ItemType.StoneHammer;
            case ItemTypeGroup.Preservative:
                return ItemType.SlimeGelatin;
            case ItemTypeGroup.Reinforce:
                return ItemType.MeltedAmber;
            case ItemTypeGroup.GlassBottleOfPotableWater:
                return ItemType.GlassBottleOfPurifiedFreshWater;
            case ItemTypeGroup.Bullet:
                return ItemType.StoneBullet;
            case ItemTypeGroup.Transmogrify:
                return ItemType.MagicalEssence;
            case ItemTypeGroup.WaterskinOfPotableWater:
                return ItemType.WaterskinOfPurifiedFreshWater;
            case ItemTypeGroup.Pulp:
                return ItemType.Tinder;
            case ItemTypeGroup.ClayJugOfPotableWater:
                return ItemType.ClayJugOfPurifiedFreshWater;
            case ItemTypeGroup.Powder:
                return ItemType.PileOfAsh;
            case ItemTypeGroup.Equipment:
                return ItemType.TatteredPants;
            case ItemTypeGroup.Gardening:
                return ItemType.PileOfCompost;
            case ItemTypeGroup.Firemaking:
                return ItemType.HandDrill;
            case ItemTypeGroup.Bedding:
                return ItemType.LeafBedroll;
            case ItemTypeGroup.Tool:
                return ItemType.StoneAxe;
            case ItemTypeGroup.Weapon:
                return ItemType.WoodenSpear;
            case ItemTypeGroup.Health:
                return ItemType.Tourniquet;
            case ItemTypeGroup.Travel:
                return ItemType.Raft;
            case ItemTypeGroup.Housing:
                return ItemType.WoodenWall;
            case ItemTypeGroup.Heating:
                return ItemType.Campfire;
            case ItemTypeGroup.Storage:
                return ItemType.SmallBag;
            case ItemTypeGroup.Trap:
                return ItemType.Snare;
            case ItemTypeGroup.Other:
                return ItemType.String;
            case ItemTypeGroup.RawMeat:
                return ItemType.RawMeat;
            case ItemTypeGroup.CookedMeat:
                return ItemType.CookedMeat;
            case ItemTypeGroup.ContainerOfSeawater:
                return ItemType.WaterskinOfSeawater;
            case ItemTypeGroup.ContainerOfDesalinatedWater:
                return ItemType.WaterskinOfDesalinatedWater;
            case ItemTypeGroup.ContainerOfMedicinalWater:
                return ItemType.WaterskinOfMedicinalWater;
            case ItemTypeGroup.ContainerOfPurifiedFreshWater:
                return ItemType.WaterskinOfPurifiedFreshWater;
            case ItemTypeGroup.ContainerOfUnpurifiedFreshWater:
                return ItemType.WaterskinOfPurifiedFreshWater;
            default:
                return Utilities.Console.warn(Source.Item, "No default item found for group", e.groups[t].name), ItemType.None
        }
    }
    var he = Mods.Hook,
        Te = {
            containedWithin: null,
            weightCapacity: 0,
            containedItems: []
        };
    ! function(e) {
        e[e.Null = 0] = "Null", e[e.Inventory = 1] = "Inventory", e[e.Doodad = 2] = "Doodad", e[e.World = 3] = "World", e[e.Tile = 4] = "Tile", e[e.Item = 5] = "Item"
    }(e.ContainerReferenceType || (e.ContainerReferenceType = {}));
    var fe = e.ContainerReferenceType;
    e.getContainerReference = t, e.derefenceContainerReference = i;
    var ve = 0;
    e.acquireNotify = n, e.changeInto = o, e.removeContainerItems = l, e.remove = p, e.getDisassemblyComponents = u, e.getComponentWeight = g, e.getWeight = m, e.getDisassemblyWeight = y, e.setDisassemblyAndWeight = c, e.initialize = h, e.create = T, e.getDecayMax = f, e.isContainer = v, e.moveAllFromContainerToInventory = I, e.computeItemWeight = S, e.computeContainerWeight = M, e.moveAllFromContainerToContainer = k, e.moveToContainer = b, e.hasRoomInContainer = w, e.unequip = D, e.equip = C, e.use = F, e.breakContainerOnTile = R, e.drop = A, e.dropInWater = B, e.spawn = L, e.initializeMap = x, e.resetMapsInContainer = G, e.getTileContainer = U, e.placeOnTile = W, e.damageEquipment = E, e.damage = P, e.isDamaged = O;
    var Ie;
    ! function(e) {
        function t(e, t) {
            if (void 0 === t && (t = ItemQuality.None), e.quality = t, e.quality === ItemQuality.Remarkable ? e.maxDur = Math.floor(1.3 * e.maxDur) + Math.floor(3 * Utilities.Random.nextFloat()) + 6 : e.quality === ItemQuality.Exceptional ? e.maxDur = Math.floor(1.6 * e.maxDur) + Math.floor(6 * Utilities.Random.nextFloat()) + 12 : e.quality === ItemQuality.Legendary && (e.maxDur = Math.floor(1.9 * e.maxDur) + Math.floor(9 * Utilities.Random.nextFloat()) + 24), e.quality === ItemQuality.Legendary && (null === e.legendary || void 0 === e.legendary)) {
                var i = Math.floor(skillDescriptions.length * Utilities.Random.nextFloat());
                e.legendary = {
                    skill: i,
                    value: Math.floor(3 * Utilities.Random.nextFloat() + 3)
                }
            }
        }

        function i(e, t) {
            void 0 === t && (t = 0);
            var i = Math.floor(Utilities.Random.nextFloat() * (600 - t));
            return i <= 1 && e ? ItemQuality.Legendary : i <= 8 ? ItemQuality.Exceptional : i <= 40 ? ItemQuality.Remarkable : ItemQuality.None
        }
        e.update = t, e.createRandom = i
    }(Ie = e.Quality || (e.Quality = {})), e.hasRequiredDoodad = H;
    var Se = function() {
        function e(e, t) {
            this.recipe = e, this.trackItems = t, t && (this.itemComponentsRequired = [], this.itemComponentsConsumed = [], this.itemComponentsToBeSalvaged = []), this.numComponentsNeeded = 0, this.components = [];
            for (var i = 0; i < e.components.length; i++) {
                var a = e.components[i];
                this.numComponentsNeeded += a.requiredAmount, this.components.push({
                    type: a.type,
                    requiredAmount: a.requiredAmount,
                    consumedAmount: a.consumedAmount,
                    disassembleAmount: a.disassembleAmount,
                    ignoreWeight: a.ignoreWeight
                })
            }
            e.baseComponent && (this.baseComponent = e.baseComponent, this.numComponentsNeeded++)
        }
        return e.prototype.amountNeededForComponent = function(e) {
            return this.components[e].requiredAmount
        }, e.prototype.requirementsMet = function() {
            return 0 === this.numComponentsNeeded
        }, e.prototype.process = function(e) {
            for (var t = 0; t < e.containedItems.length; t++) {
                var i = e.containedItems[t];
                if (this.processItem(i)) return !0;
                var a = i;
                if (a.containedItems && a.containedItems.length > 0 && this.process(a)) return !0
            }
            return !1
        }, e.prototype.isDiscovered = function() {
            if (this.recipe.baseComponent && !this.itemBaseComponent) return !1;
            for (var e = 0; e < this.recipe.components.length; e++) {
                var t = this.recipe.components[e],
                    i = this.components[e];
                if (t.requiredAmount > 0 && t.requiredAmount === i.requiredAmount) return !1
            }
            return !0
        }, e.prototype.processItem = function(e) {
            if (this.baseComponent && !this.itemBaseComponent && (z(this.baseComponent) && Q(e.type, this.baseComponent) || e.type === this.baseComponent)) return this.itemBaseComponent = e, this.numComponentsNeeded--, 0 === this.numComponentsNeeded;
            for (var t = 0; t < this.components.length; t++) {
                var i = this.components[t],
                    a = i.requiredAmount,
                    n = i.type;
                if (a > 0 && (z(n) && Q(e.type, n) || e.type === n)) return i.requiredAmount--, this.numComponentsNeeded--, this.trackItems && (i.consumedAmount > 0 ? (i.consumedAmount--, this.itemComponentsConsumed.push(e), i.disassembleAmount > 0 && (i.disassembleAmount--, this.itemComponentsToBeSalvaged.push(e))) : this.itemComponentsRequired.push(e)), 0 === this.numComponentsNeeded
            }
            return !1
        }, e
    }();
    e.ItemRecipeRequirementChecker = Se;
    var Me;
    ! function(e) {
        e[e.Fail = 0] = "Fail", e[e.Success = 1] = "Success", e[e.CritSuccess = 2] = "CritSuccess"
    }(Me || (Me = {})), e.isItemTypeGroup = z, e.getItemTypeGroupName = V, e.isInGroup = Y, e.craft = K, e.decayItems = j, e.isItemTypeInGroup = Q, e.countItemsInContainer = X, e.countItemsInContainerByGroup = $, e.getItemInContainer = Z, e.getItemInContainerByGroup = J, e.getItemsInContainer = ee, e.getItemsInContainerByType = te, e.getItemsInContainerByGroup = ie, e.getItemInInventoryByGroup = ae, e.isItemInContainer = ne, e.isItemInContainerByGroup = oe, e.isContainableInContainer = re, e.isInInventory = se, e.isTileContainer = le, e.getItemsString = pe, e.loadReferences = ue, e.saveTileReferences = ge, e.loadTileReferences = me, e.returns = ye, e.getDefaultItemFromItemGroup = ce
}(Item || (Item = {}));
var Notifier;
! function(e) {
    var t;
    ! function(e) {
        e[e.Item = 0] = "Item", e[e.Stat = 1] = "Stat"
    }(t || (t = {}));
    var i;
    ! function(e) {
        e[e.Life = 32] = "Life", e[e.Delay = 8] = "Delay"
    }(i || (i = {}));
    var a;
    ! function(e) {
        e[e.Count = 15] = "Count", e[e.Size = 8] = "Size", e[e.SourceSize = 12] = "SourceSize"
    }(a || (a = {}));
    var n = [];
    n[StatType.EnemyHealth] = {
        pos: {
            r: 178,
            g: 0,
            b: 178
        },
        neg: {
            r: 255,
            g: 242,
            b: 46
        }
    }, n[StatType.Health] = {
        pos: {
            r: 255,
            g: 0,
            b: 0
        },
        neg: {
            r: 255,
            g: 0,
            b: 0
        }
    }, n[StatType.Hunger] = {
        pos: {
            r: 137,
            g: 0,
            b: 254
        },
        neg: {
            r: 137,
            g: 0,
            b: 254
        }
    }, n[StatType.Stamina] = {
        pos: {
            r: 0,
            g: 255,
            b: 12
        },
        neg: {
            r: 0,
            g: 255,
            b: 12
        }
    }, n[StatType.Thirst] = {
        pos: {
            r: 0,
            g: 180,
            b: 255
        },
        neg: {
            r: 0,
            g: 180,
            b: 255
        }
    }, n[StatType.Stat] = {
        pos: {
            r: 255,
            g: 153,
            b: 0
        },
        neg: {
            r: 255,
            g: 153,
            b: 0
        }
    };
    var o = function() {
        function e(e, t) {
            this.capacity = t, this.notifications = new Array(t), this.count = 0, this.mostRecent = 0, this.mostRecentLife = 0, this.nextUpdate = 0, this.spriteBatch = new SpriteBatch(e, t)
        }
        return e.prototype.setTexture = function(e, t) {
            this.spriteBatch.texSprites = e, this.spriteBatch.inverseSpriteTextureSize = t
        }, e.prototype.clear = function() {
            for (var e = 0; e < this.count; ++e) this.notifications[e].life = 0;
            this.mostRecent = 0, this.mostRecentLife = 0, this.nextUpdate = 0
        }, e.prototype.addItem = function(e, i, a) {
            var n = this.addNote(e, i, t.Item);
            n && (n.itemType = a)
        }, e.prototype.addStat = function(e, i, a, n) {
            var o = this.addNote(e, i, t.Stat);
            o && (o.statType = a, o.value = n)
        }, e.prototype.update = function() {
            if (game.time > this.nextUpdate) {
                var e = Math.min((game.time - this.nextUpdate) / 24, 10);
                this.nextUpdate = game.time + 24;
                for (var a = 0; a < e; a++) {
                    for (var n = 0; n < this.count; n++) {
                        var o = this.notifications[n];
                        o.life > 0 && (o.life < i.Life ? o.pos.y -= .0625 : o.life - 1 <= i.Life && (o.pos.x = o.pos.x ? o.pos.x : player.x, o.pos.y = o.pos.y ? o.pos.y : player.y, o.type === t.Item && audio.queueEffect(SfxType.PickUp)), o.life--)
                    }
                    this.mostRecentLife > 0 && this.mostRecentLife--
                }
            }
        }, e.prototype.render = function(e, t, a, n, o, r) {
            var s = this.spriteBatch,
                l = this.notifications;
            s.begin();
            var p, d;
            for (p = this.mostRecent; p < this.count; p++) d = l[p], d.life > 0 && d.life <= i.Life && this.renderNote(d);
            for (p = 0; p < this.mostRecent; p++) d = l[p], d.life > 0 && d.life <= i.Life && this.renderNote(d);
            s.end(), s.render(e, t, n, o, r)
        }, e.prototype.addNote = function(e, t, a) {
            if (!game.fov.canSeeTile(e, t)) return null;
            e === player.x && t === player.y && (e = t = NaN), this.mostRecent === this.capacity && (this.mostRecent = 0);
            var n = this.mostRecentLife < i.Life - i.Delay ? i.Life : this.mostRecentLife + i.Delay;
            if (this.mostRecent === this.count) {
                var o = {
                    type: a,
                    pos: new Vec2([e, t]),
                    life: n
                };
                return this.notifications[this.mostRecent] = o, this.count++, this.mostRecent++, this.mostRecentLife = n, o
            }
            var o = this.notifications[this.mostRecent];
            return o.life <= 0 ? (o.type = a, o.pos.x = e, o.pos.y = t, o.life = n, this.mostRecent++, this.mostRecentLife = n, o) : null
        }, e.prototype.renderNote = function(e) {
            var i;
            if (e.type === t.Item) {
                var o = e,
                    r = SpriteAtlas.items[o.itemType];
                if (!r) return;
                if (i = r.texCoord, !i) return;
                this.spriteBatch.add(e.pos.x, e.pos.y, 16, i.x, i.y, 16, 0, 0, 255, 255, 255, Math.floor(255 * Math.min(e.life / 8, 1)))
            } else if (e.type === t.Stat) {
                var s = void 0,
                    l = void 0,
                    p = e;
                p.value < 0 ? (l = n[p.statType].neg, s = p.value.toString()) : (l = n[p.statType].pos, s = "+" + p.value.toString());
                var d = (a.Size - 2) / WorldRenderer.getSubTileSize() * .5,
                    u = s.length * d * -.5;
                i = SpriteAtlas.text.texCoord;
                for (var g = s.length; g--;) {
                    var m = s[g];
                    this.spriteBatch.add(e.pos.x + u + (g + .5) * d, e.pos.y, a.Size, i.x + 1 + (m.charCodeAt(0) - 43) * a.SourceSize, i.y + 1, a.SourceSize, 0, 0, l.r, l.g, l.b, Math.floor(255 * Math.min(e.life / 8, 1)))
                }
            }
        }, e
    }();
    e.Notifier = o
}(Notifier || (Notifier = {}));
var ParticleSystem = function() {
        function e(t, i) {
            void 0 === i && (i = 256), this.particleSize = 10, this.lastUsedParticle = 0, this.count = 0, this.capacity = i, this.gl = t, this.particles = new Float32Array(this.particleSize * i), this.positionSizeData = new Float32Array(3 * i), this.colorData = new Uint8Array(4 * i);
            var a = t.createBuffer(),
                n = t.createBuffer();
            if (!a || !n) throw "Unable to create buffers";
            this.positionSizeBuf = a, t.bindBuffer(t.ARRAY_BUFFER, this.positionSizeBuf), t.bufferData(t.ARRAY_BUFFER, this.positionSizeData.byteLength, t.STREAM_DRAW), this.colorBuf = n, t.bindBuffer(t.ARRAY_BUFFER, this.colorBuf), t.bufferData(t.ARRAY_BUFFER, this.colorData.byteLength, t.STREAM_DRAW), e.shaderProgram || (e.shaderProgram = new CompiledProgram(t, "particle-shader-vertex", "particle-shader-fragment"))
        }
        return e.prototype.spawn = function(e, t, i, a, n, o) {
            for (var r = 1; r <= 5; r++) {
                var s = Math.floor(50 * Utilities.Random.nextFloat() - 25),
                    l = i + s,
                    p = a + s,
                    d = n + s,
                    u = Math.max(game.getAmbientLightLevel(), world.layers[player.z].lightLevelMap.get(e, t) / 255);
                l *= u, d *= u, p *= u;
                for (var g = 0; g < o; g++) {
                    var m = this.findUnusedParticle() * this.particleSize;
                    this.particles[m + 0] = 50, this.particles[m + 1] = e, this.particles[m + 2] = t, this.particles[m + 3] = Math.floor(8 * Utilities.Random.nextFloat() - 4), this.particles[m + 4] = Math.floor(8 * Utilities.Random.nextFloat() - 4), this.particles[m + 5] = Math.floor(3 * Utilities.Random.nextFloat() + 1), this.particles[m + 6] = Math.clamp255(l), this.particles[m + 7] = Math.clamp255(p), this.particles[m + 8] = Math.clamp255(d), this.particles[m + 9] = 255
                }
            }
        }, e.prototype.clear = function() {
            this.count = 0, this.lastUsedParticle = 0;
            for (var e = 0; e < this.capacity; ++e) this.particles[e * this.particleSize] = 0
        }, e.prototype.simulate = function(e) {
            this.count = 0;
            for (var t = 0; t < this.capacity; ++t) {
                var i = t * this.particleSize,
                    a = this.particles[i];
                a > 0 && (this.particles[i]--, a > 36 && (this.particles[i + 1] += .0125 * this.particles[i + 3], this.particles[i + 2] += .0125 * this.particles[i + 4]), this.particles[i + 9] -= 5, this.positionSizeData[3 * this.count + 0] = this.particles[i + 1], this.positionSizeData[3 * this.count + 1] = this.particles[i + 2], this.positionSizeData[3 * this.count + 2] = this.particles[i + 5], this.colorData[4 * this.count + 0] = this.particles[i + 6], this.colorData[4 * this.count + 1] = this.particles[i + 7], this.colorData[4 * this.count + 2] = this.particles[i + 8], this.colorData[4 * this.count + 3] = this.particles[i + 9], this.count++)
            }
            return this.count > 0
        }, e.prototype.render = function(t, i) {
            var a = this.gl;
            a.bindBuffer(a.ARRAY_BUFFER, this.positionSizeBuf), a.bufferData(a.ARRAY_BUFFER, this.positionSizeData.byteLength, a.STREAM_DRAW), a.bufferSubData(a.ARRAY_BUFFER, 0, new DataView(this.positionSizeData.buffer, 0, 12 * this.count)), a.bindBuffer(a.ARRAY_BUFFER, this.colorBuf), a.bufferData(a.ARRAY_BUFFER, this.colorData.byteLength, a.STREAM_DRAW), a.bufferSubData(a.ARRAY_BUFFER, 0, new DataView(this.colorData.buffer, 0, 4 * this.count));
            var n = e.shaderProgram;
            a.useProgram(n.program), a.enableVertexAttribArray(n.attribs.a_position), a.bindBuffer(a.ARRAY_BUFFER, this.positionSizeBuf), a.vertexAttribPointer(n.attribs.a_position, 2, a.FLOAT, !1, 12, 0), a.enableVertexAttribArray(n.attribs.a_pointSize), a.vertexAttribPointer(n.attribs.a_pointSize, 1, a.FLOAT, !1, 12, 8), a.enableVertexAttribArray(n.attribs.a_color), a.bindBuffer(a.ARRAY_BUFFER, this.colorBuf), a.vertexAttribPointer(n.attribs.a_color, 4, a.UNSIGNED_BYTE, !0, 0, 0);
            var o = WorldRenderer.getSubTileSize(),
                r = renderer.getTileScale(),
                s = renderer.getViewport();
            a.uniform1f(n.uniforms.lightAmbient, 1 - .75 * game.dayNight), a.uniform1f(n.uniforms.zoom, r), a.uniform1f(n.uniforms.tileSize, 2 * o), a.uniform2f(n.uniforms.inverseViewportSize, 2 * r / s.x, 2 * r / s.y), a.uniform2f(n.uniforms.viewOffset, t, i), a.enable(a.BLEND), a.drawArrays(a.POINTS, 0, this.count), a.disableVertexAttribArray(n.attribs.a_position), a.disableVertexAttribArray(n.attribs.a_pointSize), a.disableVertexAttribArray(n.attribs.a_color)
        }, e.prototype.findUnusedParticle = function() {
            var e;
            for (e = this.lastUsedParticle; e < this.capacity; ++e)
                if (this.particles[e * this.particleSize] <= 0) return this.lastUsedParticle = e, e;
            for (e = 0; e < this.lastUsedParticle; ++e)
                if (this.particles[e * this.particleSize] <= 0) return this.lastUsedParticle = e, e;
            return 0
        }, e
    }(),
    PlayerDefense = function(e) {
        function t(t, i, a) {
            e.call(this, t, i, a), this.base = t, this.resist = i, this.vulnerable = a
        }
        return __extends(t, e), t
    }(Defense),
    Player = function() {
        function e() {
            this.moveType = MoveType.Land, this.attack = 0, this.attackFromEquip = 0, this.deathBy = messages[Message.Mysteriously], this.defense = new PlayerDefense(0, new Resistances(DamageType.Blunt, 0, DamageType.Piercing, 0, DamageType.Fire, 0, DamageType.Slashing, 0), new Vulnerabilities(DamageType.Blunt, 0, DamageType.Piercing, 0, DamageType.Fire, 0, DamageType.Slashing, 0)), this.defenses = [], this.dehydration = 0, this.dexterity = 0, this.dialog = {}, this.direction = {
                x: 0,
                y: 0
            }, this.facingDirection = FacingDirection.None, this.health = 0, this.hintSeen = [], this.hunger = 0, this.inventory = {
                containedWithin: null,
                weightCapacity: 1 / 0,
                containedItems: new Array
            }, this.lightBonus = 0, this.monsterSpawner = 200, this.monsterSpawnTimer = 0, this.state = PlayerState.None, this.skills = skillSet(), this.stamina = 0, this.starvation = 0, this.status = {
                bleeding: !1,
                burned: !1,
                poisoned: !1
            }, this.swimming = !1, this.stepCounter = 0, this.strength = 0, this.thirst = 0, this.turns = 0, this.weight = 0, this.x = 0, this.y = 0, this.z = Z_NORMAL, this.thirstTimer = 0, this.staminaTimer = 0, this.healthTimer = 0, this.hungerTimer = 0, this.fromX = 0, this.fromY = 0, this.nextX = -1, this.nextY = -1, this.malignityPlus = 0, this.malignityNegative = 0, this.score = 0, this.weightBonus = 20, this.resetDefense()
        }
        return e.prototype.attributes = function() {
            this.attack = Utilities.roundNumber(this.skills[SkillType.Tactics].percent / 10, 0) + 1, ui.refreshAttributes()
        }, e.prototype.skillGain = function(e, t, i) {
            var a = Math.ceil(100 * Utilities.Random.nextFloat());
            if (this.skills[e].percent <= a && this.skills[e].percent < 100 || i) {
                t || (t = this.skills[e].percent < 5 ? 1 : this.skills[e].percent < 10 ? .5 : this.skills[e].percent < 20 ? .4 : this.skills[e].percent < 40 ? .3 : this.skills[e].percent < 80 ? .2 : .1), game.dailyChallenge && (t = 4 * t), this.skills[e].core = Utilities.roundNumber(this.skills[e].core + t, 2), this.skills[e].core > 100 && (this.skills[e].core = 100), this.skills[e].percent = this.skills[e].core + this.skills[e].bonus, skillDescriptions[e].malignity && this.updateMalignity(t * skillDescriptions[e].malignity), this.score += 100 * t, this.attributes();
                var n = skillDescriptions[e].name;
                n && ui.displayMessage(Message.SkillHasRaised, MessageType.Skill, n.toLocaleLowerCase(), this.skills[e].percent), this.addMilestone(MilestoneType.Grandmaster, this.skills[e].core)
            }
            ui.updateSkillsDialog(), this.statGain(skillDescriptions[e].attribute, !1)
        }, e.prototype.staminaCheck = function() {
            if (this.stamina <= 0) {
                ui.displayMessage(Message.WorkingYourselfIntoExhaustion, MessageType.Bad);
                var e = Utilities.Random.randomFromInterval(Math.ceil(player.strength / 60), Math.ceil(player.strength / 40));
                return this.damage(-e, messages[Message.ByWorkingYourselfIntoExhaustion]), this.stamina = 1, !1
            }
            return !0
        }, e.prototype.checkWeight = function() {
            player.weight > player.strength + player.weightBonus ? (ui.displayHint(HintType.Encumbered), ui.displayMessage(Message.CarryingTooMuchWeight, MessageType.Bad), player.stamina -= Math.round((player.weight - player.strength) / 2), game.addDelay(Delay.LongPause)) : player.weight > .9 * (player.strength + player.weightBonus) && (ui.displayHint(HintType.Encumbered), game.addDelay(Delay.ShortPause))
        }, e.prototype.addMilestone = function(e, t) {
            if (void 0 === t && (t = null), milestoneData[e] && milestoneData[e].amount !== -1) {
                if (null !== t && milestones[e].dataType === MilestoneDataType.Counter) {
                    var i = milestoneData[e].data;
                    i && i.indexOf(t) === -1 && (i.push(t), milestoneData[e].amount++)
                } else null !== t && milestones[e].dataType === MilestoneDataType.Check ? t > milestoneData[e].amount && (milestoneData[e].amount = t) : milestoneData[e].amount++; if (milestoneData[e].amount >= milestones[e].amount) {
                    ui.displayHint(HintType.Milestones), milestoneData[e].amount = -1, this.statGain(StatType.Stamina, !0), this.statGain(StatType.Hunger, !0), this.statGain(StatType.Health, !0);
                    var a = milestones[e].skills;
                    a && this.skillGain(a[Math.floor(Utilities.Random.nextFloat() * a.length)], 5, !0), ui.displayMessage(Message.EarnedMilestone, MessageType.Good, milestones[e].name, milestones[e].description)
                }
            }
            ui.updateMilestonesDialog()
        }, e.prototype.damage = function(e, t, i) {
            void 0 === i && (i = 0), Mods.callHook(Mods.Hook.OnPlayerDamage, e, t) !== !1 && (this.health += e, game.notifier.addStat(player.x, player.y, StatType.Health, e), audio.queueEffect(SfxType.Hurt, i), player.deathBy = t)
        }, e.prototype.calculateEquipmentStats = function() {
            for (var e = Object.keys(this.skills), t = 0; t < e.length; t++) {
                var i = this.skills[parseInt(e[t], 10)];
                i.bonus = 0, i.percent = i.core
            }
            this.attackFromEquip = 0, this.lightBonus = 0, game.fov && (game.fov.radius = 15), this.resetDefense();
            for (var a = 0, n = this.inventory.containedItems.length; a < n; a++) {
                var o = this.inventory.containedItems[a],
                    r = o.type;
                if (o.equipped) {
                    var s = Item.defines[r];
                    if (!s) continue;
                    if (s.defense) {
                        this.defense.base += s.defense.base;
                        for (var l = s.defense.resist, p = Object.keys(l), d = 0, u = p.length; d < u; d++) {
                            var g = parseInt(p[d], 10);
                            switch (g) {
                                case DamageType.Slashing:
                                    this.defense.resist[DamageType.Slashing] += l[g];
                                    break;
                                case DamageType.Blunt:
                                    this.defense.resist[DamageType.Blunt] += l[g];
                                    break;
                                case DamageType.Piercing:
                                    this.defense.resist[DamageType.Piercing] += l[g];
                                    break;
                                case DamageType.Fire:
                                    this.defense.resist[DamageType.Fire] += l[g]
                            }
                        }
                        for (var m = s.defense.vulnerable, y = Object.keys(m), c = 0, u = y.length; c < u; c++) {
                            var h = parseInt(y[c], 10);
                            switch (h) {
                                case DamageType.Slashing:
                                    this.defense.vulnerable[DamageType.Slashing] += m[h];
                                    break;
                                case DamageType.Blunt:
                                    this.defense.vulnerable[DamageType.Blunt] += m[h];
                                    break;
                                case DamageType.Piercing:
                                    this.defense.vulnerable[DamageType.Piercing] += m[h];
                                    break;
                                case DamageType.Fire:
                                    this.defense.vulnerable[DamageType.Fire] += m[h]
                            }
                        }
                    }
                    if (s.attack && (this.attackFromEquip += s.attack), s.onEquipEffect && (s.onEquipEffect[0] === OnEquipType.LightSource ? this.lightBonus < s.onEquipEffect[1] ? this.lightBonus = s.onEquipEffect[1] : this.lightBonus += 1 : game.fov.radius = s.onEquipEffect[1]), o.legendary) {
                        var T = this.skills[o.legendary.skill],
                            f = o.legendary.value;
                        T.bonus += f, T.percent += f
                    }
                }
            }
            this.defense.base += Utilities.roundNumber(this.skills[SkillType.Parrying].percent / 10, 0);
            for (var v = 1; v < DamageType.Last; v <<= 1) this.defenses[v] = this.defense.resist[v] - this.defense.vulnerable[v];
            ui.updateSkillsDialog()
        }, e.prototype.updateDirection = function(e) {
            var t = this.directionToMovement(e);
            this.direction.x = t.x, this.direction.y = t.y, this.facingDirection = e, Mods.callHook(Mods.Hook.OnMoveDirectionUpdate, e)
        }, e.prototype.directionToMovement = function(e) {
            return {
                x: e === FacingDirection.West ? -1 : e === FacingDirection.East ? 1 : 0,
                y: e === FacingDirection.North ? -1 : e === FacingDirection.South ? 1 : 0
            }
        }, e.prototype.canCarve = function() {
            if (!Actions.canTryCarve()) return null;
            for (var e = 0, t = Item.getItemsInContainer(player.inventory); e < t.length; e++) {
                var i = t[e],
                    a = Item.defines[i.type];
                if (a && a.use && a.use.indexOf(ActionType.Carve) !== -1) return i
            }
            return null
        }, e.prototype.canJump = function() {
            var e = 0,
                t = 0;
            1 === player.direction.x ? e = 1 : player.direction.x === -1 ? e = -1 : 1 === player.direction.y ? t = 1 : player.direction.y === -1 && (t = -1);
            var i = game.getTile(player.x + player.direction.x + e, player.y + player.direction.y + t),
                a = game.getTile(player.x, player.y, player.z),
                n = game.getTileInFrontOfPlayer(),
                o = terrains[Utilities.TileHelpers.getType(n)],
                r = terrains[Utilities.TileHelpers.getType(i)],
                s = terrains[Utilities.TileHelpers.getType(a)];
            return !(!o.passable && !o.water || !r.passable && !r.water || s.water && r.water || void 0 !== i.doodadId && (void 0 === i.doodadId || Doodad.defines[game.doodads[i.doodadId].type].blockMove) || void 0 !== i.monsterId || void 0 !== n.monsterId && !monsters[game.monsters[n.monsterId].type].jumpOver || void 0 !== n.doodadId && (void 0 === n.doodadId || Doodad.defines[game.doodads[n.doodadId].type].blockJump))
        }, e.prototype.jump = function() {
            var e = Math.floor(10 + player.weight / 2);
            if (player.stamina < e) return void ui.displayMessage(Message.TooExhaustedToJump);
            var t = 0,
                i = 0;
            1 === player.direction.x ? t = 1 : player.direction.x === -1 ? t = -1 : 1 === player.direction.y ? i = 1 : player.direction.y === -1 && (i = -1), player.x += player.direction.x + t, player.y += player.direction.y + i, player.nextX = player.x, player.nextY = player.y, player.stamina -= e, game.passTurn(TurnType.CheckUnderPlayer)
        }, e.prototype.drink = function() {
            var e = game.getTileInFrontOfPlayer();
            e && (terrains[Utilities.TileHelpers.getType(e)].water || terrains[Utilities.TileHelpers.getType(e)].shallowWater ? (ui.displayMessage(Message.YouDrank, MessageType.None, game.getName(terrains[Utilities.TileHelpers.getType(game.getTile(player.x + player.direction.x, player.y + player.direction.y, player.z))])), terrains[Utilities.TileHelpers.getType(e)].freshWater ? (Actions.consume(ItemType.WaterskinOfUnpurifiedFreshWater, ActionType.Drink), terrains[Utilities.TileHelpers.getType(e)].shallowWater && game.changeTile({
                type: TerrainType.Dirt
            }, player.x + player.direction.x, player.y + player.direction.y, player.z, !1)) : Actions.consume(ItemType.WaterskinOfSeawater, ActionType.Drink)) : Utilities.TileHelpers.getType(e) === TerrainType.Snow && (ui.displayMessage(Message.YouDrank, MessageType.None, game.getName(terrains[Utilities.TileHelpers.getType(game.getTile(player.x + player.direction.x, player.y + player.direction.y, player.z))])), Actions.consume(ItemType.PileOfSnow, ActionType.Drink), game.changeTile({
                type: TerrainType.Dirt
            }, player.x + player.direction.x, player.y + player.direction.y, player.z, !1)), game.createParticles(player.x + player.direction.x, player.y + player.direction.y, 12, 128, 247), game.passTurn())
        }, e.prototype.getSerializationProperties = function(e) {
            return ["attack", "attackFromEquip", "dexterity", "defense", "deathBy", "health", "hunger", "thirst", "monsterSpawner", "hintSeen", "inventory", "state", "skills", "status", "stamina", "starvation", "dehydration", "stepCounter", "strength", "turns", "weight", "lightBonus", "direction", "facingDirection", "x", "y", "z", "monsterSpawnTimer", "thirstTimer", "staminaTimer", "healthTimer", "hungerTimer", "gender", "swimming", "malignityPlus", "malignityNegative", "score"]
        }, e.prototype.staminaReduction = function(e) {
            var t = Math.ceil(100 * Utilities.Random.nextFloat());
            player.skills[e].percent <= t + 25 && (player.stamina -= 1)
        }, e.prototype.updateMalignity = function(e) {
            e <= -1 ? this.malignityNegative += e : this.malignityPlus += e, (this.malignityNegative <= -6e3 || this.malignityPlus >= 6e3) && ui.displayHint(HintType.Malignity)
        }, e.prototype.getMalignity = function() {
            return this.malignityPlus + this.malignityNegative
        }, e.prototype.statGain = function(e, t) {
            switch (e) {
                case StatType.Stamina:
                    if (0 !== Math.floor(Utilities.Random.nextFloat() * (30 + this.dexterity)) && !t) return;
                    this.updateMalignity(500), this.dexterity++, ui.displayMessage(Message.DexterityIncreasing, MessageType.Stat);
                    break;
                case StatType.Hunger:
                    if (0 !== Math.floor(Utilities.Random.nextFloat() * (100 + this.starvation)) && !t) return;
                    this.updateMalignity(250), this.starvation++, this.dehydration++, ui.displayMessage(Message.MetabolismSlowed, MessageType.Stat);
                    break;
                case StatType.Health:
                    if (0 !== Math.floor(Utilities.Random.nextFloat() * (60 + this.strength)) && !t) return;
                    this.updateMalignity(750), this.strength++, ui.displayMessage(Message.StrengthIncreasing, MessageType.Stat)
            }
            this.score += 500, audio.queueEffect(SfxType.Exceptional), game.notifier.addStat(player.x, player.y, StatType.Stat, 1)
        }, e.prototype.resetDefense = function() {
            this.defense.base = 0;
            for (var e = 1; e < DamageType.Last; e <<= 1) this.defenses[e] = 0, this.defense.resist[e] = 0, this.defense.vulnerable[e] = 0
        }, e
    }(),
    SpriteAtlas = function() {
        function e() {}
        return e.monsters = [], e.corpses = [], e.tileEvents = [], e.items = [], e.itemsSmall = [], e.equips = {}, e
    }(),
    ResourceLoader;
! function(e) {
    function t(e) {
        k = new SpriteUtil.TexturePacker(e, 1536, 1536, (!1), 1), b = new SpriteUtil.TexturePacker(e, 1024, 1024, (!0), 0), w = WorldRenderer.getSubTileSize()
    }

    function i(e) {
        R++, R > 1 || a(e)
    }

    function a(e) {
        e.spriteTexture = k.texture, e.spriteTextureSizeInversed = k.inverseTextureSize, e.tileTexture = b.texture, e.tileTextureSizeInversed = b.inverseTextureSize, D = {};
        for (var t = Mods.getLoadedMods(), i = 0; i < t.length; i++) {
            var o = t[i].info.image_overrides;
            if (o && Array.isArray(o))
                for (var r = 0; r < o.length; r++) {
                    var s = o[r].replace(/\\/g, "/");
                    D[s] = (t[i].path + "/" + s).replace(/\\/g, "/")
                }
        }
        var l = 0,
            u = function() {
                l++, Utilities.Console.log(Source.ResourceLoader, "loadResources packed", l), 2 === l && (TileAtlas.doodads[DoodadType.SetHobgoblinSnare] = TileAtlas.doodads[DoodadType.SetSnare], TileAdaptor.setDefaultBackground(TileAtlas.terrain[TerrainType.Dirt]), clearInterval(M), R--, R > 0 ? a(e) : game.postLoadResources())
            };
        p(), d(), g(), y(), T(), v(), S(), k.load(u), b.load(u), M = setInterval(n, 10)
    }

    function n() {
        if (0 !== A.length)
            for (; A.length > 0 && F < B;) {
                F++;
                var e = A.shift();
                e && e()
            }
    }

    function o(e) {
        A.push(e)
    }

    function r() {
        F--
    }

    function s(e, t) {
        var i = null,
            a = "images/" + C[e].toString().toLowerCase() + "/";
        switch (e) {
            case C.Corpse:
            case C.Monster:
                a += MonsterType[t].toLowerCase(), i = monsters;
                break;
            case C.Doodad:
                a += DoodadType[t].toLowerCase(), i = Doodad.defines;
                break;
            case C.Item:
            case C.Equip:
                a += ItemType[t].toLowerCase(), i = Item.defines;
                break;
            case C.Terrain:
                a += TerrainType[t].toLowerCase(), i = terrains
        }
        if (null !== i && i[t]) {
            var n = i[t].mod;
            if (null !== n && void 0 !== n) {
                var o = Mods.getPath(n);
                a = o + "/" + a
            }
        }
        return a.replace(/\\/g, "/")
    }

    function l(e) {
        return D[e]
    }

    function p() {
        k.addSprite("images/character/raft.png", function(e) {
            SpriteAtlas.raft = e
        }), k.addSprite("images/character/player.png", function(e) {
            SpriteAtlas.player = e
        }), k.addSprite("images/character/hair_man.png", function(e) {
            SpriteAtlas.playerHairMan = e
        }), k.addSprite("images/character/hair_woman.png", function(e) {
            SpriteAtlas.playerHairWoman = e
        })
    }

    function d() {
        var e;
        for (e in MonsterType) isNaN(e) || u(parseInt(e, 10));
        k.addSprite("images/monster/shadow.png", function(e) {
            SpriteAtlas.shadow = e
        })
    }

    function u(e) {
        monsters[e] && k.addSprite(s(C.Monster, e) + ".png", function(t) {
            t.texOffsetY = (Math.ceil(t.texSize / 8) - w) / (2 * w), SpriteAtlas.monsters[e] = t
        })
    }

    function g() {
        var e;
        for (e in MonsterType) isNaN(e) || m(parseInt(e, 10))
    }

    function m(e) {
        (e === MonsterType.Blood || monsters[e] && !monsters[e].noCorpse) && k.addSprite(s(C.Corpse, e) + ".png", function(t) {
            SpriteAtlas.corpses[e] = t
        })
    }

    function y() {
        var e;
        for (e in ItemType)
            if (!isNaN(e)) {
                var t = parseInt(e, 10),
                    i = Item.defines[t];
                i && (c(t, s(C.Item, t)), i.equip && h(t, s(C.Equip, t)))
            }
    }

    function c(e, t) {
        k.addSprite(t + ".png", function(t, i) {
            SpriteAtlas.items[e] = t, i && Utilities.ItemImageCache.queueCreateItemImageOutlines(i, e)
        }), k.addSprite(t + "_8.png", function(t) {
            SpriteAtlas.itemsSmall[e] = t
        })
    }

    function h(e, t) {
        k.addSprite(t + ".png", function(t, i) {
            SpriteAtlas.equips[e] = t
        })
    }

    function T() {
        var e;
        for (e in TerrainType) isNaN(e) || f(parseInt(e, 10))
    }

    function f(e) {
        var t = terrains[e];
        t && !t.doodad && t.terrainType === e && b.addSprite(s(C.Terrain, e) + ".png", function(t) {
            terrains[e].isMountain ? TileAtlas.terrain[e] = new MountainTileInfo(t.texCoord.x / w, t.texCoord.y / w) : TileAtlas.terrain[e] = new TerrainTileInfo(t.texCoord.x / w, t.texCoord.y / w)
        })
    }

    function v() {
        var e;
        for (e in DoodadType) isNaN(e) || I(parseInt(e, 10));
        k.addSprite("images/doodad/fire.png", function(e) {
            SpriteAtlas.tileEvents[TileEvent.Type.Fire] = e
        })
    }

    function I(e) {
        var t = Doodad.defines[e];
        t && b.addSprite(s(C.Doodad, e) + ".png", function(i) {
            var a = i.texCoord.copy().scale(1 / w);
            t && t.tall && (a.y += 2), TileAtlas.doodads[e] = new Doodad.DoodadInfo(e, (!(!t || !t.tall)), a.x, a.y, (!(!t || !t.animated)))
        })
    }

    function S() {
        k.addSprite("images/ui/text.png", function(e) {
            SpriteAtlas.text = e
        })
    }! function(e) {
        e[e.Monster = 0] = "Monster", e[e.Corpse = 1] = "Corpse", e[e.Item = 2] = "Item", e[e.Equip = 3] = "Equip", e[e.Terrain = 4] = "Terrain", e[e.Doodad = 5] = "Doodad"
    }(e.PathType || (e.PathType = {}));
    var M, k, b, w, D, C = e.PathType,
        F = 0,
        R = 0,
        A = [],
        B = 20;
    e.initialize = t, e.loadResources = i, e.continueLoading = n, e.takeLoadingSlot = o, e.releaseLoadingSlot = r, e.getPath = s, e.getImageOverride = l
}(ResourceLoader || (ResourceLoader = {}));
var SaveLoad;
! function(e) {
    function t() {
        return x && x.isEnabled()
    }

    function i() {
        x = new B
    }

    function a() {
        x.isReady() ? c(D, function(e, t) {
            C = !0, game.onGlobalSlotLoaded(e, t)
        }) : window.setTimeout(e.initialize, 10)
    }

    function n(i) {
        if (t())
            for (var a = 0; a < e.maxSlots; a++) x.isSlotUsed(a, i)
    }

    function o(e, t) {
        x.isSlotUsed(e, t)
    }

    function r(t, i) {
        var a = 0,
            o = [];
        n(function(n, r) {
            i && i(n, r), a++, r && o.push(n), a === e.maxSlots && t(o.length, o)
        })
    }

    function s(t) {
        r(function(i, a) {
            if (i < e.maxSlots)
                for (var n = 0; n < e.maxSlots; n++)
                    if (a.indexOf(n) === -1) return void t(n);
            t(null)
        })
    }

    function l(e, t) {
        return void 0 === t && (t = !1), t ? LZString.compressToBase64(e) : LZString.compressToUTF16(e)
    }

    function p(e, t) {
        return void 0 === t && (t = !1), t ? LZString.decompressFromBase64(e) : LZString.decompressFromUTF16(e)
    }

    function d(e, t, i) {
        void 0 === i && (i = !1);
        for (var a = e === D ? R : F, n = 0; n < a.length; n++) {
            var o = a[n],
                r = o.key;
            o.skipCompression && !i || (t.data[r] = l(t.data[r], i))
        }
    }

    function u(e, t, i) {
        void 0 === i && (i = !1);
        for (var a = e === D ? R : F, n = 0; n < a.length; n++) {
            var o = a[n],
                r = o.key;
            o.skipCompression && !i || (t.data[r] = p(t.data[r], i))
        }
    }

    function g(e) {
        var t = new A;
        t.version = game.version;
        for (var i = e === D ? R : F, a = 0; a < i.length; a++) {
            var n = i[a].property,
                o = Utilities.windowKeysToParentObject(n),
                r = n[n.length - 1],
                s = new Serializer(o, r, t.version);
            t.data[i[a].key] = s.saveToString()
        }
        return t
    }

    function m(e, t, i) {
        d(e, t), x.saveToSlot(e, t, function(e, t) {
            Utilities.Console.log(Source.SaveLoad, "Save", e, t), i(e, t)
        })
    }

    function y(t, i) {
        e.saveTime = Date.now(), C && m(D, g(D), function() {}), t >= 0 && (game.setupSave(t), m(t, g(t), i))
    }

    function c(e, t) {
        h(e, function(e, i, a) {
            if (i) {
                var n = e === D ? R : F,
                    o = void 0;
                for (o = 0; o < n.length; o++) {
                    var r = n[o].property,
                        s = Utilities.windowKeysToParentObject(r),
                        l = r[r.length - 1];
                    null !== s && void 0 !== s && T(a, s, l, n[o].key, n[o].skipCompression)
                }
                e !== D && game.onSaveLoaded()
            }
            t(e, i)
        })
    }

    function h(e, t) {
        var i, a, n = new A,
            o = e === D ? R : F;
        for (i = 0; i < o.length; i++) a = o[i].key, n.data[a] = null;
        x.loadFromSlot(e, n, function(e, i) {
            t(e, i, n)
        })
    }

    function T(e, t, i, a, n) {
        void 0 === a && (a = i), void 0 === n && (n = !1);
        var o = new Serializer(t, i, e.version);
        o.loadToObject(n ? e.data[a] : p(e.data[a]))
    }

    function f(e, t, i) {
        void 0 === i && (i = void 0);
        var a = {};
        return T(e, a, t), void 0 === i ? a[t] : a[t][i]
    }

    function v(e, t, i, a, n) {
        h(e, function(e, o, r) {
            var s = new Serializer(t, i, r.version);
            r.data[a] = l(s.saveToString()), x.saveToSlot(e, r, n)
        })
    }

    function I(e, t, i, a, n) {
        h(e, function(e, o, r) {
            var s = {},
                d = new Serializer(s, t, r.version);
            d.loadToObject(p(r.data[t])), s[t][i] = a;
            var u = new Serializer(s, t, r.version);
            r.data[t] = l(u.saveToString()), x.saveToSlot(e, r, n)
        })
    }

    function S(e, t) {
        h(e, function(e, i, a) {
            u(e, a), d(e, a, !0), t(e, i, JSON.stringify(a))
        })
    }

    function M(e, t, i) {
        try {
            var a = JSON.parse(t);
            u(e, a, !0), m(e, a, i)
        } catch (n) {
            i(null, null)
        }
    }

    function k(e, i) {
        !t() || e < 0 || x.deleteSlot(e, i)
    }

    function b(e) {
        t() && x.deleteAll(e)
    }

    function w() {
        t() && x.transferSaves()
    }
    var D = 26,
        C = !1;
    e.maxSlots = 5, e.saveTime = 0;
    var F = [{
            key: "game",
            property: ["game"]
        }, {
            key: "player",
            property: ["player"]
        }, {
            key: "ui",
            property: ["ui"]
        }, {
            key: "world",
            property: ["world"],
            skipCompression: !0
        }, {
            key: "gameSlotName",
            property: ["game", "slotName"]
        }, {
            key: "gameWonGame",
            property: ["game", "wonGame"]
        }, {
            key: "saveTime",
            property: ["SaveLoad", "saveTime"]
        }, {
            key: "modsSaveData",
            property: ["Mods", "saveData"]
        }, {
            key: "modsUnloadable",
            property: ["Mods", "unloadable"]
        }, {
            key: "allocatedEnums",
            property: ["Utilities", "Enums", "allocatedEnums"]
        }],
        R = [{
            key: "lastPlayedVersion",
            property: ["game", "lastPlayedVersion"]
        }, {
            key: "gamesPlayed",
            property: ["game", "playedCount"]
        }, {
            key: "options",
            property: ["game", "options"]
        }, {
            key: "crafted",
            property: ["game", "crafted"]
        }, {
            key: "newCrafted",
            property: ["game", "newCrafted"]
        }, {
            key: "highscores",
            property: ["game", "highscores"]
        }, {
            key: "milestoneData",
            property: ["milestoneData"]
        }, {
            key: "modsSaveDataGlobal",
            property: ["Mods", "saveDataGlobal"]
        }, {
            key: "modState",
            property: ["Mods", "modState"]
        }, {
            key: "languagesSaveData",
            property: ["Languages", "saveData"]
        }],
        A = function() {
            function e() {
                this.data = {}
            }
            return e
        }();
    e.SaveObject = A;
    var B = function() {
            function e() {}
            return e.prototype.isEnabled = function() {
                return void 0 !== localStorage
            }, e.prototype.isReady = function() {
                return !0
            }, e.prototype.transferSaves = function() {}, e.prototype.isSlotUsed = function(e, t, i) {
                var a = localStorage.getItem(e + "version");
                return t(e, null !== a && void 0 !== a), !0
            }, e.prototype.saveToSlot = function(e, t, i) {
                localStorage.setItem(e + "version", t.version);
                for (var a = 0, n = Object.keys(t.data), o = 0; o < n.length; o++) {
                    var r = n[o],
                        s = t.data[r];
                    a += 2 * s.length, localStorage.setItem(e + r, s)
                }
                i(e, a)
            }, e.prototype.loadFromSlot = function(e, t, i) {
                t.version = localStorage.getItem(e + "version");
                for (var a = Object.keys(t.data), n = 0; n < a.length; n++) {
                    var o = a[n];
                    t.data[o] = localStorage.getItem(e + o)
                }
                i(e, !0)
            }, e.prototype.deleteSlot = function(e, t) {
                localStorage.removeItem(e + "version");
                for (var i = e === D ? R : F, a = 0; a < i.length; a++) {
                    var n = i[a].key;
                    localStorage.removeItem(e + n)
                }
                t(e, !0)
            }, e.prototype.deleteAll = function(e) {
                localStorage.clear(), e()
            }, e
        }(),
        L = function() {
            function t() {
                var t = this;
                this.databaseName = "wayward", this.objectStoreNameSaves = "saves", this.ready = !1, this.criticalError = !1, this.dataStorageLocalStorage = new B;
                var i = indexedDB.open(this.databaseName, 1);
                i.onerror = function(i) {
                    Utilities.Console.log(Source.SaveLoad, "indexedDB failure", i), t.criticalError = !0, e.useLocalStorage()
                }, i.onsuccess = function(e) {
                    t.database = e.target.result, t.dataStorageLocalStorage.isSlotUsed(D, function(e, i) {
                        i && t.transferFromLocalStorageToIndexedDb(D)
                    }), t.ready = !0
                }, i.onupgradeneeded = function(e) {
                    Utilities.Console.log(Source.SaveLoad, "indexedDB onupgradeneeded", e), t.database = e.target.result;
                    var i = t.database.createObjectStore(t.objectStoreNameSaves, {
                        keyPath: "slot"
                    });
                    i.createIndex("slot", "slot", {
                        unique: !0
                    })
                }
            }
            return t.prototype.isEnabled = function() {
                return void 0 !== indexedDB
            }, t.prototype.isReady = function() {
                return this.ready
            }, t.prototype.transferSaves = function() {
                for (var t = this, i = 0; i < e.maxSlots; i++) this.dataStorageLocalStorage.isSlotUsed(i, function(e, i) {
                    i && t.transferFromLocalStorageToIndexedDb(e)
                })
            }, t.prototype.isSlotUsed = function(t, i, a) {
                var n = this;
                if (this.criticalError) return e.isSlotUsed(t, i), !0;
                if (!this.waitForDatabase(function(e) {
                    n.isSlotUsed(t, i, e)
                }, a)) return !1;
                try {
                    var o = this.database.transaction(this.objectStoreNameSaves).objectStore(this.objectStoreNameSaves).get(t);
                    o.onerror = function() {
                        return i(t, !1)
                    }, o.onsuccess = function() {
                        void 0 === o.result || null === o.result ? n.dataStorageLocalStorage.isSlotUsed(t, i) : i(t, !0)
                    }
                } catch (r) {
                    return Utilities.Console.log(Source.SaveLoad, "transaction exception", r), setInterval(function() {
                        n.isSlotUsed(t, i, a)
                    }, 100), !1
                }
                return !0
            }, t.prototype.saveToSlot = function(e, t, i, a) {
                if (void 0 === a && (a = !0), a && game.unloading) return void this.dataStorageLocalStorage.saveToSlot(e, t, i);
                for (var n = this.database.transaction(this.objectStoreNameSaves, "readwrite").objectStore(this.objectStoreNameSaves), o = {
                    slot: e
                }, r = 0, s = Object.keys(t.data), l = 0; l < s.length; l++) {
                    var p = s[l],
                        d = t.data[p];
                    null !== d && void 0 !== d && d.length && (r += 2 * d.length, o[p] = d)
                }
                var u = n.put(o);
                u.onerror = function() {
                    i(e, 0)
                }, u.onsuccess = function() {
                    i(e, r)
                }
            }, t.prototype.loadFromSlot = function(e, t, i, a) {
                var n = this;
                if (!this.waitForDatabase(function(a) {
                    n.loadFromSlot(e, t, i, a)
                }, a)) return !1;
                var o = this.database.transaction(this.objectStoreNameSaves).objectStore(this.objectStoreNameSaves).get(e);
                return o.onerror = function() {
                    return i(e, !1)
                }, o.onsuccess = function() {
                    var a = o.result,
                        n = !1;
                    void 0 !== a && null !== a && (n = !0, t.version = a.version, t.data = a), i(e, n)
                }, !0
            }, t.prototype.deleteSlot = function(e, t) {
                if (this.dataStorageLocalStorage.deleteSlot(e, function() {}), this.database) {
                    var i = this.database.transaction(this.objectStoreNameSaves, "readwrite").objectStore(this.objectStoreNameSaves),
                        a = i["delete"](e);
                    a.onsuccess = function() {
                        setTimeout(function() {
                            return t(e, !0)
                        }, 0)
                    }, a.onerror = function() {
                        setTimeout(function() {
                            return t(e, !1)
                        }, 0)
                    }
                }
            }, t.prototype.deleteAll = function(t) {
                this.dataStorageLocalStorage.deleteAll(function() {});
                for (var i = 0, a = function() {
                    i++, i === e.maxSlots + 1 && t()
                }, n = 0; n < e.maxSlots; n++) this.deleteSlot(n, a);
                if (this.deleteSlot(D, a), !this.database) {
                    var o = indexedDB.deleteDatabase(this.databaseName);
                    o.onerror = function() {
                        return t()
                    }, o.onsuccess = function() {
                        return t()
                    }
                }
            }, t.prototype.transferFromLocalStorageToIndexedDb = function(e) {
                var t = this;
                Utilities.Console.log(Source.SaveLoad, "Transfering save " + e + " from localstorage to indexeddb");
                for (var i = new A, a = e === D ? R : F, n = 0; n < a.length; n++) {
                    var o = a[n].key;
                    i.data[o] = null
                }
                this.dataStorageLocalStorage.loadFromSlot(e, i, function(e, a) {
                    a && t.saveToSlot(e, i, function() {
                        t.dataStorageLocalStorage.deleteSlot(e, function() {})
                    }, !1)
                })
            }, t.prototype.waitForDatabase = function(e, t) {
                return this.database ? (void 0 !== t && window.clearInterval(t), !0) : void 0 === t && (t = window.setInterval(function() {
                    e(t)
                }, 5), !1)
            }, t
        }(),
        x = new L;
    e.isEnabled = t, e.useLocalStorage = i, e.initialize = a, e.getSaveSlots = n, e.isSlotUsed = o, e.getSaveCount = r, e.getFirstFreeSlot = s, e.save = y, e.load = c, e.loadPartial = h, e.loadPartialData = T, e.loadPartialDataInside = f, e.savePartialData = v, e.savePartialDataInside = I, e.exportSave = S, e.importSave = M, e.deleteSlot = k, e.deleteAll = b, e.transferSaves = w
}(SaveLoad || (SaveLoad = {}));
var Types;
! function(e) {
    e[e.Invalid = 0] = "Invalid", e[e.Undefined = 1] = "Undefined", e[e.Null = 2] = "Null", e[e.Boolean = 3] = "Boolean", e[e.ByteSigned = 4] = "ByteSigned", e[e.ByteUnsigned = 5] = "ByteUnsigned", e[e.ShortSigned = 6] = "ShortSigned", e[e.ShortUnsigned = 7] = "ShortUnsigned", e[e.IntegerSigned = 8] = "IntegerSigned", e[e.IntegerUnsigned = 9] = "IntegerUnsigned", e[e.Float32 = 10] = "Float32", e[e.Float64 = 11] = "Float64", e[e.String = 12] = "String", e[e.Array = 13] = "Array", e[e.Object = 14] = "Object", e[e.ArrayBuffer = 15] = "ArrayBuffer", e[e.ComplexObject = 16] = "ComplexObject"
}(Types || (Types = {}));
var Serializer = function() {
        function e(e, t, i) {
            this.maxBytes = 1024e4, this.object = e, this.objectKey = t, this.version = i, this.byteOffset = 0
        }
        return e.prototype.saveToString = function() {
            this.buffer = new ArrayBuffer(this.maxBytes), this.dataView = new DataView(this.buffer), this.writeProperty(this.object, this.objectKey), this.buffer = this.buffer.slice(0, this.byteOffset);
            for (var e = "", t = new Uint8Array(this.buffer), i = 0, a = t.length; i < a; i += 2) e += i + 1 < t.length ? String.fromCharCode(t[i] + (t[i + 1] << 8)) : String.fromCharCode(t[i]);
            return e
        }, e.prototype.loadToObject = function(e) {
            if (!(null === e || void 0 === e || e.length <= 0)) {
                for (var t = e, i = t.length, a = new Uint8Array(2 * i), n = 0; n < i; n++) a[2 * n] = 255 & t.charCodeAt(n), a[2 * n + 1] = t.charCodeAt(n) >> 8 & 255;
                this.dataView = new DataView(a.buffer), this.readProperty(this.object, this.objectKey)
            }
        }, e.prototype.readProperty = function(e, t) {
            var i = this.dataView.getUint8(this.byteOffset);
            switch (this.byteOffset++, i) {
                case Types.Undefined:
                    e[t] = void 0;
                    break;
                case Types.Null:
                    e[t] = null;
                    break;
                case Types.Boolean:
                    e[t] = 1 === this.dataView.getUint8(this.byteOffset), this.byteOffset++;
                    break;
                case Types.ByteSigned:
                    e[t] = this.dataView.getInt8(this.byteOffset), this.byteOffset++;
                    break;
                case Types.ByteUnsigned:
                    e[t] = this.dataView.getUint8(this.byteOffset), this.byteOffset++;
                    break;
                case Types.ShortSigned:
                    e[t] = this.dataView.getInt16(this.byteOffset), this.byteOffset += 2;
                    break;
                case Types.ShortUnsigned:
                    e[t] = this.dataView.getUint16(this.byteOffset), this.byteOffset += 2;
                    break;
                case Types.IntegerSigned:
                    e[t] = this.dataView.getInt32(this.byteOffset), this.byteOffset += 4;
                    break;
                case Types.IntegerUnsigned:
                    e[t] = this.dataView.getUint32(this.byteOffset), this.byteOffset += 4;
                    break;
                case Types.Float32:
                    e[t] = this.dataView.getFloat32(this.byteOffset), this.byteOffset += 4;
                    break;
                case Types.Float64:
                    e[t] = this.dataView.getFloat64(this.byteOffset), this.byteOffset += 8;
                    break;
                case Types.String:
                    e[t] = this.readString();
                    break;
                case Types.Array:
                case Types.Object:
                    t in e || (e[t] = i === Types.Array ? [] : {}), this.readObject(e, t);
                    break;
                case Types.ArrayBuffer:
                    e[t] = this.readArrayBuffer()
            }
        }, e.prototype.writeProperty = function(e, t) {
            var i = e[t],
                a = Types.Invalid;
            if (null !== i && void 0 !== i)
                if ("containedWithin" === t) i = Item.getContainerReference(i);
                else if ("containedItems" === t) {
                for (var n = [], o = i, r = 0; r < o.length; r++) o[r] && n.push(o[r].id);
                i = n
            }
            switch (typeof i) {
                case "undefined":
                    a = Types.Undefined;
                    break;
                case "boolean":
                    a = Types.Boolean;
                    break;
                case "number":
                    a = Types.Float64, this.isInteger(i) && (this.isByteSigned(i) ? a = Types.ByteSigned : this.isByteUnsigned(i) ? a = Types.ByteUnsigned : this.isShortSigned(i) ? a = Types.ShortSigned : this.isShortUnsigned(i) ? a = Types.ShortUnsigned : this.isIntegerSigned(i) ? a = Types.IntegerSigned : this.isIntegerUnsigned(i) && (a = Types.IntegerUnsigned));
                    break;
                case "string":
                    a = Types.String;
                    break;
                case "object":
                    a = null === i ? Types.Null : i instanceof Array ? Types.Array : ArrayBuffer.isView(i) ? Types.ArrayBuffer : Types.Object
            }
            switch (this.dataView.setUint8(this.byteOffset, a), this.byteOffset++, a) {
                case Types.Invalid:
                case Types.Undefined:
                case Types.Null:
                    break;
                case Types.Boolean:
                    this.dataView.setUint8(this.byteOffset, i ? 1 : 0), this.byteOffset++;
                    break;
                case Types.ByteSigned:
                    this.dataView.setInt8(this.byteOffset, i), this.byteOffset++;
                    break;
                case Types.ByteUnsigned:
                    this.dataView.setUint8(this.byteOffset, i), this.byteOffset++;
                    break;
                case Types.ShortSigned:
                    this.dataView.setInt16(this.byteOffset, i), this.byteOffset += 2;
                    break;
                case Types.ShortUnsigned:
                    this.dataView.setUint16(this.byteOffset, i), this.byteOffset += 2;
                    break;
                case Types.IntegerSigned:
                    this.dataView.setInt32(this.byteOffset, i), this.byteOffset += 4;
                    break;
                case Types.IntegerUnsigned:
                    this.dataView.setUint32(this.byteOffset, i), this.byteOffset += 4;
                    break;
                case Types.Float32:
                    this.dataView.setFloat32(this.byteOffset, i), this.byteOffset += 4;
                    break;
                case Types.Float64:
                    this.dataView.setFloat64(this.byteOffset, i), this.byteOffset += 8;
                    break;
                case Types.String:
                    this.writeString(i);
                    break;
                case Types.Array:
                case Types.Object:
                    this.writeObject(i);
                    break;
                case Types.ArrayBuffer:
                    this.writeArrayBuffer(i)
            }
        }, e.prototype.getSerializationProperties = function(e, t) {
            var i = e.getSerializationProperties;
            return "function" == typeof i ? i(t) : Object.keys(e)
        }, e.prototype.readObject = function(e, t) {
            if ("function" == typeof e[t].deserializeObject) return void e[t].deserializeObject(this);
            var i = this.dataView.getUint32(this.byteOffset);
            this.byteOffset += 4;
            for (var a = 0; a < i; a++) {
                var n = this.readString();
                null === e[t] && Utilities.Console.warn(Source.SaveLoad, "readObject object[key] is null", e, t), this.readProperty(e[t], n)
            }
        }, e.prototype.readString = function() {
            var e = this.dataView.getUint32(this.byteOffset);
            this.byteOffset += 4;
            for (var t = "", i = 0; i < e; i++) t += String.fromCharCode(this.dataView.getUint16(this.byteOffset)), this.byteOffset += 2;
            return t
        }, e.prototype.readArrayBuffer = function() {
            var e = this.dataView.getUint8(this.byteOffset);
            this.byteOffset++;
            var t = this.dataView.getUint32(this.byteOffset);
            this.byteOffset += 4;
            var i = null;
            switch (e) {
                case 1:
                    i = new Uint8Array(this.dataView.buffer, this.byteOffset, t);
                    break;
                default:
                    Utilities.Console.warn(Source.SaveLoad, "Unknown array buffer", e, t)
            }
            return this.byteOffset += e * t, i
        }, e.prototype.writeObject = function(e, t) {
            if (void 0 === t && (t = null), "function" == typeof e.serializeObject) return void e.serializeObject(this);
            t || (t = this.getSerializationProperties(e, this.version)), this.dataView.setUint32(this.byteOffset, t.length), this.byteOffset += 4;
            for (var i = 0, a = t.length; i < a; i++) {
                var n = t[i];
                this.writeString(n), this.writeProperty(e, n)
            }
        }, e.prototype.writeString = function(e) {
            this.dataView.setUint32(this.byteOffset, e.length), this.byteOffset += 4;
            for (var t = 0; t < e.length; t++) this.dataView.setUint16(this.byteOffset, e.charCodeAt(t)), this.byteOffset += 2
        }, e.prototype.writeArrayBuffer = function(e) {
            var t = e.BYTES_PER_ELEMENT;
            this.dataView.setUint8(this.byteOffset, t), this.byteOffset++, this.dataView.setUint32(this.byteOffset, e.byteLength), this.byteOffset += 4;
            for (var i = 0, a = e.byteLength; i < a; i++) {
                switch (t) {
                    case 1:
                        this.dataView.setUint8(this.byteOffset, e[i]);
                        break;
                    default:
                        Utilities.Console.warn(Source.SaveLoad, "unknown array buffer", e)
                }
                this.byteOffset++
            }
        }, e.prototype.isInteger = function(e) {
            return "number" == typeof e && isFinite(e) && e > -9007199254740992 && e < 9007199254740992 && Math.floor(e) === e
        }, e.prototype.isByteSigned = function(e) {
            return -Math.pow(2, 7) <= e && e <= Math.pow(2, 7) - 1
        }, e.prototype.isByteUnsigned = function(e) {
            return 0 <= e && e <= Math.pow(2, 8) - 1
        }, e.prototype.isShortSigned = function(e) {
            return -Math.pow(2, 15) <= e && e <= Math.pow(2, 15) - 1
        }, e.prototype.isShortUnsigned = function(e) {
            return 0 <= e && e <= Math.pow(2, 16) - 1
        }, e.prototype.isIntegerSigned = function(e) {
            return -Math.pow(2, 31) <= e && e <= Math.pow(2, 31) - 1
        }, e.prototype.isIntegerUnsigned = function(e) {
            return 0 <= e && e <= Math.pow(2, 32) - 1
        }, e.SerializeAllProperties = [], e
    }(),
    SpriteBatchLayer;
! function(e) {
    e[e.Corpse = 0] = "Corpse", e[e.Item = 1] = "Item", e[e.Monster = 2] = "Monster"
}(SpriteBatchLayer || (SpriteBatchLayer = {}));
var SpriteBatch = function() {
        function e(t, i) {
            this.gl = t, this.count = 0, this.capacity = i;
            var a = t.createBuffer(),
                n = t.createBuffer();
            if (!a || !n) throw "Failed to create buffer";
            this.buffer = a, this.array = new Float32Array(this.capacity * e.spriteLength), t.bindBuffer(t.ARRAY_BUFFER, this.buffer), t.bufferData(t.ARRAY_BUFFER, this.array.byteLength, t.DYNAMIC_DRAW), this.colorBuffer = n, this.colorArray = new Uint8Array(4 * this.capacity), t.bindBuffer(t.ARRAY_BUFFER, this.colorBuffer), t.bufferData(t.ARRAY_BUFFER, this.colorArray.byteLength, t.DYNAMIC_DRAW), e.shaderProgram || (e.shaderProgram = new CompiledProgram(t, "sprite-shader-vertex", "sprite-shader-fragment"))
        }
        return e.prototype.clear = function() {
            this.count = 0
        }, e.prototype.begin = function() {
            if (this.begun) throw new Error("spriteBatch already began.");
            this.count = 0, this.begun = !0
        }, e.prototype.add = function(t, i, a, n, o, r, s, l, p, d, u, g) {
            if (void 0 === s && (s = 0), void 0 === l && (l = 0), void 0 === p && (p = 255), void 0 === d && (d = 255), void 0 === u && (u = 255), void 0 === g && (g = 255), !this.begun) throw new Error("Cannot add to spritebatch without calling begin");
            if (this.count !== this.capacity) {
                var m = this.count * e.spriteLength;
                this.array[m + 0] = t, this.array[m + 1] = i, this.array[m + 2] = a, this.array[m + 3] = n, this.array[m + 4] = o, this.array[m + 5] = r, this.array[m + 6] = s, this.array[m + 7] = l, m = 4 * this.count, this.colorArray[m + 0] = p, this.colorArray[m + 1] = d, this.colorArray[m + 2] = u, this.colorArray[m + 3] = g, this.count++
            }
        }, e.prototype.end = function() {
            this.begun = !1;
            var t = this.gl;
            t.bindBuffer(t.ARRAY_BUFFER, this.buffer), t.bufferSubData(t.ARRAY_BUFFER, 0, this.array.subarray(0, this.count * e.spriteLength)), t.bindBuffer(t.ARRAY_BUFFER, this.colorBuffer), t.bufferSubData(t.ARRAY_BUFFER, 0, this.colorArray.subarray(0, 4 * this.count))
        }, e.prototype.render = function(t, i, a, n, o) {
            if (this.texSprites && 0 !== this.count) {
                if (this.begun) throw new Error("Cannot render sprite batch.  Make sure you call spriteBatch.end() after adding sprites");
                var r = this.gl,
                    s = e.shaderProgram;
                r.useProgram(s.program), r.depthFunc(r.LEQUAL), r.enableVertexAttribArray(s.attribs.a_position), r.enableVertexAttribArray(s.attribs.a_offset), r.enableVertexAttribArray(s.attribs.a_pointSize), r.enableVertexAttribArray(s.attribs.a_sourcePosition), r.enableVertexAttribArray(s.attribs.a_sourceSize), r.enableVertexAttribArray(s.attribs.a_color), r.bindBuffer(r.ARRAY_BUFFER, this.buffer), r.vertexAttribPointer(s.attribs.a_position, 2, r.FLOAT, !1, 32, 0), r.vertexAttribPointer(s.attribs.a_pointSize, 1, r.FLOAT, !1, 32, 8), r.vertexAttribPointer(s.attribs.a_sourcePosition, 2, r.FLOAT, !1, 32, 12), r.vertexAttribPointer(s.attribs.a_sourceSize, 1, r.FLOAT, !1, 32, 20), r.vertexAttribPointer(s.attribs.a_offset, 2, r.FLOAT, !1, 32, 24), r.bindBuffer(r.ARRAY_BUFFER, this.colorBuffer), r.vertexAttribPointer(s.attribs.a_color, 4, r.UNSIGNED_BYTE, !0, 0, 0), r.activeTexture(r.TEXTURE0), r.uniform1i(s.uniforms.sprites, 0), r.bindTexture(r.TEXTURE_2D, this.texSprites);
                var l = WorldRenderer.getSubTileSize();
                r.uniform1f(s.uniforms.zoom, a), r.uniform1f(s.uniforms.tileSize, 2 * l), r.uniform2f(s.uniforms.inverseViewportSize, 2 * a / n, 2 * a / o), r.uniform2f(s.uniforms.viewOffset, t, i), r.uniform2f(s.uniforms.inverseSourceTextureSize, this.inverseSpriteTextureSize.x, this.inverseSpriteTextureSize.y), r.drawArrays(r.POINTS, 0, this.count), r.disableVertexAttribArray(s.attribs.a_position), r.disableVertexAttribArray(s.attribs.a_offset), r.disableVertexAttribArray(s.attribs.a_pointSize), r.disableVertexAttribArray(s.attribs.a_sourcePosition), r.disableVertexAttribArray(s.attribs.a_sourceSize), r.disableVertexAttribArray(s.attribs.a_color)
            }
        }, e.spriteLength = 8, e
    }(),
    SpriteUtil;
! function(e) {
    var t = function() {
        function e(e, t, i) {
            this.texCoord = e, this.texSize = t, this.texOffsetY = i
        }
        return e
    }();
    e.SpriteInfo = t;
    var i = function() {
            function e(e, t, i, a) {
                this.left = e, this.top = t, this.right = i, this.bottom = a, this.child0 = null, this.child1 = null, this.used = !1
            }
            return e.prototype.insert = function(t, i) {
                if (null !== this.child0) {
                    var a = this.child0.insert(t, i);
                    return null !== a ? a : null !== this.child1 ? this.child1.insert(t, i) : null
                }
                if (this.used) return null;
                var n = this.right - this.left,
                    o = this.bottom - this.top;
                if (t.width > n || t.height > o) return null;
                if (t.width === n && t.height === o) return this.used = !0, this;
                var r = n - t.width,
                    s = o - t.height;
                return r > s ? (this.child0 = new e(this.left, this.top, this.left + t.width, this.bottom), this.child1 = new e(this.left + t.width + i, this.top, this.right, this.bottom)) : (this.child0 = new e(this.left, this.top, this.right, this.top + t.height), this.child1 = new e(this.left, this.top + t.height + i, this.right, this.bottom)), this.child0.insert(t, i)
            }, e
        }(),
        a = function() {
            function e(e, t, a, n, o) {
                this.gl = e, this.width = t, this.height = a, this.padding = 0, this.loadedSprites = {}, this.sprites = [], this.spriteLoadCount = 0, this.rootNode = new i(0, 0, t, a), this.padding = o;
                var r = e.createTexture();
                if (!r) throw "Unable to create texture";
                this.texture = r, e.bindTexture(e.TEXTURE_2D, this.texture), e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, t, a, 0, e.RGBA, e.UNSIGNED_BYTE, void 0), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, e.NEAREST), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE), this.inverseTextureSize = new Vec2([1 / t, 1 / a]), n && this.rootNode.insert({
                    width: 16,
                    height: 16
                }, o)
            }
            return e.prototype.load = function(e) {
                var t = this;
                if (!this.checkFinished(e))
                    for (var i = 0, a = this.sprites.length; i < a; ++i) {
                        var n = function(i) {
                            return function() {
                                return t.loadSprite(t.sprites[i], e)
                            }
                        };
                        ResourceLoader.takeLoadingSlot(n(i))
                    }
            }, e.prototype.addSprite = function(e, t) {
                var i = ResourceLoader.getImageOverride(e);
                return i && (e = i), this.loadedSprites[e] ? void t(this.loadedSprites[e], null) : void this.sprites.push({
                    src: e,
                    image: null,
                    callback: t,
                    padding: this.padding
                })
            }, e.prototype.loadSprite = function(e, t, i) {
                var a = this;
                void 0 === i && (i = 0);
                var n = new Image;
                n.onload = function() {
                    e.image = n, a.spriteLoaded(t)
                }, n.onerror = function() {
                    Utilities.Console.warn(Source.ResourceLoader, "Failed to load " + n.src), Steamworks.isElectron() && i < 3 ? setTimeout(function() {
                        return a.loadSprite(e, t, i + 1)
                    }, 500 * (i + 1)) : a.spriteLoaded(t)
                }, n.crossOrigin = "anonymous", n.src = e.src
            }, e.prototype.spriteLoaded = function(e) {
                setTimeout(ResourceLoader.releaseLoadingSlot, 0), this.spriteLoadCount++, this.checkFinished(e)
            }, e.prototype.checkFinished = function(e) {
                return this.spriteLoadCount === this.sprites.length && (this.spriteLoadCount = 0, this.pack(), e(), !0)
            }, e.prototype.pack = function() {
                this.sprites = this.sprites.filter(function(e) {
                    return null !== e.image
                }), this.sprites.sort(function(e, t) {
                    if (null === e && null === t) return 0;
                    if (null === e || void 0 === e) return 1;
                    if (null === t || void 0 === t) return -1;
                    if (e.image && t.image) {
                        var i = e.image.width * e.image.height,
                            a = t.image.width * t.image.height;
                        return i < a ? 1 : i > a ? -1 : 0
                    }
                    return 0
                });
                for (var e = 0, t = this.sprites.length; e < t; ++e) this.packSprite(this.gl, this.sprites[e]);
                this.sprites = []
            }, e.prototype.packSprite = function(e, i) {
                if (null !== i && void 0 !== i && i.image) {
                    var a = this.rootNode.insert(i.image, this.padding);
                    if (null !== a && void 0 !== a) {
                        e.bindTexture(e.TEXTURE_2D, this.texture), e.texSubImage2D(e.TEXTURE_2D, 0, a.left, a.top, e.RGBA, e.UNSIGNED_BYTE, i.image);
                        var n = new t(new Vec2([a.left, a.top]), a.bottom - a.top, 0);
                        this.loadedSprites[i.src] = n, i.callback(n, i.image), i.image = null
                    } else Utilities.Console.error(Source.ResourceLoader, "Couldn't pack sprite!", i)
                }
            }, e
        }();
    e.TexturePacker = a
}(SpriteUtil || (SpriteUtil = {}));
var UI;
! function(e) {
    var t = function() {
        function e() {
            this.element = $(this.selector()), this.visible = !1, this.bindElements()
        }
        return e.prototype.selector = function() {
            throw new Error("Not implemented")
        }, e.prototype.bindElements = function() {}, e.prototype.unbindElements = function() {}, e.prototype.onGameEnd = function(e) {}, e.prototype.isVisible = function() {
            return this.visible
        }, e.prototype.show = function(e) {
            this.visible || (this.visible = !0, this.doShow(), this.onShow(e))
        }, e.prototype.doShow = function() {
            this.element.quickShow()
        }, e.prototype.hide = function() {
            this.visible && (this.visible = !1, this.doHide(), this.onHide())
        }, e.prototype.doHide = function() {
            this.element.quickHide()
        }, e.prototype.onShow = function(e) {}, e.prototype.onHide = function() {}, e.prototype.onMouseDown = function(e) {}, e.prototype.onMouseUpOrLeave = function(e) {}, e.prototype.onMouseMove = function(e) {}, e.prototype.onMouseScroll = function(e) {}, e.prototype.onKeyDown = function(e, t, i) {
            return null
        }, e.prototype.onKeyUp = function(e) {
            return null
        }, e
    }();
    e.BaseScreen = t
}(UI || (UI = {}));
var UI;
! function(e) {
    var t = function(e) {
        function t() {
            e.apply(this, arguments)
        }
        return __extends(t, e), t.prototype.selector = function() {
            return "#confirm"
        }, t.prototype.bindElements = function() {
            this.elementOverlay = this.element.parent(), this.elementMessage = this.element.children(".message"), this.elementButtonRow = this.element.children(".button-row")
        }, t.prototype.onShow = function(e) {
            var t = this;
            this.options = e, this.elementOverlay.quickShow(), this.elementMessage.html(messages[e.message]), this.elementButtonRow.empty();
            for (var i = e.buttons, a = 0; a < i.length; a++) this.elementButtonRow.append('<button type="button" data-button-id="' + i[a] + '">' + messages[i[a]] + "</button>");
            var n = e.callback,
                o = function(e) {
                    var i = e.data("button-id");
                    t.hide(), n && n(i)
                };
            this.elementButtonRow.off("click", "button"), this.elementButtonRow.on("click", "button", function() {
                o($(this))
            })
        }, t.prototype.onHide = function() {
            this.elementOverlay.quickHide()
        }, t.prototype.onKeyUp = function(e) {
            return this.options && ui.isBindDown(KeyBind.Escape) ? (this.hide(), this.options.callback && this.options.callback(this.options.buttons.pop()), !0) : null
        }, t
    }(e.BaseScreen);
    e.ConfirmScreen = t
}(UI || (UI = {}));
var UI;
! function(e) {
    var t = function(e) {
        function t() {
            e.apply(this, arguments), this.fadingOut = !1
        }
        return __extends(t, e), t.prototype.selector = function() {
            return "#screen-cover"
        }, t.prototype.bindElements = function() {
            var e = this;
            this.element.on("mouseup", function() {
                return e.fadeOut()
            }), setTimeout(function() {
                e.fadeOut()
            }, 8e3)
        }, t.prototype.doShow = function() {
            null !== quickLoad || game.options.skipIntro ? (this.fadingOut = !0, ui.switchToScreen(ScreenId.Title)) : this.element.quickShow()
        }, t.prototype.onShow = function() {
            this.createParticles(), setTimeout(function() {
                ui.showTitleScreen()
            }, 250)
        }, t.prototype.onHide = function() {}, t.prototype.fadeOut = function() {
            this.fadingOut || (this.fadingOut = !0, this.element.quickHide(), ui.switchToScreen(ScreenId.Title))
        }, t.prototype.createParticles = function() {
            for (var e = 0; e < 25; e++) {
                var t = $('<div class="particle"></div>'),
                    i = Math.floor(7 * Math.random() + 2);
                t.css({
                    top: Math.floor(250 * Math.random() + 50),
                    left: Math.floor(40 * Math.random() + 35) + "%",
                    width: i,
                    height: i,
                    "border-radius": i,
                    "animation-duration": Math.floor(50 * Math.random() + 25) + "s",
                    "animation-delay": "-" + Math.floor(50 * Math.random()) + "s"
                }), this.element.append(t)
            }
        }, t
    }(e.BaseScreen);
    e.CoverScreen = t
}(UI || (UI = {}));
var UI;
! function(e) {
    var t = function(e) {
        function t() {
            e.apply(this, arguments)
        }
        return __extends(t, e), t.prototype.selector = function() {
            return "#help"
        }, t.prototype.bindElements = function() {
            this.elementOverlay = this.element.parent(), this.elementHeader = this.element.find(".header .label"), this.elementTitle = this.element.children(".title"), this.elementContent = this.element.children(".content");
            var e = this;
            this.elementButtonRow = this.element.children(".button-row"), this.elementButtonRow.on("click", "button", function() {
                e.onButtonClick($(this).attr("data-button-id"))
            }), this.element.find(".header .close").click(function() {
                ui.hideHelpScreen()
            })
        }, t.prototype.setHeight = function() {
            this.element.height(this.elementContent.outerHeight() + this.elementHeader.outerHeight() + this.elementTitle.outerHeight() + this.elementButtonRow.outerHeight() + 50)
        }, t.prototype.onShow = function(e) {
            this.elementOverlay.quickShow(), this.reloadToggleHintsState(), this.setHeight()
        }, t.prototype.onHide = function() {
            this.elementOverlay.quickHide()
        }, t.prototype.displayHint = function(e) {
            var t = hints[e];
            this.elementHeader.text(e === HintType.WelcomeToWayward ? messages[Message.Help] : messages[Message.Hints]), this.elementTitle.text(t.name || ""), this.elementContent.html(Languages.evalString(t.description || "")), this.setHeight(), ui.highlight(t.highlightElementSelector), ui.setCurrentHint(e)
        }, t.prototype.onButtonClick = function(e) {
            switch (e) {
                case "EnableHints":
                    game.options.hints = !0, ui.displayMessage(Message.HintsEnabled), this.reloadToggleHintsState();
                    break;
                case "DisableHints":
                    game.options.hints = !1, ui.displayMessage(Message.HintsDisabled), this.reloadToggleHintsState();
                    break;
                case "PreviousHint":
                    var t = ui.getCurrentHint() - 1;
                    t === HintType.First && (t = HintType.Last - 1), this.displayHint(t);
                    break;
                case "NextHint":
                    var i = ui.getCurrentHint() + 1;
                    i === HintType.Last && (i = HintType.First + 1), this.displayHint(i)
            }
        }, t.prototype.reloadToggleHintsState = function() {
            var e = this.elementButtonRow.find("button[data-button-id='EnableHints'], button[data-button-id='DisableHints']");
            game.options.hints ? (e.attr("data-button-id", "DisableHints"), Languages.refreshUiTranslation(Languages.UiTranslation.DisableHints)) : (e.attr("data-button-id", "EnableHints"), Languages.refreshUiTranslation(Languages.UiTranslation.EnableHints))
        }, t
    }(e.BaseScreen);
    e.HelpScreen = t
}(UI || (UI = {}));
var UI;
! function(e) {
    ! function(e) {
        e[e.Weight = 0] = "Weight", e[e.Attack = 1] = "Attack", e[e.Defense = 2] = "Defense", e[e.Malignity = 3] = "Malignity"
    }(e.TextElementId || (e.TextElementId = {}));
    var t = e.TextElementId,
        i = function(e) {
            function i() {
                e.apply(this, arguments), this.elementContainerDialogs = [], this.elementOtherDialogs = [], this.lastText = [], this.lastStats = [], this.contextMenu = null, this.contextMenuTarget = null, this.openedContainer = null, this.sortableElementPosition = null, this.quickSlotSortableEnabled = !1
            }
            return __extends(i, e), i.prototype.selector = function() {
                return "#screen-in-game"
            }, i.prototype.bindElements = function() {
                var e = this;
                this.elementVisibleInGame = $(".visible-in-game"), this.elementBlocker = this.element.children("#blocker"), this.elementBlockerMouse = this.element.children("#blocker-mouse"), this.elementBlockerMouse.on("touchend mouseup mouseleave", function(t) {
                    e.completeBlockerMouseMovement()
                }).on("mousemove", function(t) {
                    e.onBlockerMouseMove(t)
                });
                var t = function() {
                    return e.isSorting()
                };
                this.elementStatHealth = $("[data-bar='Health']").children(".bar"), this.elementStatStamina = $("[data-bar='Stamina']").children(".bar"), this.elementStatHunger = $("[data-bar='Hunger']").children(".bar"), this.elementStatThirst = $("[data-bar='Thirst']").children(".bar"), this.elementStatBurn = $(".status-effects").find(".burn"), this.elementStatBleed = $(".status-effects").find(".bleed"), this.elementStatPoison = $(".status-effects").find(".poison"), this.elementAttributeWeight = $("[data-attribute='Weight']").children(".attribute"), this.elementAttributeAttack = $("[data-attribute='Attack']").children(".attribute"), this.elementAttributeDefense = $("[data-attribute='Defense']").children(".attribute"), this.elementAttributeMalignity = $("[data-attribute='Malignity']").children(".attribute"), this.elementQuickSlotsContainer = $("#quick-slots");
                var i = function(t) {
                        e.showItemContextMenu(t)
                    },
                    a = function(t) {
                        e.onQuickSlotItemRightClick(t)
                    };
                this.elementQuickSlotsContainer.on("mouseup", "li", function(e) {
                    t() || (e.button === ui.getMouseBind(KeyBind.SecondaryMouse) ? a($(this)) : i($(this))), e.preventDefault()
                }), this.elementMessagesOverlay = $("#messages-overlay"), this.elementActions = $("#actions"), this.elementButtons = $("#buttons");
                var n = function(t) {
                    e.onButtonBarClick(t)
                };
                this.elementButtons.on("click", "li", function(e) {
                    n($(this).children("img").data("button")), e.preventDefault()
                }), this.elementDialogs = $("#dialogs"), this.elementDialogInventory = $("#inventory"), this.elementDialogInventoryContainer = this.elementDialogInventory.children("#container-inventory");
                var o = function(t) {
                        game.options.alternateContextMenu || e.showItemContextMenu(t)
                    },
                    r = function(t) {
                        game.options.alternateContextMenu ? e.showItemContextMenu(t) : e.onInventoryItemRightClick(t)
                    };
                this.elementDialogInventoryContainer.on("mouseup", "li", function(e) {
                    t() || (e.button === ui.getMouseBind(KeyBind.SecondaryMouse) ? r($(this)) : o($(this))), e.preventDefault()
                }), this.elementDialogCrafting = $("#crafting"), this.elementDialogCraftingContainer = this.elementDialogCrafting.children("#container-crafting");
                var s = function(t) {
                    e.onCraftingItemClick(t)
                };
                this.elementDialogCraftingContainer.on("click", ".item", function(e) {
                    game.hasDelay() || (s($(this)), e.preventDefault())
                }), this.elementDialogEquipment = $("#equipment"), this.elementDialogEquipmentContainer = this.elementDialogEquipment.children("#container-equipment");
                var l = function(t) {
                        game.options.alternateContextMenu || e.showItemContextMenu(t)
                    },
                    p = function(t) {
                        game.options.alternateContextMenu ? e.showItemContextMenu(t) : e.onEquipmentItemRightClick(t)
                    };
                this.elementDialogEquipmentContainer.on("mouseup", "li", function(e) {
                    t() || (e.button === ui.getMouseBind(KeyBind.SecondaryMouse) ? p($(this)) : l($(this))), e.preventDefault()
                }), this.elementDialogSkills = $("#skills"), this.elementDialogSkillsContainer = this.elementDialogSkills.children("#container-skills"), this.elementDialogMilestones = $("#milestones"), this.elementDialogMilestonesContainer = this.elementDialogMilestones.children("#container-milestones"), this.elementDialogMessages = $("#messages"), this.elementDialogMessagesContainer = this.elementDialogMessages.children("#container-messages"), this.elementDialogMessagesContainer.on("scroll", function() {
                    if (e.elementDialogMessagesContainer.scrollTop() < 1) {
                        var t = e.getMessagesHtml();
                        if (t.length > 0) {
                            var i = e.elementDialogMessagesContainer.prop("scrollHeight");
                            e.elementDialogMessagesContainer.prepend(e.getMessagesHtml());
                            var a = e.elementDialogMessagesContainer.prop("scrollHeight");
                            e.elementDialogMessagesContainer.scrollTop(a - i)
                        }
                    }
                }), this.elementDialogMap = $("#map");
                var d = function(t) {
                    e.onFilterInput(t)
                };
                this.element.on("input", ".filter", function() {
                    d($(this).parent().parent().find(".container"))
                });
                var u = function() {
                        e.onTooltipClose()
                    },
                    g = function(t) {
                        return e.getTooltipHtml(t)
                    };
                $(document).functionalTooltip({
                    selector: ".item:not(.ui-sortable-helper),#container-skills p,#container-milestones p,[data-tooltip],.container[data-attribute='Malignity'],.container[data-attribute='Attack'],.container[data-attribute='Defense']",
                    trackMouse: !0,
                    position: {
                        topOffset: 15,
                        leftOffset: 20
                    },
                    onClose: function() {
                        u()
                    },
                    content: function() {
                        return g(this)
                    }
                }), $(".ui-helper-hidden-accessible").remove(), $(document).contextmenu(this.setupContextMenu()), this.bindSortable($(".sortable")), this.bindSortable($(".quick-slot")), this.bindSortable($("#game")), $(".quick-slot").sortable("disable")
            }, i.prototype.unbindElements = function() {}, i.prototype.bindSortable = function(e) {
                var t = this,
                    i = function(e, i, a) {
                        void 0 === a && (a = !1), t.highlightItemElementByItemId(e, i, a)
                    };
                e.sortable({
                    scroll: !1,
                    zIndex: 999999,
                    distance: 10,
                    appendTo: $("#screen-in-game"),
                    cursorAt: {
                        top: 18,
                        left: 18
                    },
                    connectWith: ".sortable, #game, .quick-slot",
                    tolerance: "pointer",
                    helper: "clone",
                    receive: function(e, i) {
                        return t.onSortableItemReceive(e, i)
                    },
                    start: function(e) {
                        t.tooltipDisable(), t.sortableElement = e.toElement, ui.getBody().addClass("dragging"), $(".item[data-selected-count]").each(function() {
                            i($(this).data("item-id"), !1, !0)
                        })
                    },
                    stop: function(e) {
                        t.tooltipEnable(), t.sortableElement = null, ui.getBody().removeClass("dragging");
                        var i = $(e.target);
                        (i.is(t.elementDialogInventoryContainer) || i.hasClass("is-container-container")) && t.saveItemOrder(i)
                    }
                }).disableSelection()
            }, i.prototype.onKeyDown = function(e, t, i) {
                if (i) {
                    if ($(".filter").is(":focus")) return !0;
                    if (ui.isOverlayShown() && t !== ui.getKeyBind(KeyBind.Escape) && t !== ui.getKeyBind(KeyBind.Options) && t !== ui.getKeyBind(KeyBind.Help)) return !0
                }
                return t === ui.getKeyBind(KeyBind.Escape) && this.contextMenuOpen && (this.closingContextMenu = !0), null
            }, i.prototype.onKeyUp = function(e) {
                return game.playing ? this.runBind({
                    value: e.keyCode,
                    type: BindType.Keyboard
                }) : null
            }, i.prototype.runBind = function(e) {
                if (!game.playing) return null;
                var t = ui.isOverlayShown();
                return ui.isBindPressed(KeyBind.Escape, e) ? this.closingContextMenu ? (this.closingContextMenu = !1, !0) : ui.isOptionsOverlayShown() ? (ui.hideOptionsScreen(), !0) : ui.isHelpOverlayShown() ? (ui.hideHelpScreen(), !0) : ui.isConfirmOverlayShown() ? null : !!t || (!!this.closeAllDialogs() || (this.onButtonBarClick("TitleScreen"), !0)) : (!ui.isBindPressed(KeyBind.Options, e) || t && !ui.isOptionsOverlayShown() || ui.toggleOptions(), !ui.isBindPressed(KeyBind.Help, e) || t && !ui.isHelpOverlayShown() || ui.toggleHelp(), t ? null : (ui.isBindPressed(KeyBind.Inventory, e) && this.toggleDialog(this.elementDialogInventory), ui.isBindPressed(KeyBind.Crafting, e) && this.toggleDialog(this.elementDialogCrafting), ui.isBindPressed(KeyBind.Equipment, e) && this.toggleDialog(this.elementDialogEquipment), ui.isBindPressed(KeyBind.Skills, e) && this.toggleDialog(this.elementDialogSkills), ui.isBindPressed(KeyBind.Milestones, e) && this.toggleDialog(this.elementDialogMilestones), ui.isBindPressed(KeyBind.Messages, e) && this.toggleDialog(this.elementDialogMessages), ui.isBindPressed(KeyBind.Actions, e) && this.toggleActionsMenu(), null))
            }, i.prototype.pressHotKey = function(e) {
                return $(document).contextmenu("isOpen") && this.contextMenu && this.contextMenu.actions.length > e && this.contextMenuTarget ? (this.onContextMenuAction(this.contextMenuTarget, this.contextMenu.actions[e], null), $(document).contextmenu("close"), !1) : this.useQuickSlot(e + 1)
            }, i.prototype.useQuickSlot = function(e) {
                var t = this.getQuickSlotItemElement(e);
                if (t.hasClass("disabled")) return !1;
                var i = t.children("li").first();
                if (i && 1 === i.length) {
                    var a = i.getItemType();
                    if (a) {
                        var n = game.items[i.data("item-id")];
                        if (!n || !Item.isInInventory(n)) {
                            var o = Item.getItemsInContainerByType(player.inventory, a, !0);
                            if (!(o.length > 0)) return !1;
                            n = o[0]
                        }
                        var r = Item.defines[a];
                        if (!r) return !1;
                        var s = ui.quickSlotInfo[e];
                        return s && s.action ? this.runContextMenuAction(n.id, null, s.action) : (r.use ? Item.use(n, r.use[0]) : Item.use(n, ActionType.Throw), !0)
                    }
                }
                return !1
            }, i.prototype.isSorting = function() {
                return $(document).find(".ui-sortable-helper").length > 0
            }, i.prototype.cancelSorting = function() {
                $(".sortable").sortable("cancel"), $(".sortable").find(".item").filter(function() {
                    return "list-item" === $(this).css("display")
                }).remove()
            }, i.prototype.setupContextMenu = function() {
                var e = this,
                    t = function(t, i, a) {
                        return e.onContextMenuAction(t, i, a)
                    };
                return {
                    delegate: ".item,.sort,#actions",
                    autoFocus: !0,
                    autoTrigger: !1,
                    preventContextMenuForPopup: !0,
                    preventSelect: !0,
                    taphold: !0,
                    show: !1,
                    hide: !1,
                    position: function(t, i) {
                        var a;
                        return e.actionsMenuOpen ? a = i.target : e.touchEvent ? (a = e.touchEvent, a.pageX = a.originalEvent.touches[0].pageX, a.pageY = a.originalEvent.touches[0].pageY) : a = e.mouseEvent, e.lastContextMenuPosition = {
                            my: "left-5 top-5",
                            at: "center bottom",
                            of: a,
                            collision: "fit fit"
                        }, e.lastContextMenuPosition
                    },
                    menu: [],
                    select: function(e, i) {
                        return t(i.target, i.item.data(), $(e.toElement))
                    },
                    beforeOpen: function(t, i) {
                        e.contextMenuTarget = i.target, e.contextMenu = i.extraData;
                        for (var a = [], n = 0; n < e.contextMenu.actions.length; n++) {
                            var o = e.contextMenu.actions[n],
                                r = '<span class="context-menu-title">' + (n + 1) + " " + o.text + "</span>";
                            if (void 0 !== e.contextMenu.quickSlot && !isNaN(e.contextMenu.quickSlot)) {
                                var s = ui.quickSlotInfo[e.contextMenu.quickSlot];
                                if (s) {
                                    var l = "";
                                    (!s.action && 0 === n || s.action && s.action.action === o.action && (!s.action.data || s.action.data.actionType === o.data.actionType)) && (l = " selected"), r = '<span class="quick-slot-action-select' + l + '"></span> ' + r
                                }
                            }
                            a.push({
                                title: r,
                                cmd: o.action,
                                data: o
                            })
                        }
                        $(document).contextmenu("replaceMenu", a), e.lastContextMenuPosition && (i.menu.position(e.lastContextMenuPosition), e.lastContextMenuPosition = null), e.contextMenuOpen = !0, e.contextMenuBlocking = !0, e.tooltipDisable(), ui.playClickSound()
                    },
                    close: function() {
                        e.contextMenuOpen && (e.contextMenuOpen = !1, e.contextMenuBlocking = !0, e.tooltipEnable(), e.hideActionsMenu())
                    }
                }
            }, i.prototype.onShow = function() {
                this.elementBlocker.quickHide(), this.elementBlockerMouse.quickHide(), this.elementVisibleInGame.quickShow(), this.elementMessagesOverlay.quickShow(), this.elementDialogInventory.dialog(this.setupDialog(DialogId.Inventory)), this.elementDialogCrafting.dialog(this.setupDialog(DialogId.Crafting)), this.elementDialogEquipment.dialog(this.setupDialog(DialogId.Equipment)), this.elementDialogSkills.dialog(this.setupDialog(DialogId.Skills)), this.elementDialogMilestones.dialog(this.setupDialog(DialogId.Milestones)), this.elementDialogMessages.dialog(this.setupDialog(DialogId.Messages)), this.elementDialogMap.dialog(this.setupDialog(DialogId.Map)), Mods.callHook(Mods.Hook.OnShowInGameScreen), this.clampDialogs(), this.blurFilters(), this.tooltipEnable()
            }, i.prototype.onHide = function() {
                this.initializeGameState(), this.elementVisibleInGame.quickHide(),
                    this.elementDialogInventory.dialog("destroy"), this.elementDialogCrafting.dialog("destroy"), this.elementDialogEquipment.dialog("destroy"), this.elementDialogSkills.dialog("destroy"), this.elementDialogMilestones.dialog("destroy"), this.elementDialogMessages.dialog("destroy"), this.elementDialogMap.dialog("destroy"), this.closeAllContainers();
                for (var e = 0; e < this.elementOtherDialogs.length; e++) {
                    try {
                        this.elementOtherDialogs[e].dialog("destroy")
                    } catch (t) {}
                    try {
                        this.elementOtherDialogs[e].remove()
                    } catch (t) {}
                }
                this.elementOtherDialogs = [], this.onGameEnd(!1)
            }, i.prototype.initializeGameState = function() {
                $(".item").remove(), $(".in-use").removeClass("in-use"), $(".disabled").removeClass("disabled"), $("#stats").find(".container").removeClass("flash"), $("input[type='search']").val(""), this.craftableItemTypes = null, this.nonCraftableItemTypes = null, this.messages = [], this.messageLoadIndex = 0, this.worldTooltip = null, this.elementMessagesOverlay.empty(), this.elementDialogMessagesContainer.empty()
            }, i.prototype.onGameEnd = function(e) {
                e && this.elementBlocker.quickShow(), this.elementBlockerMouse.quickShow(), this.tooltipHide(), this.hideContextMenu(), this.hideActionsMenu()
            }, i.prototype.getDialogIndex = function(e, t) {
                return void 0 === t && (t = null), e === DialogId.Custom && t ? "Custom_" + t.id : e.toString()
            }, i.prototype.setupDialog = function(e, t, i) {
                var a = this;
                void 0 === t && (t = null), void 0 === i && (i = null);
                var n = this.getDialogIndex(e, i),
                    o = ui.dialogInfo[n],
                    r = !1;
                if (e === DialogId.Container && null !== t) {
                    var s = game.items[t];
                    s && Item.isContainer(s) && (r = !0, o = ui.dialogContainerInfo[t])
                }
                if (o) e === DialogId.Custom && i && (o.title = i.title, o.minWidth = i.minWidth, o.minHeight = i.minHeight, o.open = i.open, o.onOpen = i.onOpen, o.onClose = i.onClose, o.onResizeStop = i.onResizeStop);
                else switch (o = r && null !== t ? ui.dialogContainerInfo[t] = {} : e === DialogId.Custom && i ? ui.dialogInfo[n] = i : ui.dialogInfo[n] = {}, e) {
                    case DialogId.Inventory:
                        o.open = !0, o.width = 430, o.height = 205, o.x = ui.getWidth() - o.width - 20, o.y = 80;
                        break;
                    case DialogId.Container:
                        o.open = !0, o.width = 340, o.height = 305, o.x = ui.getWidth() - o.width - 20 - 430 - 10, o.y = 80;
                        for (var l = !1; this.isContainerDialogOver(o.x, o.y);)
                            if (l ? (o.x += o.width + 10, o.x + o.width + 10 > ui.getWidth() && (l = !l, o.x = ui.getWidth() - o.width - 10, o.y += o.height + 10)) : (o.x -= o.width + 10, o.x < 10 && (l = !l, o.x = 10, o.y += o.height + 10)), o.y + o.height + 10 > ui.getHeight()) {
                                o.y = ui.getHeight() - o.height - 10;
                                break
                            }
                        break;
                    case DialogId.Crafting:
                        o.width = 430, o.height = 160, o.x = ui.getWidth() - o.width - 20, o.y = 395;
                        break;
                    case DialogId.Equipment:
                        o.width = 430, o.height = 90, o.x = ui.getWidth() - o.width - 20, o.y = 295;
                        break;
                    case DialogId.Skills:
                        o.width = 210, o.height = 200, o.x = 20, o.y = ui.getHeight() - o.height - 200;
                        break;
                    case DialogId.Milestones:
                        o.width = 210, o.height = 200, o.x = 240, o.y = ui.getHeight() - o.height - 200;
                        break;
                    case DialogId.Messages:
                        o.width = 430, o.height = 220, o.x = 20, o.y = ui.getHeight() - o.height - 200 - 200 - 10;
                        break;
                    case DialogId.Map:
                        o.width = 430, o.height = 430, o.x = 460, o.y = ui.getHeight() - o.height - 200
                }
                var p = function(e, t, i) {
                        void 0 === i && (i = !1), a.highlightItemElementByItemId(e, t, i)
                    },
                    d = {
                        position: {
                            my: "left+" + o.x + " top+" + o.y,
                            at: "left top"
                        },
                        width: o.width,
                        height: o.height,
                        minWidth: 210,
                        resizable: !0,
                        appendTo: "#screen-in-game",
                        autoOpen: !1,
                        closeOnEscape: !1,
                        open: function() {
                            o.open = !0, o.onOpen && o.onOpen.apply(this), $(this).parent().find(".ui-dialog-titlebar-close").removeAttr("title")
                        },
                        close: function() {
                            o.open = !1, o.onClose && o.onClose.apply(this), null !== t && p(t, !1, !0)
                        },
                        dragStart: function() {
                            null !== t && p(t, !0)
                        },
                        dragStop: function() {
                            null !== t && p(t, !1), o.x = $(this).parent().offset().left, o.y = $(this).parent().offset().top
                        },
                        resizeStop: function() {
                            o.onResizeStop && o.onResizeStop.apply(this), o.x = $(this).parent().offset().left, o.y = $(this).parent().offset().top, o.width = $(this).parent().width(), o.height = $(this).parent().height()
                        }
                    };
                o.title && (d.title = o.title), o.minWidth && (d.minWidth = o.minWidth), o.minHeight && (d.minHeight = o.minHeight);
                var u = d.open,
                    g = d.close,
                    m = function(e, t) {
                        a.showSortContextMenu(e, t === Message.Inventory ? a.elementDialogInventoryContainer : t === Message.Container ? e.parent().parent().parent().find(".sortable") : a.elementDialogCraftingContainer, t)
                    },
                    y = function(e) {
                        a.onContainerClose(e)
                    },
                    c = function(e) {
                        a.closeContainerDialog(e)
                    };
                switch (e) {
                    case DialogId.Container:
                        d.autoOpen = !0, d.minHeight = 95, d.buttons = [{
                            text: messages[Message.Sort],
                            click: function() {
                                m($(this).parent().find(".sort"), Message.Container)
                            },
                            "class": "sort clickable"
                        }, {
                            text: messages[Message.GrabAll],
                            click: function() {
                                Item.moveAllFromContainerToInventory($(this).data("container"))
                            },
                            "class": "graball clickable"
                        }], d.close = function() {
                            g && g(null, null), y($(this).data("container")), c($(this))
                        };
                        break;
                    case DialogId.Inventory:
                        d.buttons = [{
                            text: messages[Message.Sort],
                            click: function() {
                                m($(this).parent().find(".sort"), Message.Inventory)
                            },
                            "class": "sort clickable"
                        }];
                        break;
                    case DialogId.Crafting:
                        d.buttons = [{
                            text: messages[Message.Sort],
                            click: function() {
                                m($(this).parent().find(".sort"), Message.Crafts)
                            },
                            "class": "sort clickable"
                        }];
                        break;
                    case DialogId.Equipment:
                        d.minWidth = 110, d.minHeight = 90;
                        break;
                    case DialogId.Skills:
                        d.minWidth = 210, d.minHeight = 100, d.open = function() {
                            u && u(null, null), a.updateSkillsDialog()
                        };
                        break;
                    case DialogId.Milestones:
                        d.minWidth = 210, d.minHeight = 100, d.open = function() {
                            u && u(null, null), a.updateMilestonesDialog()
                        };
                        break;
                    case DialogId.Messages:
                        d.open = function() {
                            u && u(null, null), a.onOpenMessages(), a.elementMessagesOverlay.quickHide()
                        }, d.close = function() {
                            g && g(null, null), a.onCloseMessages(), a.elementMessagesOverlay.quickShow()
                        }, d.buttons = [{
                            text: messages[Message.ClearMessages],
                            click: function() {
                                return a.onClearMessages()
                            },
                            "class": "clear-messages"
                        }];
                        break;
                    case DialogId.Map:
                        d.autoOpen = !1, d.minWidth = 210, d.minHeight = 210, d.open = function() {
                            u && u(null, null);
                            var e = $(this).children("canvas");
                            e.width($(this).width()), e.height($(this).height())
                        }, d.resize = function() {
                            var e = $(this).children("canvas");
                            e.width($(this).width()), e.height($(this).height())
                        }
                }
                return d
            }, i.prototype.onMouseDown = function(e) {
                var t = "touchstart" === e.type;
                return t ? (this.touchEvent = e, void(this.hasTouchScreen = !0)) : void(e.target && "game" === e.target.id && Mods.callHook(Mods.Hook.OnMouseDown, e) !== !1 && (this.blurFilters(), game.options.mouseMovement && ui.isBindDown(KeyBind.PrimaryMouse) && (ui.setMousePlayerDirection(this.getMovementDirection(e)), this.elementBlockerMouse.quickShow())))
            }, i.prototype.onMouseUpOrLeave = function(e) {
                if (this.enableQuickslotSortable(!1), "touchend" === e.type && this.worldTooltip && this.tooltipHide(), !e.target || "game" !== e.target.id) return void(this.touchEvent = null);
                if ("touchend" === e.type && this.touchEvent) {
                    var t = this.getMovementDirection(this.touchEvent);
                    ui.getBindDownTime(KeyBind.Touch) >= 400 ? t === FacingDirection.None ? this.toggleActionsMenu(!0) : this.onOtherClick(this.touchEvent) : ui.setTouchPlayerDirection(t), this.touchEvent = null
                } else ui.getMouseBind(KeyBind.SecondaryMouse) === e.button && ui.isBindDown(KeyBind.SecondaryMouse) ? this.onOtherClick(e) : this.runBind({
                    value: e.button,
                    type: BindType.Mouse
                })
            }, i.prototype.onOtherClick = function(e) {
                var t = ui.getMousePositionFromMouseEvent(e),
                    i = renderer.screenToTile(t.x, t.y);
                return game.fov.canSeeTile(i.x, i.y) ? void Actions.inspect(i.x, i.y) : void ui.displayMessage(Message.CannotSeeHere)
            }, i.prototype.onMouseMove = function(e) {
                "touchmove" === e.type && e.preventDefault(), this.mouseEvent = e;
                var t = e.pageX,
                    i = e.pageY;
                if ("touchmove" === e.type && (t = e.originalEvent.touches[0].pageX, i = e.originalEvent.touches[0].pageY), this.mouseX = t, this.mouseY = i, game.playing) {
                    if (this.updateQuickslotSortable(e, t, i), game.options.worldTooltips) {
                        var a = null;
                        if (e.target && "game" === e.target.id) {
                            var n = ui.getMousePositionFromMouseEvent(e),
                                o = renderer.screenToTile(n.x, n.y);
                            if (game.fov.canSeeTile(o.x, o.y)) {
                                var r = game.getTile(o.x, o.y);
                                r && (void 0 !== r.doodadId || void 0 !== r.eventId || void 0 !== r.corpseIds || void 0 !== r.monsterId && game.monsters[r.monsterId] && !game.isMonsterHidden(game.monsters[r.monsterId]) || void 0 !== r.containedItems && r.containedItems.length > 0) && (a = r)
                            }
                        }
                        if (a) return this.worldTooltip !== a && (this.tooltipHide(), this.worldTooltip = a), void($(document).functionalTooltip("show", document, e, !0) || $(document).functionalTooltip("update-position", document, t, i))
                    }
                    this.worldTooltip && this.tooltipHide()
                }
            }, i.prototype.onBlockerMouseMove = function(e) {
                game.playing && ui.setMousePlayerDirection(this.getMovementDirection(e))
            }, i.prototype.completeBlockerMouseMovement = function() {
                ui.isBindDown(KeyBind.PrimaryMouse) && (ui.setMousePlayerDirection(FacingDirection.None), this.elementBlockerMouse.quickHide())
            }, i.prototype.isMouseMovementBlockerVisible = function() {
                return this.elementBlockerMouse.isVisible()
            }, i.prototype.enableQuickslotSortable = function(e) {
                if ((e || !this.hasTouchScreen) && this.quickSlotSortableEnabled !== e) {
                    this.quickSlotSortableEnabled = e;
                    var t = e ? "enable" : "disable";
                    this.sortableElement ? ($(".quick-slot").sortable(t), $(".sortable, .quick-slot").sortable("refresh")) : $(".quick-slot").sortable(t)
                }
            }, i.prototype.updateQuickslotSortable = function(e, t, i) {
                return "touchstart" === e.type || "touchmove" === e.type || this.touchEvent ? void this.enableQuickslotSortable(!0) : void(this.lastMouseTarget !== e.target && (this.lastMouseTarget = e.target, e.target && 1 === $(e.target).closest("#quick-slots").length ? this.enableQuickslotSortable(!0) : this.enableQuickslotSortable(!1)))
            }, i.prototype.highlightItemElementByItemId = function(e, t, i, a) {
                void 0 === i && (i = !1), void 0 === a && (a = !1), this.highlightItemElementBySelector('.item[data-item-id="' + e + '"]', t, i, a)
            }, i.prototype.highlightItemElementByItemType = function(e, t, i, a) {
                void 0 === i && (i = !1), void 0 === a && (a = !1), this.highlightItemElementBySelector('.item[data-item-type="' + e + '"]', t, i, a)
            }, i.prototype.highlightItemElementByItemTypeWithNoItemId = function(e, t, i, a) {
                void 0 === i && (i = !1), void 0 === a && (a = !1), this.highlightItemElementBySelector('.item[data-item-type="' + e + '"]:not([data-item-id])', t, i, a)
            }, i.prototype.highlightItemElementBySelector = function(e, t, i, a) {
                void 0 === i && (i = !1), void 0 === a && (a = !1), $(e).each(function() {
                    var e = "item-" + $(this).getItemType() + "-selected",
                        n = "item-" + $(this).getItemType() + "-highlighted";
                    if (a) return void(t ? ($(this).addClass(e), $(this).addClass("item-selected"), $(this).hasClass("item-" + $(this).getItemType() + "-damaged") && $(this).addClass(n)) : ($(this).removeClass(e), $(this).removeClass("item-selected"), $(this).removeClass(n)));
                    var o = parseInt($(this).attr("data-selected-count"), 10);
                    if ((void 0 === o || isNaN(o)) && (o = 0), t ? o++ : o--, t) o > 0 && ($(this).addClass(e), $(this).addClass("item-selected"), $(this).hasClass("item-" + $(this).getItemType() + "-damaged") && $(this).addClass(n));
                    else if (o <= 0 || i) return $(this).removeClass(e), $(this).removeClass("item-selected"), $(this).removeClass(n), void $(this).removeAttr("data-selected-count");
                    $(this).attr("data-selected-count", o)
                })
            }, i.prototype.getMovementDirection = function(e) {
                var t = FacingDirection.None,
                    i = ui.getMousePositionFromMouseEvent(e),
                    a = renderer.screenToTile(i.x, i.y);
                if (player.x === a.x && player.y === a.y) return t;
                var n = (270 - 180 * Math.atan2(player.y - a.y, player.x - a.x) / Math.PI) % 360;
                switch (n) {
                    case 315:
                        player.facingDirection !== FacingDirection.South && player.facingDirection !== FacingDirection.West || (t = player.facingDirection);
                        break;
                    case 225:
                        player.facingDirection !== FacingDirection.West && player.facingDirection !== FacingDirection.North || (t = player.facingDirection);
                        break;
                    case 135:
                        player.facingDirection !== FacingDirection.North && player.facingDirection !== FacingDirection.East || (t = player.facingDirection);
                        break;
                    case 45:
                        player.facingDirection !== FacingDirection.East && player.facingDirection !== FacingDirection.South || (t = player.facingDirection)
                }
                return t === FacingDirection.None && (t = 225 >= n && n >= 135 ? FacingDirection.North : 135 >= n && n >= 45 ? FacingDirection.East : 45 >= n || n >= 315 ? FacingDirection.South : FacingDirection.West), t
            }, i.prototype.onMouseScroll = function(e) {
                if (e.target && "game" === e.target.id) {
                    var t = null,
                        i = e.originalEvent;
                    t = i.detail ? i.detail : -i.wheelDelta / 120, null !== t && (game.options.zoomOnScroll && game.addZoomLevel(t), e.preventDefault())
                }
            }, i.prototype.canUseHotkeys = function() {
                if (this.contextMenuBlocking) {
                    this.contextMenuBlocking = !1;
                    for (var e = 0; e < hotKeyNumbers.length; e++) {
                        var t = hotKeyNumbers[e];
                        if (ui.isBindDown(t)) return this.contextMenuBlocking = !0, !1
                    }
                }
                return !!game.turnProgressCompleted
            }, i.prototype.refreshStats = function() {
                for (var e = [{
                    element: this.elementStatHealth,
                    value: player.health,
                    max: player.strength,
                    colorFilledIn: "#FF0000",
                    colorBackground: "#850512"
                }, {
                    element: this.elementStatStamina,
                    value: player.stamina,
                    max: player.dexterity,
                    colorFilledIn: "#00E00B",
                    colorBackground: "#04770A"
                }, {
                    element: this.elementStatThirst,
                    value: player.thirst,
                    max: player.dehydration,
                    colorFilledIn: "#00B4FF",
                    colorBackground: "#024A94"
                }, {
                    element: this.elementStatHunger,
                    value: player.hunger,
                    max: player.starvation,
                    colorFilledIn: "#8900FE",
                    colorBackground: "#4B006E"
                }], t = 0; t < e.length; t++) {
                    var i = e[t],
                        a = Utilities.roundNumber(i.value / i.max * 100, 0);
                    a <= 0 && (a = 0);
                    var n = i.value + "/" + i.max + " (" + a + "%)";
                    if (this.lastStats[t] !== n) {
                        this.lastStats[t] = n, i.element.text(n), i.element.css("background", "repeating-linear-gradient(to right, " + i.colorBackground + " " + a + "%, " + i.colorFilledIn + " 9999px)");
                        var o = i.element.parent();
                        a <= 10 ? o.addClass("flash") : o.removeClass("flash")
                    }
                }
                player.status.burned ? this.elementStatBurn.quickShow() : this.elementStatBurn.quickHide(), player.status.bleeding ? this.elementStatBleed.quickShow() : this.elementStatBleed.quickHide(), player.status.poisoned ? this.elementStatPoison.quickShow() : this.elementStatPoison.quickHide()
            }, i.prototype.refreshAttributes = function() {
                var e = Utilities.roundNumber(player.weight, 1),
                    i = .9 * (player.strength + player.weightBonus),
                    a = player.strength + player.weightBonus,
                    n = e + "/" + a;
                if (this.lastText[t.Weight] !== n) {
                    this.lastText[t.Weight] = n, this.elementAttributeWeight.text(e + "/" + a);
                    var o = this.elementAttributeWeight.parent();
                    e > a ? (this.elementAttributeWeight.addClass("warning"), o.addClass("flash")) : e > i ? (this.elementAttributeWeight.removeClass("warning"), o.addClass("flash")) : (this.elementAttributeWeight.removeClass("warning"), o.removeClass("flash"))
                }
                this.updateTextIfChanged(t.Attack, this.elementAttributeAttack, (player.attack + player.attackFromEquip).toString()), this.updateTextIfChanged(t.Defense, this.elementAttributeDefense, player.defense.base.toString()), this.updateTextIfChanged(t.Malignity, this.elementAttributeMalignity, player.getMalignity().toString())
            }, i.prototype.updateTextIfChanged = function(e, t, i) {
                this.lastText[e] !== i && (this.lastText[e] = i, t.text(i))
            }, i.prototype.onButtonBarClick = function(e) {
                switch (e) {
                    case "TitleScreen":
                        var t = game.dailyChallenge ? Message.ReturnToTitleScreenNoSaveInDailyChallenge : Message.ReturnToTitleScreenProgressWillBeSaved;
                        ui.displayConfirmDialog(t, [Message.Yes, Message.No], function(e) {
                            e === Message.Yes && (ui.showLoadingScreen(), ui.setLoadingMessage(Message.SavingGame), setTimeout(function() {
                                return game.resetGameState()
                            }, 100))
                        });
                        break;
                    case "Save":
                        ui.showLoadingScreenAround(function() {
                            game.saveGame(SaveType.InGame)
                        });
                        break;
                    case "Help":
                        ui.displayHint(HintType.WelcomeToWayward, !0);
                        break;
                    case "Milestones":
                        this.toggleDialog(this.elementDialogMilestones);
                        break;
                    case "Messages":
                        this.toggleDialog(this.elementDialogMessages);
                        break;
                    case "Options":
                        ui.toggleOptions();
                        break;
                    case "Actions":
                        this.toggleActionsMenu(!0);
                        break;
                    case "Inventory":
                        this.toggleDialog(this.elementDialogInventory);
                        break;
                    case "Crafting":
                        this.toggleDialog(this.elementDialogCrafting);
                        break;
                    case "Equipment":
                        this.toggleDialog(this.elementDialogEquipment);
                        break;
                    case "Skills":
                        this.toggleDialog(this.elementDialogSkills)
                }
            }, i.prototype.blurFilters = function() {
                $(".filter, input[type='text'], input[type='number']").trigger("blur")
            }, i.prototype.toggleDialog = function(e) {
                return !!this.openDialog(e) || (this.closeDialog(e), !1)
            }, i.prototype.openDialog = function(e) {
                return !e.isVisible() && (e.dialog("open"), this.blurFilters(), !0)
            }, i.prototype.closeDialog = function(e) {
                return !!e.isVisible() && (e.dialog("close"), this.blurFilters(), !0)
            }, i.prototype.openMapDialog = function() {
                this.openDialog(this.elementDialogMap)
            }, i.prototype.closeMapDialog = function() {
                this.closeDialog(this.elementDialogMap)
            }, i.prototype.closeAllDialogs = function() {
                var e = !1;
                e = this.closeDialog(this.elementDialogInventory) || e, e = this.closeDialog(this.elementDialogCrafting) || e, e = this.closeDialog(this.elementDialogEquipment) || e, e = this.closeDialog(this.elementDialogSkills) || e, e = this.closeDialog(this.elementDialogMilestones) || e, e = this.closeDialog(this.elementDialogMessages) || e, e = this.closeDialog(this.elementDialogMap) || e, e = this.closeAllContainers() || e;
                for (var t = 0; t < this.elementOtherDialogs.length; t++) e = this.closeDialog(this.elementOtherDialogs[t]) || e;
                return e
            }, i.prototype.autoOpenDialog = function(e, t) {
                var i = ui.dialogInfo[e];
                return !(!i || !i.open) && this.openDialog(t)
            }, i.prototype.openDialogs = function() {
                this.autoOpenDialog(DialogId.Inventory, this.elementDialogInventory), this.autoOpenDialog(DialogId.Crafting, this.elementDialogCrafting), this.autoOpenDialog(DialogId.Equipment, this.elementDialogEquipment), this.autoOpenDialog(DialogId.Skills, this.elementDialogSkills), this.autoOpenDialog(DialogId.Milestones, this.elementDialogMilestones), this.autoOpenDialog(DialogId.Messages, this.elementDialogMessages);
                for (var e = 0, t = this.elementOtherDialogs; e < t.length; e++) {
                    var i = t[e],
                        a = i.data("dialog-index");
                    a && this.autoOpenDialog(a, i) && i.css("height", "")
                }
            }, i.prototype.clampDialogs = function() {
                var e = ui.getBody(),
                    t = ui.getWidth(),
                    i = ui.getHeight();
                $(".ui-dialog-content").each(function() {
                    var a = $(this).parent().position(),
                        n = a.left,
                        o = a.top,
                        r = $(this).dialog("option", "width"),
                        s = $(this).dialog("option", "height");
                    n + r > t && ($(this).dialog("option", "position", {
                        my: "right top",
                        at: "right top+" + o,
                        of: e,
                        collision: "fit fit"
                    }), r > t && $(this).dialog("option", "width", t)), o + s > i && ($(this).dialog("option", "position", {
                        my: "left bottom",
                        at: "left+" + n + " bottom",
                        of: e,
                        collision: "fit fit"
                    }), s > i && $(this).dialog("option", "height", i))
                })
            }, i.prototype.getItemClass = function(e, t) {
                if (void 0 === t && (t = null), e && !t && (t = e.type), !t) return "";
                var i, a = Item.defines[t];
                i = e && e.quality ? "-" + ItemQuality[e.quality].toLowerCase() : "-" + ItemImage[ItemImage.Default].toLowerCase();
                var n = "";
                if (a && a.group)
                    for (var o = a.group.length, r = 0; r < o; r++) n += " group-" + a.group[r];
                return "item-" + t + i + n
            }, i.prototype.createItemElementByItemType = function(e, t) {
                return void 0 === t && (t = null), $('<li class="tooltip item ' + this.getItemClass(t, e) + '" data-item-type="' + e + '"></li>')
            }, i.prototype.createItemElementByItem = function(e) {
                return e ? this.createItemElementByItemType(e.type, e).attr("data-item-id", e.id) : null
            }, i.prototype.syncItemElements = function(e, t) {
                var i = this;
                void 0 === t && (t = null);
                var a = game.items[e];
                if (a) {
                    var n = t || $('.item[data-item-id="' + e + '"]'),
                        o = !1;
                    n.each(function(e, t) {
                        var n = $(t);
                        a.type !== n.getItemType() && (o = !0, a.quickSlot && i.removeItemFromQuickSlot(a.id), n.attr("data-item-type", a.type), n.removeClass(function(e, t) {
                            return (t.match(/\bitem-\S+/g) || []).join(" ")
                        }), n.removeClass(function(e, t) {
                            return (t.match(/\bgroup-\S+/g) || []).join(" ")
                        }), n.get(0).className += " " + i.getItemClass(a, a.type)), a.quickSlot ? n.getQuickSlot() && 0 !== n.children("span.number").length || (n.attr("data-quick-slot", a.quickSlot), n.append('<span class="number">' + a.quickSlot + "</span>")) : (n.getQuickSlot() || n.children("span.number").length > 0) && (n.removeAttr("data-quick-slot"), n.children("span.number").remove()), a.equipped ? n.getEquipSlot() && 0 !== n.children("span.equipped").length || (n.attr("data-equip-slot", EquipType[a.equipped].toString()), n.prepend('<span class="equipped">E</span>')) : (n.getEquipSlot() || n.children("span.equipped").length > 0) && (n.removeAttr("data-equip-slot"), n.children("span.equipped").remove());
                        var r = "item-" + a.type + "-" + ItemImage[ItemImage.Legendary].toLowerCase();
                        a.legendary ? n.addClass(r) : n.removeClass(r), i.syncDamaged(a, n)
                    }), o && this.refreshQuickSlots()
                }
            }, i.prototype.syncDamaged = function(e, t) {
                var i = !!e && Item.isDamaged(e),
                    a = e ? e.type : t.getItemType(),
                    n = "item-" + a + "-" + ItemImage[ItemImage.Damaged].toLowerCase();
                i ? t.addClass(n) : t.removeClass(n)
            }, i.prototype.addItemToContainer = function(e, t, i, a) {
                void 0 === i && (i = !1), void 0 === a && (a = !1);
                var n = null,
                    o = null,
                    r = t === player.inventory;
                if (r ? n = this.elementDialogInventoryContainer : (o = this.getDialogElementForContainer(t), o && (n = o.find(".container"))), null !== n && void 0 !== n) {
                    var s = e.id,
                        l = this.createItemElementByItem(e);
                    if (l) {
                        if (null !== this.sortableElementPosition) {
                            if (this.sortableElementPosition === -1) n.prepend(l);
                            else {
                                var p = n.children(),
                                    d = p.eq(this.sortableElementPosition);
                                0 === d.length ? n.append(l) : d.after(l)
                            }
                            this.sortableElementPosition = null
                        } else n.append(l);
                        this.syncItemElements(s, l), i || this.saveItemOrder(n), a || this.onAddItemsToContainer(n, o, r)
                    }
                }
            }, i.prototype.onAddItemsToContainer = function(e, t, i) {
                !i && t && this.updateContainerName(t), this.onUpdateContainer(e, !0), this.refreshQuickSlots()
            }, i.prototype.afterAddingMultipleItemsToContainer = function(e) {
                var t = null,
                    i = null,
                    a = e === player.inventory;
                a ? t = this.elementDialogInventoryContainer : (i = this.getDialogElementForContainer(e), i && (t = i.find(".container"))), null !== t && void 0 !== t && this.onAddItemsToContainer(t, i, a)
            }, i.prototype.removeItemFromContainer = function(e, t) {
                var i = e.id,
                    a = null,
                    n = null,
                    o = t === player.inventory;
                o ? a = this.elementDialogInventoryContainer : (n = this.getDialogElementForContainer(t), n && (a = n.find(".container"))), null !== a && void 0 !== a && (a.children('[data-item-id="' + i + '"]').first().trigger("remove").remove(), n && this.updateContainerName(n))
            }, i.prototype.refreshQuickSlots = function() {
                for (var e = 1; e < 10; e++) this.updateQuickSlotItem(e)
            }, i.prototype.getInventoryItemsInOrder = function() {
                var e = [];
                return this.elementDialogInventoryContainer.children().each(function() {
                    var t = $(this).data("item-id"),
                        i = game.items[t];
                    e.push({
                        type: i.type,
                        id: t,
                        quality: i.quality,
                        minDur: i.minDur,
                        maxDur: i.maxDur
                    })
                }), e
            }, i.prototype.loadQuickSlots = function() {
                for (var e = 1; e < 10; e++) {
                    var t = ui.quickSlotInfo[e];
                    if (t && t.itemType) {
                        var i = this.getItemIdInQuickSlot(e);
                        null !== i && void 0 !== i || this.setQuickSlotByItemType(e, t.itemType, !0)
                    }
                }
                this.refreshQuickSlots()
            }, i.prototype.saveItemOrder = function(e) {
                var t = e.parent().data("container") || player.inventory;
                if (t) {
                    var i = 0;
                    e.children().each(function() {
                        var e = $(this).data("item-id");
                        void 0 !== e && (t.containedItems[i] = game.items[e], i++)
                    }), game.playing && audio.queueEffect(SfxType.PickUp)
                }
            }, i.prototype.showItemContextMenu = function(e, t) {
                void 0 === t && (t = !1);
                var i = e.data("item-id"),
                    a = e.getItemType(),
                    n = e.getQuickSlot(),
                    o = null;
                t && (o = e.parent().parent().data("container"));
                var r = [],
                    s = game.items[i];
                if (s) {
                    var l, p = Item.defines[a],
                        d = Item.getItemsInContainerByType(t ? o : player.inventory, a),
                        u = d.length,
                        g = 0,
                        m = !1;
                    for (l = 0; l < u; l++) {
                        var y = d[l];
                        y.quality === s.quality ? g++ : m = !0
                    }
                    if (p && p.use)
                        for (l = 0; l < p.use.length; l++) r.push({
                            action: "Use",
                            text: Item.actionDescriptions[p.use[l]].name,
                            data: {
                                actionType: p.use[l]
                            }
                        });
                    if (p && p.equip)
                        if (s.equipped) r.push({
                            action: "EquipOrUnEquip",
                            text: messages[Message.UnEquip]
                        });
                        else {
                            var c = equipTypeToMessage[p.equip];
                            r.push({
                                action: "EquipOrUnEquip",
                                text: "" + (messages[Message.EquipTo] + messages[c])
                            })
                        }
                    if (n) r.push({
                        action: "QuickSlotRemove",
                        text: messages[Message.RemoveFromQuickslot]
                    });
                    else {
                        var h = this.getFreeQuickSlots();
                        h.length > 0 && r.push({
                            action: "QuickSlotAdd",
                            text: messages[Message.AddToQuickslot]
                        })
                    } if (t ? (r.push({
                        action: "MoveToInventory",
                        text: messages[Message.MoveToInventory]
                    }), u > 1 && r.push({
                        action: "MoveAllToInventory",
                        text: messages[Message.MoveAllToInventory]
                    }), m && g > 1 && r.push({
                        action: "MoveAllOfSameQualityToInventory",
                        text: messages[Message.MoveAllOfSameQualityToInventory]
                    })) : null !== this.openedContainer && (r.push({
                        action: "MoveToOpenedContainer",
                        text: messages[Message.MoveToOpenedContainer]
                    }), u > 1 && r.push({
                        action: "MoveAllToOpenedContainer",
                        text: messages[Message.MoveAllToOpenedContainer]
                    }), m && g > 1 && r.push({
                        action: "MoveAllOfSameQualityToOpenedContainer",
                        text: messages[Message.MoveAllOfSameQualityToOpenedContainer]
                    })), r.push({
                        action: "Throw",
                        text: messages[Message.Throw]
                    }), r.push({
                        action: "Drop",
                        text: messages[Message.Drop]
                    }), u > 1 && r.push({
                        action: "DropAll",
                        text: messages[Message.DropAll]
                    }), m && g > 1 && r.push({
                        action: "DropAllOfSameQuality",
                        text: messages[Message.DropAllOfSameQuality]
                    }), p) {
                        if (p.durability && s.minDur < s.maxDur && p.repairable !== !1) {
                            var T = Item.getItemInInventoryByGroup(ItemTypeGroup.Repair, i);
                            T && r.push({
                                action: "Repair",
                                text: Utilities.String.formatCase(Item.groups[ItemTypeGroup.Repair].name, TextCase.Title) + " " + messages[Message.With] + " " + game.getName(Item.defines[T.type], TextCase.Title)
                            })
                        }
                        if (p.equip) {
                            var f = Item.getItemInInventoryByGroup(ItemTypeGroup.Transmogrify);
                            f && r.push({
                                action: "Transmogrify",
                                text: Utilities.String.formatCase(Item.groups[ItemTypeGroup.Transmogrify].name, TextCase.Title) + " " + messages[Message.With] + " " + game.getName(Item.defines[f.type], TextCase.Title)
                            })
                        }
                        if (p.durability) {
                            var v = Item.getItemInInventoryByGroup(ItemTypeGroup.Reinforce);
                            v && r.push({
                                action: "Reinforce",
                                text: Utilities.String.formatCase(Item.groups[ItemTypeGroup.Reinforce].name, TextCase.Title) + " " + messages[Message.With] + " " + game.getName(Item.defines[v.type], TextCase.Title)
                            })
                        }
                        if (p.decayMax && p.use && p.use.indexOf(ActionType.Eat) > -1 && p.use.indexOf(ActionType.Preserve) === -1) {
                            var I = Item.getItemInInventoryByGroup(ItemTypeGroup.Preservative);
                            I && r.push({
                                action: "Preserve",
                                text: Utilities.String.formatCase(Item.groups[ItemTypeGroup.Preservative].name, TextCase.Title) + " " + messages[Message.With] + " " + game.getName(Item.defines[I.type], TextCase.Title)
                            })
                        }
                        if (p.revert) {
                            var S = Item.getItemInInventoryByGroup(ItemTypeGroup.Fuel);
                            S && r.push({
                                action: "Add-Fuel",
                                text: messages[Message.AddFuel] + " " + messages[Message.With] + " " + game.getName(Item.defines[S.type], TextCase.Title)
                            })
                        }
                        p.disassemble && r.push({
                            action: "Disassemble",
                            text: messages[Message.DisassembleAction]
                        }), p.dismantle && r.push({
                            action: "Dismantle",
                            text: messages[Message.DismantleAction]
                        })
                    }
                    var M = {
                        actions: r,
                        quickSlot: n
                    };
                    $(document).contextmenu("open", e, M)
                }
            }, i.prototype.onContextMenuAction = function(e, t, i) {
                var a = e.data("item-id"),
                    n = e.data("container-id"),
                    o = e.getQuickSlot();
                return i && i.is(".quick-slot-action-select") ? (i.parent().parent().find(".selected").removeClass("selected"), i.addClass("selected"), ui.quickSlotInfo[o].action = t, ui.playClickSound(), !1) : this.runContextMenuAction(a, n, t)
            }, i.prototype.runContextMenuAction = function(e, t, i) {
                var a = null,
                    n = null,
                    o = null;
                null !== e && void 0 !== e && (o = game.items[e], o && (a = o.type, n = o.quickSlot));
                var r = null;
                switch (null !== t && void 0 !== t && (r = game.items[t]), i.action) {
                    case "Inspect":
                        Actions.inspect(player.x + player.direction.x, player.y + player.direction.y);
                        break;
                    case "PickUp":
                        Actions.execute(ActionType.Pickup, null);
                        break;
                    case "Carve":
                        Actions.execute(ActionType.Carve, player.canCarve());
                        break;
                    case "PickUpItem":
                        game.checkUnderPlayer(!0, !0), game.updateCraftTableAndWeightNextTurn(), game.passTurn();
                        break;
                    case "OpenDoor":
                        Actions.openDoor();
                        break;
                    case "CloseDoor":
                        Actions.closeDoor();
                        break;
                    case "Drink":
                        player.drink();
                        break;
                    case "Gather":
                        Actions.execute(ActionType.Gather, null);
                        break;
                    case "Rest":
                        Actions.execute(ActionType.Rest, null);
                        break;
                    case "Jump":
                        player.jump();
                        break;
                    case "Use":
                        o && Item.use(o, i.data.actionType);
                        break;
                    case "EquipOrUnEquip":
                        if (o)
                            if (o.equipped) this.removeItemFromEquipSlot(e);
                            else if (a) {
                            var s = Item.defines[a];
                            s && s.equip && this.setEquipSlot(s.equip, e)
                        }
                        break;
                    case "QuickSlotAdd":
                        this.addItemToFreeQuickSlot(e);
                        break;
                    case "QuickSlotRemove":
                        null !== n && void 0 !== n && this.clearQuickSlot(n);
                        break;
                    case "Throw":
                        Actions.execute(ActionType.Throw, o);
                        break;
                    case "Drop":
                        o && Item.drop(o, !1);
                        break;
                    case "DropAll":
                        o && Item.drop(o, !0);
                        break;
                    case "DropAllOfSameQuality":
                        o && Item.drop(o, !0, o.quality);
                        break;
                    case "MoveToOpenedContainer":
                        o && this.openedContainer && Item.moveToContainer(o, this.openedContainer);
                        break;
                    case "MoveAllToOpenedContainer":
                        o && this.openedContainer && Item.moveAllFromContainerToContainer(player.inventory, this.openedContainer, o.type);
                        break;
                    case "MoveAllOfSameQualityToOpenedContainer":
                        o && this.openedContainer && Item.moveAllFromContainerToContainer(player.inventory, this.openedContainer, o.type, o.quality);
                        break;
                    case "MoveToInventory":
                        o && Item.moveToContainer(o, player.inventory);
                        break;
                    case "MoveAllToInventory":
                        o && o.containedWithin && Item.moveAllFromContainerToContainer(o.containedWithin, player.inventory, o.type);
                        break;
                    case "MoveAllOfSameQualityToInventory":
                        o && o.containedWithin && Item.moveAllFromContainerToContainer(o.containedWithin, player.inventory, o.type, o.quality);
                        break;
                    case "Repair":
                        var l = Item.getItemInInventoryByGroup(ItemTypeGroup.Repair, e);
                        l && Actions.repair(l, o);
                        break;
                    case "Transmogrify":
                        var p = Item.getItemInInventoryByGroup(ItemTypeGroup.Transmogrify);
                        p && Actions.transmogrify(p, o);
                        break;
                    case "Reinforce":
                        var d = Item.getItemInInventoryByGroup(ItemTypeGroup.Reinforce);
                        d && Actions.reinforce(d, o);
                        break;
                    case "Preserve":
                        var u = Item.getItemInInventoryByGroup(ItemTypeGroup.Preservative);
                        u && Actions.preserve(u, o);
                        break;
                    case "Add-Fuel":
                        var g = Item.getItemInInventoryByGroup(ItemTypeGroup.Fuel);
                        g && o && Actions.addFuel(g, o);
                        break;
                    case "Disassemble":
                        Actions.execute(ActionType.Disassemble, o);
                        break;
                    case "Dismantle":
                        Actions.execute(ActionType.Dismantle, o);
                        break;
                    case "SortName":
                        this.sortItems(i.data.container, SortType.Name, i.data.messageType);
                        break;
                    case "SortGroup":
                        this.sortItems(i.data.container, SortType.Group, i.data.messageType);
                        break;
                    case "SortWeight":
                        this.sortItems(i.data.container, SortType.Weight, i.data.messageType);
                        break;
                    case "SortRecent":
                        this.sortItems(i.data.container, SortType.Recent, i.data.messageType);
                        break;
                    case "SortSkill":
                        this.sortItems(i.data.container, SortType.Skill, i.data.messageType);
                        break;
                    case "SortDecay":
                        this.sortItems(i.data.container, SortType.Decay, i.data.messageType);
                        break;
                    case "SortQuality":
                        this.sortItems(i.data.container, SortType.Quality, i.data.messageType);
                        break;
                    case "SortDurability":
                        this.sortItems(i.data.container, SortType.Durability, i.data.messageType);
                        break;
                    case "SortCategory":
                        this.sortItems(i.data.container, SortType.Category, i.data.messageType);
                        break;
                    default:
                        return !1
                }
                return ui.playClickSound(), !0
            }, i.prototype.onInventoryItemRightClick = function(e) {
                Item.drop(game.items[e.data("item-id")], ui.isBindDown(KeyBind.Shift))
            }, i.prototype.onContainerItemRightClick = function(e) {
                Item.moveToContainer(game.items[e.data("item-id")], player.inventory)
            }, i.prototype.onCraftingItemClick = function(e) {
                var t = Item.defines[e.data("item-type")];
                if (t && t.recipe) {
                    var i = new Item.ItemRecipeRequirementChecker(t.recipe, (!0));
                    i.process(player.inventory), i && i.requirementsMet() && (Item.craft(e.getItemType(), i.itemComponentsRequired, i.itemComponentsConsumed, i.itemComponentsToBeSalvaged, i.itemBaseComponent), this.tooltipHide())
                }
            }, i.prototype.onQuickSlotItemRightClick = function(e) {
                this.clearQuickSlot(e.parent().getQuickSlot())
            }, i.prototype.onEquipmentItemRightClick = function(e) {
                this.removeItemFromEquipSlot(e.data("item-id"))
            }, i.prototype.getTooltipHtml = function(e) {
                if (this.worldTooltip) return this.getTooltipHtmlForTile(this.worldTooltip);
                var t = e.attr("data-tooltip"),
                    i = e.data("attribute"),
                    a = e.data("skill"),
                    n = e.data("milestone");
                if (void 0 !== t) {
                    if (void 0 !== e.getEquipSlot()) {
                        var o = e.children();
                        if (o.length > 0) {
                            var r = o.first();
                            return this.getTooltipHtmlForItem(game.items[r.data("item-id")], r.getItemType(), r.hasClass("is-quick-slot"))
                        }
                    }
                    return t
                }
                if (e.hasClass("item")) {
                    var s = e.getItemType(),
                        l = Item.defines[s],
                        p = game.items[e.data("item-id")];
                    return !p && l.recipe && game.newCrafted[s] && (delete game.newCrafted[s], e.removeClass("item-" + s + "-highlighted")), this.getTooltipHtmlForItem(p, s, e.hasClass("is-quick-slot"))
                }
                if (void 0 !== a) return skillDescriptions[a].description;
                if (void 0 !== n) return n === -1 ? messages[Message.MilestoneIsInvisible] : n === -2 ? messages[Message.MilestoneIsHidden] : milestones[n].description;
                if (void 0 !== i) {
                    var d = "<ul>";
                    switch (i) {
                        case "Attack":
                            for (var u = [{
                                damage: 0,
                                type: messages[Message.Blunt],
                                slot: EquipType.LeftHand
                            }, {
                                damage: 0,
                                type: messages[Message.Blunt],
                                slot: EquipType.RightHand
                            }], g = 0; g < u.length; g++) {
                                var m = u[g],
                                    y = this.getEquipSlotItemElement(m.slot);
                                if (y.children().length > 0) {
                                    var c = game.items[y.children().data("item-id")];
                                    if (c) {
                                        var s = c.type,
                                            l = Item.defines[s];
                                        l && l.attack && l.damageType && (m.damage = l.attack, m.type = fullDamageType(l.damageType))
                                    }
                                }
                            }
                            var h = Utilities.roundNumber(player.skills[SkillType.Tactics].percent / 10, 0) + 1;
                            d += "<li><strong>" + messages[Message.LabelAttackFromTactics] + '</strong> <span class="attack">' + h + "</span></li>", d += "<li><strong>" + messages[Message.LabelBaseAttack] + '</strong> <span class="attack">' + player.attackFromEquip + "</span></li>", d += "<li><strong>" + messages[Message.LabelLeftHandAttack] + '</strong> <span class="attack">' + u[0].damage + "</span> (" + u[0].type + ")</li>", d += "<li><strong>" + messages[Message.LabelRightHandAttack] + '</strong> <span class="attack">' + u[1].damage + "</span> (" + u[1].type + ")</li>";
                            break;
                        case "Defense":
                            var T = Utilities.roundNumber(player.skills[SkillType.Parrying].percent / 10, 0);
                            d += "<li><strong>" + messages[Message.LabelDefenseFromParrying] + '</strong> <span class="defense">' + T + "</span></li>", d += "<li><strong>" + messages[Message.LabelBaseDefense] + '</strong> <span class="defense">' + (player.defense.base - T) + "</span></li>", d += "<li><strong>" + messages[Message.LabelBluntResist] + '</strong> <span class="defense">' + player.defenses[DamageType.Blunt] + "</span></li>", d += "<li><strong>" + messages[Message.LabelPiercingResist] + '</strong> <span class="defense">' + player.defenses[DamageType.Piercing] + "</span></li>", d += "<li><strong>" + messages[Message.LabelSlashingResist] + '</strong> <span class="defense">' + player.defenses[DamageType.Slashing] + "</span></li>", d += "<li><strong>" + messages[Message.LabelFireResist] + '</strong> <span class="defense">' + player.defenses[DamageType.Fire] + "</span></li>";
                            break;
                        case "Malignity":
                            d += "<li><strong>" + messages[Message.LabelMalignityPlus] + '</strong> <span class="malignity">' + player.malignityPlus + "</span></li>", d += "<li><strong>" + messages[Message.LabelMalignityNegative] + '</strong> <span class="malignity">' + player.malignityNegative + "</span></li>", d += "<li><strong>" + messages[Message.LabelScore] + '</strong> <span class="malignity">' + player.score + "</span></li>";
                            break;
                        default:
                            return messages[Message.NotAvailable]
                    }
                    return d += "</ul>"
                }
                return messages[Message.NotAvailable]
            }, i.prototype.tooltipEnable = function() {
                $(document).functionalTooltip("enable")
            }, i.prototype.tooltipRefresh = function() {
                $(document).functionalTooltip("refresh")
            }, i.prototype.tooltipDisable = function() {
                $(document).functionalTooltip("disable")
            }, i.prototype.tooltipHide = function() {
                this.worldTooltip = null, $(document).functionalTooltip("hide")
            }, i.prototype.onTooltipClose = function() {
                $(".item-selected").each(function() {
                    void 0 === $(this).data("selected-count") && ($(this).removeClass("item-" + $(this).getItemType() + "-selected"), $(this).removeClass("item-selected"), $(this).parent("#container-crafting").length || $(this).removeClass("item-" + $(this).getItemType() + "-highlighted"))
                })
            }, i.prototype.getTooltipHtmlForItem = function(e, t, i) {
                var a = Item.defines[t];
                if (!a) return messages[Message.UnknownItem];
                var n = "<h3>" + game.getName(a, TextCase.Title) + "</h3>";
                if (e) {
                    e.quality && (n += '<p><span class="item-' + ItemQuality[e.quality].toLowerCase() + '"> ' + ItemQuality[e.quality] + "</span></p>"), n += "<p><strong>" + messages[Message.LabelDurability] + "</strong><span", e.minDur <= 2 && (n += ' class="item-damaged"'), n += ">" + e.minDur + "</span>/", n += "<span", e.quality && (n += ' class="' + ItemQuality[e.quality].toLowerCase() + '"'), n += ">", n += e.maxDur + "</span>", a.decayMax && (n += " <strong>" + messages[Message.LabelDecay] + "</strong> " + e.decay), n += "</p>", n += "<p><strong>";
                    var o = e && Item.isContainer(e);
                    if (o) {
                        var r = Item.computeContainerWeight(e);
                        r > 0 ? n += messages[Message.LabelWeight] + "</strong> " + e.weight + " + " + Utilities.roundNumber(r, 1) : o = !1
                    }
                    o || (n += messages[Message.LabelWeight] + "</strong> " + e.weight), a.doodadContainer && (n += " <strong>" + messages[Message.LabelWeightCapacity] + "</strong> " + Doodad.defines[a.doodadContainer].weightCapacity), n += "</p>"
                }
                n += "<p><strong>" + a.description + "</strong></p>";
                var s = "";
                if (a.use) {
                    s += "<strong>", s += a.use.length > 1 ? messages[Message.LabelUses] : messages[Message.LabelUse], s += "</strong> ";
                    for (var l = 0; l < a.use.length; l++) s += Item.actionDescriptions[a.use[l]].name + ", ";
                    s = s.slice(0, -2) + " "
                }
                var p;
                if (a.group) {
                    for (s += "<strong>" + messages[Message.LabelGrouping] + "</strong>", p = 0; p < a.group.length; p++) {
                        var d = a.group[p];
                        s += game.getName(Item.groups[d], TextCase.Title) + ", "
                    }
                    s = s.slice(0, -2) + " "
                }
                a.onUse && a.onUse[ActionType.StokeFire] && (s += "<strong>" + messages[Message.LabelStokeFireStrength] + "</strong>" + a.onUse[ActionType.StokeFire]), a.weightCapacity && (s += "<strong>" + messages[Message.LabelWeightCapacity] + "</strong> " + a.weightCapacity + ", <strong>" + messages[Message.LabelWeightReduction] + "</strong> -50%"), s && (n += "<p>" + s + "</p>");
                var u = "";
                if (a.equip) {
                    var g = equipTypeToMessage[a.equip];
                    u += "<strong>" + messages[Message.LabelEquip] + "</strong> " + messages[g]
                }
                a.attack && (a.equip || (u += "<strong>" + messages[Message.LabelRangedDamage] + "</strong> "), u += " (+" + a.attack + " ", a.damageType && (u += fullDamageType(a.damageType)), u += " " + messages[Message.Attack] + ")"), u && (n += "<p>" + u + "</p>");
                var m = "";
                if (a.onEquipEffect && (m += "+" + a.onEquipEffect[1] + " " + onEquipTypes[a.onEquipEffect[0]]), e && e.legendary && (m && (m += ", "), m += '<span class="item-legendary">+' + e.legendary.value + " " + skillDescriptions[e.legendary.skill].name + "</span>"), m && (n += "<p><strong>" + messages[Message.LabelOnEquip] + "</strong> " + m + "</p>"), a.dismantle) {
                    var y = "<ul><li>";
                    for (var c in a.dismantle.items) y += game.getName(Item.defines[a.dismantle.items[c]], TextCase.Title) + ", ";
                    y = y.substr(0, y.length - 2), y += "</li>", a.dismantle.required && (y += "<li><strong>" + messages[Message.LabelRequires] + "</strong>" + game.getName(Item.groups[a.dismantle.required], TextCase.Title) + "</li>"), y += "</ul>", n += '<p class="no-space"><strong>' + messages[Message.DismantleLabel] + "</strong></p>" + y
                }
                if (a.defense) {
                    var h = "<ul><li><strong>" + messages[Message.LabelBase] + "</strong>" + a.defense.base + "</li>";
                    if (Object.keys(a.defense.resist).length > 0) {
                        h += "<li><strong>" + messages[Message.LabelResists] + "</strong>";
                        for (var T in a.defense.resist) h += DamageType[T] + " (" + a.defense.resist[T] + "), ";
                        h = h.substr(0, h.length - 2), h += "</li>"
                    }
                    if (Object.keys(a.defense.vulnerable).length > 0) {
                        h += "<li><strong>" + messages[Message.LabelVulnerabilities] + "</strong>";
                        for (var f in a.defense.vulnerable) h += DamageType[f] + " (" + a.defense.vulnerable[f] + "), ";
                        h = h.substr(0, h.length - 2), h += "</li>"
                    }
                    h += "</ul>", n += '<p class="no-space"><strong>' + messages[Message.LabelDefense] + "</strong></p>" + h
                }
                if (a.ranged) {
                    var v = "";
                    v = "+" + a.ranged.attack, 0 === a.ranged.attack && (v = messages[Message.NotAvailable]), n += "<p><strong>" + messages[Message.LabelRanged] + "</strong> (" + messages[Message.LabelRange] + " " + a.ranged.range + ", " + messages[Message.LabelRangedAttack] + " " + v + ")</p>"
                }
                if (e && this.craftableItemTypes && this.nonCraftableItemTypes)
                    for (var I = this.craftableItemTypes.concat(this.nonCraftableItemTypes), S = 0, M = I; S < M.length; S++) {
                        var k = M[S],
                            b = Item.defines[k];
                        if (b) {
                            var w = b.recipe;
                            if (w) {
                                var D = !1;
                                if (void 0 !== w.baseComponent && Item.isItemTypeGroup(w.baseComponent) ? a.group && a.group.indexOf(w.baseComponent) !== -1 && (D = !0) : w.baseComponent === e.type && (D = !0), !D)
                                    for (var C = 0, F = w.components; C < F.length; C++) {
                                        var R = F[C],
                                            A = R.type;
                                        if (Item.isItemTypeGroup(A)) {
                                            if (a.group && a.group.indexOf(A) !== -1) {
                                                D = !0;
                                                break
                                            }
                                        } else if (A === e.type) {
                                            D = !0;
                                            break
                                        }
                                    }
                                D && this.highlightItemElementByItemTypeWithNoItemId(k, !0, !1, !0)
                            }
                        }
                    }
                var B = a.recipe;
                if (!e && B && !i) {
                    var L = "<ul>",
                        x = new Item.ItemRecipeRequirementChecker(B, (!0));
                    x.process(player.inventory);
                    for (var G = x.itemBaseComponent, U = x.itemComponentsRequired, W = x.itemComponentsConsumed, E = 0; E < U.length; E++) this.highlightItemElementByItemId(U[E].id, !0, !1, !0);
                    for (var E = 0; E < W.length; E++) this.highlightItemElementByItemId(W[E].id, !0, !1, !0);
                    if (B.baseComponent) {
                        var P = Item.getItemTypeGroupName(B.baseComponent);
                        G ? this.highlightItemElementByItemId(G.id, !0, !1, !0) : L += '<span class="recipe-missing-items">', L += "<li>x1 " + P + "</li>", G || (L += "</span>")
                    }
                    for (var O = B.components, E = 0; E < O.length; E++) {
                        var H = O[E],
                            N = H.type,
                            q = H.requiredAmount,
                            _ = H.consumedAmount,
                            z = Item.getItemTypeGroupName(N),
                            V = x.amountNeededForComponent(E);
                        V > 0 && (L += '<span class="recipe-missing-items">'), L += "<li>x" + q + " " + z, _ > 0 && (L += " (x" + _ + " " + messages[Message.Consumed] + ")"), L += " (" + messages[Message.LabelHave] + " " + (q - V) + "/" + q + ")</li>", V > 0 && (L += "</span>")
                    }
                    if (B.requiredDoodadType || B.requiresFire) {
                        L += "<li><strong>" + messages[Message.LabelDoodadRequired] + "</strong> ";
                        var Y = Item.hasRequiredDoodad(t);
                        Y || (L += '<span class="recipe-missing-items">'), B.requiresFire ? L += messages[Message.FireSource] : B.requiredDoodadType && (L += game.getName(Doodad.defines[B.requiredDoodadType], TextCase.Title)), Y || (L += "</span>"), L += "</li>"
                    }
                    L += "</ul>";
                    var K = recipeLevelToMessage[B.level],
                        j = "";
                    j = player.skills[B.skill].percent <= skillChance(B.level) - 40 ? '<span class="skill-warning">' + messages[K] + "</span>" : messages[K], n += "<p><strong>" + messages[Message.LabelSkill] + "</strong> " + skillDescriptions[B.skill].name + " <strong>" + messages[Message.LabelLevel] + "</strong> " + j + '</p><p class="no-space"><strong>' + messages[Message.LabelRequires] + "</strong> " + L + "</p>"
                }
                if (a.use)
                    for (var E = 0; E < a.use.length; E++) n += "<p><strong>" + Item.actionDescriptions[a.use[E]].name + ":</strong> " + Item.actionDescriptions[a.use[E]].description + "</p>";
                return n
            }, i.prototype.getTooltipHtmlForTile = function(e) {
                for (var t = "", i = game.inspectTile(e), a = 0, n = i; a < n.length; a++) {
                    var o = n[a];
                    if (o.type !== InspectType.Tile) {
                        var r = !1;
                        if (o.messagePack.message === Message.YouSee || o.messagePack.message === Message.ItContains) {
                            if (o.messagePack.message = null, o.type !== InspectType.Items) {
                                r = !0;
                                var s = o.messagePack.args;
                                if (s)
                                    for (var l = 0; l < s.length; l++) s[l] = Utilities.String.formatCase(s[l], TextCase.Title)
                            }
                        } else o.messagePack.message === Message.ItsWeightCapacity && (o.messagePack.message = Message.WeightCapacity);
                        t += ui.getMessageHtml(o.messagePack, r ? "h3" : "p", TextCase.None, !1)
                    }
                }
                return t
            }, i.prototype.displayMessagePack = function(e) {
                var t = ui.getMessageHtml(e);
                this.elementMessagesOverlay.append(t), this.messages && this.messages.push(t), this.elementDialogMessages.isVisible() && (this.elementDialogMessagesContainer.append(t), this.elementDialogMessagesContainer.scrollTop(this.elementDialogMessagesContainer.prop("scrollHeight")))
            }, i.prototype.createDialog = function(e, t) {
                var i = e.dialog(this.setupDialog(DialogId.Custom, null, t));
                return i.data("dialog-index", this.getDialogIndex(DialogId.Custom, t)), this.elementOtherDialogs.push(i), i
            }, i.prototype.getMessageCount = function() {
                return this.elementMessagesOverlay.children().length
            }, i.prototype.removeOldestMessage = function() {
                this.elementMessagesOverlay.children().eq(0).remove(), this.elementMessagesOverlay.children().height(0).height("auto")
            }, i.prototype.getUsedQuickSlots = function() {
                var e = [];
                return this.elementQuickSlotsContainer.children(".in-use").each(function() {
                    e.push($(this).getQuickSlot())
                }), e
            }, i.prototype.getFreeQuickSlots = function() {
                var e = [];
                return this.elementQuickSlotsContainer.children(":not(.in-use)").each(function() {
                    e.push($(this).getQuickSlot())
                }), e
            }, i.prototype.getQuickSlotItemElement = function(e) {
                return this.elementQuickSlotsContainer.children('[data-quick-slot="' + e + '"]').first()
            }, i.prototype.getItemIdInQuickSlot = function(e) {
                var t = this.getQuickSlotItemElement(e);
                return t.hasClass("in-use") && !t.hasClass("disabled") ? t.children("li").data("item-id") : null
            }, i.prototype.setQuickSlot = function(e, t, i) {
                if (void 0 === i && (i = !1), null !== t) {
                    var a = game.items[t];
                    if (a) {
                        if (!Item.isInInventory(a)) {
                            for (var n = !1, o = 0; o < this.elementContainerDialogs.length; o++) {
                                var r = this.elementContainerDialogs[o].data("container");
                                if (Item.isContainableInContainer(a, r)) {
                                    n = !0;
                                    break
                                }
                            }
                            if (!n) return void this.setQuickSlotByItemType(e, a.type, !0);
                            Item.moveToContainer(a, player.inventory)
                        }
                        var s = null;
                        ui.quickSlotInfo[e] && ui.quickSlotInfo[e].itemType === a.type && (s = ui.quickSlotInfo[e].action), a.quickSlot && (s = ui.quickSlotInfo[a.quickSlot].action, this.clearQuickSlot(a.quickSlot, !0)), a.quickSlot = e, ui.quickSlotInfo[e] = {
                            itemType: a.type,
                            action: s
                        }, this.setQuickSlotByItemType(e, a.type, !1).attr("data-item-id", t).addClass(this.getItemClass(a)), this.syncItemElements(t), i || audio.queueEffect(SfxType.PickUp)
                    }
                }
            }, i.prototype.setQuickSlotByItemType = function(e, t, i) {
                var a = null;
                ui.quickSlotInfo[e] && ui.quickSlotInfo[e].itemType === t && (a = ui.quickSlotInfo[e].action), this.clearQuickSlot(e, !0), ui.quickSlotInfo[e] = {
                    itemType: t,
                    action: a
                };
                var n = this.getQuickSlotItemElement(e);
                n.attr("data-item-type", t), n.addClass("in-use"), i ? n.addClass("disabled") : n.removeClass("disabled");
                var o = this.createItemElementByItemType(t);
                return o.addClass("is-quick-slot"), n.prepend(o), o
            }, i.prototype.addItemToFreeQuickSlot = function(e) {
                var t = this.getFreeQuickSlots();
                0 !== t.length && this.setQuickSlot(t[0], e)
            }, i.prototype.clearQuickSlot = function(e, t) {
                void 0 === t && (t = !1);
                var i = this.getQuickSlotItemElement(e);
                if (i.hasClass("in-use")) {
                    var a = this.getItemIdInQuickSlot(e);
                    this.removeItemFromQuickSlot(a), delete ui.quickSlotInfo[e], i.removeClass("in-use"), i.removeClass("disabled"), i.removeAttr("data-item-type"), i.children("li").trigger("remove").remove(), t || audio.queueEffect(SfxType.PickUp)
                }
            }, i.prototype.removeItemFromQuickSlot = function(e) {
                if (null !== e) {
                    var t = game.items[e];
                    t && t.quickSlot && (t.quickSlot = void 0, this.syncItemElements(e))
                }
            }, i.prototype.updateQuickSlotItem = function(e) {
                var t = this.getQuickSlotItemElement(e);
                if (t.hasClass("in-use")) {
                    var i = this.getItemIdInQuickSlot(e);
                    if (null !== i) {
                        var a = game.items[i];
                        if (a && Item.isInInventory(a) && a.quickSlot === e) return void t.removeClass("disabled")
                    }
                    var n = !1,
                        o = t.getItemType(),
                        r = Item.getItemsInContainerByType(player.inventory, o, !0);
                    if (r.length > 0)
                        for (var s = 0; s < r.length; s++) {
                            var l = r[s];
                            if (l && l.id !== i) {
                                if (!l.quickSlot) return void this.setQuickSlot(e, l.id, !0);
                                n = !0
                            }
                        }
                    null !== i ? this.setQuickSlotByItemType(e, o, !n) : n ? t.removeClass("disabled") : t.addClass("disabled")
                }
            }, i.prototype.onSortableItemReceive = function(e, t) {
                var i = t.item,
                    a = i.index() - 1,
                    n = i.data("item-id"),
                    o = i.getQuickSlot(),
                    r = parseInt(EquipType[i.getEquipSlot()], 10),
                    s = t.sender.data("sortable"),
                    l = $(e.target),
                    p = l.getQuickSlot(),
                    d = parseInt(EquipType[l.getEquipSlot()], 10),
                    u = l.data("sortable"),
                    g = l.parent().data("container"),
                    m = game.items[n];
                switch (t.sender.sortable("cancel"), u) {
                    case "quick-slot":
                        switch (s) {
                            case "quick-slot":
                                l.hasClass("in-use") && this.setQuickSlot(o, this.getItemIdInQuickSlot(p))
                        }
                        if (null !== n && void 0 !== n) this.setQuickSlot(p, n);
                        else {
                            var y = i.getItemType();
                            this.clearQuickSlot(i.parent().getQuickSlot()), this.setQuickSlotByItemType(p, y, !0), this.updateQuickSlotItem(p)
                        }
                        break;
                    case "equip-slot":
                        switch (s) {
                            case "equip-slot":
                                l.hasClass("in-use") && this.setEquipSlot(r, this.getItemIdInEquipSlot(d), !0)
                        }
                        this.setEquipSlot(d, n);
                        break;
                    case "inventory":
                        switch (s) {
                            case "quick-slot":
                                this.clearQuickSlot(o);
                                break;
                            case "equip-slot":
                                this.removeItemFromEquipSlot(n);
                                break;
                            case "container":
                                m.containedWithin && ui.isBindDown(KeyBind.Shift) ? Item.moveAllFromContainerToContainer(m.containedWithin, player.inventory, m.type) : (this.sortableElementPosition = a, Item.moveToContainer(m, player.inventory), this.sortableElementPosition = null);
                                break;
                            default:
                                this.setQuickSlot(p, n)
                        }
                        break;
                    case "container":
                        switch (s) {
                            case "inventory":
                            case "container":
                                g && (m.containedWithin && ui.isBindDown(KeyBind.Shift) ? Item.moveAllFromContainerToContainer(m.containedWithin, g, m.type) : (this.sortableElementPosition = a, Item.moveToContainer(m, g), this.sortableElementPosition = null))
                        }
                        break;
                    case void 0:
                        void 0 !== m && null !== m && Item.drop(m, ui.isBindDown(KeyBind.Shift))
                }
                this.blurFilters()
            }, i.prototype.getEquipSlotItemElement = function(e) {
                return this.elementDialogEquipmentContainer.children('[data-equip-slot="' + EquipType[e].toString() + '"]').first()
            }, i.prototype.getItemIdInEquipSlot = function(e) {
                var t = this.getEquipSlotItemElement(e);
                return t.hasClass("in-use") ? t.children("li").data("item-id") : null
            }, i.prototype.setEquipSlot = function(e, t, i) {
                if (void 0 === i && (i = !1), null !== t) {
                    var a = game.items[t];
                    if (a) {
                        var n = Item.defines[a.type];
                        if (n) {
                            var o = n.equip;
                            if (o) {
                                if (o !== e) {
                                    if (o !== EquipType.Held) return void ui.displayMessage(Message.CannotEquipThatThere);
                                    if (e !== EquipType.LeftHand && e !== EquipType.RightHand) return void ui.displayMessage(Message.CannotEquipThatThere)
                                }
                                a.containedWithin !== player.inventory && Item.moveToContainer(a, player.inventory), a.equipped && this.removeItemFromEquipSlot(t, !0), e === EquipType.Held && (e = EquipType.LeftHand, null !== this.getItemIdInEquipSlot(e) && (e = EquipType.RightHand));
                                var r = this.getItemIdInEquipSlot(e);
                                null !== r && this.removeItemFromEquipSlot(r, !0);
                                var s = this.getEquipSlotItemElement(e);
                                s.addClass("in-use"), s.prepend(this.createItemElementByItem(a)), Item.equip(a, e, i), this.syncItemElements(t), i || (ui.displayMessage(Message.YouEquip, MessageType.None, game.getName(n)), ui.displayHint(HintType.HeldItems), audio.queueEffect(SfxType.PickUp), this.isVisible() && this.openDialog(this.elementDialogEquipment))
                            }
                        }
                    }
                }
            }, i.prototype.removeItemFromEquipSlot = function(e, t) {
                void 0 === t && (t = !1);
                var i = game.items[e];
                if (i.equipped) {
                    var a = this.getEquipSlotItemElement(i.equipped);
                    a.hasClass("in-use") && (a.removeClass("in-use"), a.children("li").trigger("remove").remove(), Item.unequip(i), this.syncItemElements(e), ui.displayMessage(Message.YouUnequip, MessageType.None, game.getName(Item.defines[i.type])), t || audio.queueEffect(SfxType.PickUp))
                }
            }, i.prototype.updateSkillsDialog = function() {
                var e = ui.getDialogInfo(DialogId.Skills);
                if (e && e.open) {
                    this.elementDialogSkillsContainer.empty();
                    var t = [];
                    for (var i in SkillType) {
                        var a = parseInt(i, 10);
                        isNaN(a) || t.push(a)
                    }
                    t.sort(function(e, t) {
                        var i = skillDescriptions[e].name,
                            a = skillDescriptions[t].name;
                        return i > a ? 1 : -1
                    });
                    for (var n = 0, o = t; n < o.length; n++) {
                        var a = o[n];
                        if (player.skills[a].core > 0 || player.skills[a].bonus > 0) {
                            player.skills[a].percent = player.skills[a].core + player.skills[a].bonus;
                            var r = $("<p>" + skillDescriptions[a].name + ": " + player.skills[a].percent + "%</p>").data("skill", a);
                            this.elementDialogSkillsContainer.append(r)
                        }
                    }
                }
            }, i.prototype.updateMilestonesDialog = function() {
                var e = ui.getDialogInfo(DialogId.Milestones);
                if (e && e.open) {
                    this.elementDialogMilestonesContainer.empty();
                    for (var t = Object.keys(milestones), i = 0; i < t.length; i++) {
                        var a = parseInt(t[i], 10),
                            n = milestoneData[a].amount,
                            o = "<p>",
                            r = milestones[a].visibility === MilestoneVisibilityType.Invisibile && n !== -1;
                        o += r ? "???" : milestones[a].name, o += ": ";
                        var s = milestones[a].visibility === MilestoneVisibilityType.Hidden && n !== -1;
                        s ? o += "???" : (n === -1 && (n = milestones[a].amount), o += n + "/" + milestones[a].amount), o += "</p>";
                        var l = $(o).data("milestone", r ? -1 : s ? -2 : a);
                        this.elementDialogMilestonesContainer.append(l)
                    }
                }
            }, i.prototype.updateCraftingDialog = function(e, t) {
                this.craftableItemTypes && this.nonCraftableItemTypes && ArrayEquals(this.craftableItemTypes, e) && ArrayEquals(this.nonCraftableItemTypes, t) || (this.craftableItemTypes = e, this.nonCraftableItemTypes = t, this.onUpdateContainer(this.elementDialogCraftingContainer, !1))
            }, i.prototype.createCraftItemElements = function(e) {
                var t = this;
                if (this.elementDialogCraftingContainer.empty(), e === SortType.Category)
                    for (var i = function(e) {
                        var i = !1,
                            n = function() {
                                i || (i = !0, t.elementDialogCraftingContainer.append('<div data-section="' + e + '">' + Utilities.String.formatCase(Item.groups[e].name, TextCase.Title) + "</div>"))
                            };
                        if (a.craftableItemTypes)
                            for (var o = 0; o < a.craftableItemTypes.length; o++) {
                                var r = a.craftableItemTypes[o],
                                    s = Item.defines[r];
                                if (s.group && s.group.indexOf(e) !== -1 || !s.group && e === ItemTypeGroup.Other) {
                                    n();
                                    var l = a.createItemElementByItemType(r);
                                    game.newCrafted[r] && (l = l.addClass("item-" + r + "-highlighted")), a.elementDialogCraftingContainer.append(l)
                                }
                            }
                        if (a.nonCraftableItemTypes)
                            for (var o = 0; o < a.nonCraftableItemTypes.length; o++) {
                                var r = a.nonCraftableItemTypes[o],
                                    s = Item.defines[r];
                                if (s.group && s.group.indexOf(e) !== -1 || !s.group && e === ItemTypeGroup.Other) {
                                    n();
                                    var l = a.createItemElementByItemType(r);
                                    game.newCrafted[r] && (l = l.addClass("item-" + r + "-highlighted")), a.elementDialogCraftingContainer.append(l.addClass("non-craftable"))
                                }
                            }
                        i && a.elementDialogCraftingContainer.append('<div class="clear-fix">')
                    }, a = this, n = ItemTypeGroup.Invalid + 1; n < ItemTypeGroup.Last; n++) i(n);
                else {
                    if (this.craftableItemTypes)
                        for (var o = 0; o < this.craftableItemTypes.length; o++) {
                            var r = this.createItemElementByItemType(this.craftableItemTypes[o]);
                            game.newCrafted[this.craftableItemTypes[o]] && (r = r.addClass("item-" + this.craftableItemTypes[o] + "-highlighted")), this.elementDialogCraftingContainer.append(r)
                        }
                    if (this.elementDialogCraftingContainer.append('<div class="clear-fix">'), this.nonCraftableItemTypes)
                        for (var o = 0; o < this.nonCraftableItemTypes.length; o++) {
                            var r = this.createItemElementByItemType(this.nonCraftableItemTypes[o]);
                            game.newCrafted[this.nonCraftableItemTypes[o]] && (r = r.addClass("item-" + this.nonCraftableItemTypes[o] + "-highlighted")), this.elementDialogCraftingContainer.append(r.addClass("non-craftable"))
                        }
                }
            }, i.prototype.updateItem = function(e) {
                this.syncItemElements(e.id)
            }, i.prototype.onMove = function() {
                this.closeStaticContainers()
            }, i.prototype.refreshWorldTooltips = function() {
                this.mouseEvent && this.onMouseMove(this.mouseEvent)
            }, i.prototype.getDialogElementForContainer = function(e) {
                for (var t = 0; t < this.elementContainerDialogs.length; t++) {
                    var i = this.elementContainerDialogs[t];
                    if (i.data("container") === e) return i
                }
                return null
            }, i.prototype.isContainerOpen = function(e) {
                return null !== this.getDialogElementForContainer(e)
            }, i.prototype.openContainer = function(e, t) {
                var i = this;
                void 0 === t && (t = null);
                var a = $("#container").clone().removeAttr("id");
                a.appendTo(this.elementDialogs);
                var n = null,
                    o = Item.getContainerReference(e);
                o && o.type === Item.ContainerReferenceType.Item && (n = o.id);
                var r = a.dialog(this.setupDialog(DialogId.Container, n)).data("container", e).data("container-name", t).data("cloned", a);
                r.parent().hover(function() {
                    !i.isSorting() && n && i.highlightItemElementByItemId(n, !0)
                }, function() {
                    n && i.highlightItemElementByItemId(n, !1, !0)
                }), this.elementContainerDialogs.push(r), r.find(".filter").val("");
                var s = r.find(".container").addClass("is-container-container"),
                    l = function() {
                        return i.isSorting()
                    },
                    p = function(e) {
                        i.showItemContextMenu(e, !0)
                    },
                    d = function(e) {
                        i.onContainerItemRightClick(e)
                    };
                s.on("mouseup", "li", function(e) {
                    l() || (e.button === ui.getMouseBind(KeyBind.SecondaryMouse) ? d($(this)) : p($(this))), e.preventDefault()
                });
                for (var u = 0; u < e.containedItems.length; u++) {
                    var g = e.containedItems[u];
                    this.addItemToContainer(g, e, !0, !0)
                }
                this.onAddItemsToContainer(s, r, !1), this.bindSortable(s), this.updateOpenedContainer(), this.blurFilters(), this.clampDialogs()
            }, i.prototype.closeContainer = function(e) {
                this.closeContainerDialog(this.onContainerClose(e))
            }, i.prototype.closeContainerDialog = function(e) {
                e && e.dialog("close").remove()
            }, i.prototype.onContainerClose = function(e) {
                for (var t = this, i = function() {
                    return t.cancelSorting()
                }, a = function(t) {
                    var a = n.elementContainerDialogs[t];
                    if (a.data("container") === e) {
                        var o = n.sortableElement;
                        return a.find(".item").each(function() {
                            o && this === o && i(), $(this).trigger("remove").remove()
                        }), n.elementContainerDialogs.splice(t, 1), n.updateOpenedContainer(), {
                            value: a
                        }
                    }
                }, n = this, o = 0; o < this.elementContainerDialogs.length; o++) {
                    var r = a(o);
                    if ("object" == typeof r) return r.value
                }
                return null
            }, i.prototype.closeStaticContainers = function() {
                for (var e = 0; e < this.elementContainerDialogs.length; e++) {
                    var t = this.elementContainerDialogs[e].data("container");
                    if (!Item.isInInventory(t)) return this.closeContainer(t), void this.closeStaticContainers()
                }
            }, i.prototype.closeAllContainers = function() {
                return this.elementContainerDialogs.length > 0 && (this.closeContainerDialog(this.elementContainerDialogs[0]), this.closeAllContainers(), !0)
            }, i.prototype.updateContainerName = function(e) {
                var t = e.data("container");
                if (t) {
                    var i = e.data("container-name");
                    if (i && (i += " (" + Utilities.roundNumber(Item.computeContainerWeight(t), 1) + " / " + t.weightCapacity + ")", e.dialog("option", "title", i)), t.containedWithin && t.containedWithin !== player.inventory) {
                        var a = this.getDialogElementForContainer(t.containedWithin);
                        a && this.updateContainerName(a)
                    }
                }
            }, i.prototype.updateOpenedContainer = function() {
                1 === this.elementContainerDialogs.length ? this.openedContainer = this.elementContainerDialogs[0].data("container") : this.openedContainer = null
            }, i.prototype.hideContextMenu = function() {
                return !(!$(document).contextmenu("instance") || !$(document).contextmenu("isOpen")) && ($(document).contextmenu("close"), !0)
            }, i.prototype.hideActionsMenu = function() {
                return !!this.actionsMenuOpen && (this.hideContextMenu(), this.elementActions.quickHide(), this.actionsMenuOpen = !1, !0)
            }, i.prototype.toggleActionsMenu = function(e) {
                if (void 0 === e && (e = !1), !this.hideActionsMenu()) {
                    var t = [],
                        i = game.getTileInFrontOfPlayer();
                    if (i) {
                        e ? (this.elementActions.css("left", ui.getWidth() / 2), this.elementActions.css("top", ui.getHeight() / 2)) : (this.elementActions.css("left", this.mouseX), this.elementActions.css("top", this.mouseY)), this.elementActions.quickShow(), this.actionsMenuOpen = !0, t.push({
                            action: "Inspect",
                            text: messages[Message.Inspect]
                        });
                        var a = terrains[Utilities.TileHelpers.getType(i)];
                        if (void 0 !== i.doodadId && (game.doodads[i.doodadId].type === DoodadType.WoodenDoor || game.doodads[i.doodadId].type === DoodadType.WoodenGate ? t.push({
                            action: "OpenDoor",
                            text: messages[Message.OpenDoor]
                        }) : game.doodads[i.doodadId].type !== DoodadType.WoodenDoorOpen && game.doodads[i.doodadId].type !== DoodadType.WoodenGateOpen || t.push({
                            action: "CloseDoor",
                            text: messages[Message.CloseDoor]
                        })), void 0 !== i.doodadId && t.push({
                            action: "PickUp",
                            text: messages[Message.CollectObject]
                        }), player.canCarve()) {
                            var n = Item.actionDescriptions[ActionType.Carve].name;
                            n && t.push({
                                action: "Carve",
                                text: n
                            })
                        }
                        void 0 !== i.containedItems && i.containedItems.length > 0 && t.push({
                            action: "PickUpItem",
                            text: messages[Message.PickupItem]
                        }), (a.water || a.shallowWater || Utilities.TileHelpers.getType(i) === TerrainType.Snow) && t.push({
                            action: "Drink",
                            text: messages[Message.Drink]
                        }), a.gather && t.push({
                            action: "Gather",
                            text: messages[Message.Gather]
                        }), terrains[Utilities.TileHelpers.getType(game.getTile(player.x, player.y, player.z))].passable && t.push({
                            action: "Rest",
                            text: messages[Message.Rest]
                        }), player.canJump() && t.push({
                            action: "Jump",
                            text: messages[Message.Jump]
                        });
                        var o = {
                            actions: t
                        };
                        $(document).contextmenu("open", this.elementActions, o)
                    }
                }
            }, i.prototype.onClearMessages = function() {
                this.messages = [], this.elementDialogMessagesContainer.empty()
            }, i.prototype.onFilterInput = function(e) {
                var t = e.parent().parent().find(".filter"),
                    i = t.val(),
                    a = e.children();
                if (i.length > 0) t.addClass("filtering"), t.parent().addClass("filtered");
                else {
                    if (!t.hasClass("filtering")) return;
                    t.removeClass("filtering"), t.parent().removeClass("filtered")
                }
                var n = !1;
                $.each(a, function() {
                    var e = $(this).getItemType();
                    if (e) {
                        var t = $(this).data("section");
                        void 0 !== t && (n = !0);
                        var a = Item.defines[e],
                            o = a.name;
                        if (o) {
                            var r = a.group;
                            if (r)
                                for (var s = 0; s < r.length; s++) o += Item.groups[r[s]].name;
                            a.recipe && a.recipe.skill && (o += skillDescriptions[a.recipe.skill].name);
                            var l = o.toLocaleLowerCase().indexOf(i.toLocaleLowerCase()) > -1;
                            l ? $(this).quickShow() : $(this).quickHide()
                        }
                    }
                }), n && $.each(a, function() {
                    var e = $(this).data("section");
                    if (void 0 !== e) {
                        for (var t = !1, i = $(this).next(); i.is("li");) {
                            if (i.isVisible()) {
                                t = !0;
                                break
                            }
                            i = i.next()
                        }
                        t ? $(this).quickShow() : $(this).quickHide()
                    }
                })
            }, i.prototype.showSortContextMenu = function(e, t, i) {
                var a = [];
                a.push({
                    action: "SortName",
                    text: messages[Message.Name],
                    data: {
                        sortType: SortType.Name,
                        container: t,
                        messageType: i
                    }
                }), i === Message.Crafts ? (a.push({
                    action: "SortSkill",
                    text: messages[Message.Skill],
                    data: {
                        sortType: SortType.Skill,
                        container: t,
                        messageType: i
                    }
                }), a.push({
                    action: "SortCategory",
                    text: messages[Message.Category],
                    data: {
                        sortType: SortType.Category,
                        container: t,
                        messageType: i
                    }
                })) : (a.push({
                    action: "SortDecay",
                    text: messages[Message.Decay],
                    data: {
                        sortType: SortType.Decay,
                        container: t,
                        messageType: i
                    }
                }), a.push({
                    action: "SortDurability",
                    text: messages[Message.Durability],
                    data: {
                        sortType: SortType.Durability,
                        container: t,
                        messageType: i
                    }
                }), a.push({
                    action: "SortGroup",
                    text: messages[Message.Group],
                    data: {
                        sortType: SortType.Group,
                        container: t,
                        messageType: i
                    }
                }), a.push({
                    action: "SortRecent",
                    text: messages[Message.Recent],
                    data: {
                        sortType: SortType.Recent,
                        container: t,
                        messageType: i
                    }
                }), a.push({
                    action: "SortQuality",
                    text: messages[Message.Quality],
                    data: {
                        sortType: SortType.Quality,
                        container: t,
                        messageType: i
                    }
                }), a.push({
                    action: "SortWeight",
                    text: messages[Message.Weight],
                    data: {
                        sortType: SortType.Weight,
                        container: t,
                        messageType: i
                    }
                }));
                var n = {
                    actions: a
                };
                $(document).contextmenu("open", e, n)
            }, i.prototype.sortItems = function(e, t, i) {
                var a = e.parent().attr("id"),
                    n = ui.containerSortInfo[a];
                if (n && n.sortType === t ? null !== i && (n.reverse = !n.reverse) : (n = ui.containerSortInfo[a] = {
                    sortType: t
                }, t !== SortType.Quality && t !== SortType.Decay || (n.reverse = !0)), t === SortType.Category) this.createCraftItemElements(t);
                else {
                    e === this.elementDialogCraftingContainer && this.createCraftItemElements(t);
                    var o = void 0,
                        r = e.children(".clear-fix");
                    if (0 === r.length) o = [e.children()];
                    else {
                        if (1 !== r.length) return;
                        o = [r.prevAll(), r.nextAll()]
                    }
                    for (var s = 0; s < o.length; s++) {
                        var l = o[s];
                        1 !== s && (this.sortItemElements(l, n), l = l.detach(), 2 === o.length ? 0 === s ? l.insertBefore(r) : l.insertAfter(r) : l.appendTo(e))
                    }
                    0 === r.length && this.saveItemOrder(e)
                } if (null !== i) {
                    var p = Message.None;
                    switch (t) {
                        case SortType.Name:
                            p = Message.SortedByName;
                            break;
                        case SortType.Group:
                            p = Message.SortedByGroup;
                            break;
                        case SortType.Weight:
                            p = Message.SortedByWeight;
                            break;
                        case SortType.Recent:
                            p = Message.SortedByRecent;
                            break;
                        case SortType.Skill:
                            p = Message.SortedBySkill;
                            break;
                        case SortType.Decay:
                            p = Message.SortedByDecay;
                            break;
                        case SortType.Quality:
                            p = Message.SortedByQuality;
                            break;
                        case SortType.Durability:
                            p = Message.SortedByDurability;
                            break;
                        case SortType.Category:
                            p = Message.SortedByCategory
                    }
                    ui.displayMessage(p, MessageType.None, messages[i]), audio.queueEffect(SfxType.PickUp)
                }
            }, i.prototype.sortItemElements = function(e, t) {
                e.sort(function(e, i) {
                    var a = $(e).getItemType(),
                        n = $(i).getItemType();
                    if (void 0 === a || void 0 === n) return 0;
                    var o = Item.defines[a],
                        r = Item.defines[n],
                        s = $(e).data("item-id");
                    void 0 === s && (s = $(e).data("item-id"));
                    var l = $(i).data("item-id");
                    void 0 === l && (l = $(i).data("item-id"));
                    var p, d, u = 0,
                        g = 0;
                    switch (t.sortType) {
                        case SortType.Name:
                            u = ItemType[a].toString(), g = ItemType[n].toString();
                            break;
                        case SortType.Group:
                            u = o.group ? Item.groups[o.group[0]].name : "z", g = r.group ? Item.groups[r.group[0]].name : "z";
                            break;
                        case SortType.Weight:
                            u = game.items[s].weight, g = game.items[l].weight;
                            break;
                        case SortType.Recent:
                            u = l, g = s;
                            break;
                        case SortType.Skill:
                            var m = o.recipe;
                            m && (u = SkillType[m.skill].toString(), g = SkillType[m.skill].toString());
                            break;
                        case SortType.Decay:
                            p = game.items[s], d = game.items[l], p && void 0 !== p.decay && (u = p.decay), d && void 0 !== d.decay && (g = d.decay);
                            break;
                        case SortType.Quality:
                            p = game.items[s], d = game.items[l], p && (u = itemQualitySortOrder[p.quality || ItemQuality.None]), d && (g = itemQualitySortOrder[d.quality || ItemQuality.None]);
                            break;
                        case SortType.Durability:
                            p = game.items[s], d = game.items[l], p && (u = p.minDur), d && (g = d.minDur)
                    }
                    return u === g && t.sortType !== SortType.Name && (u = ItemType[a].toString(), g = ItemType[n].toString()), u === g && (u = s, g = l), (t.reverse ? g > u : u > g) ? 1 : -1
                })
            }, i.prototype.updateInventorySort = function() {
                this.onUpdateContainer(this.elementDialogInventoryContainer, !0)
            }, i.prototype.onUpdateContainer = function(e, t) {
                this.updateSort(e, t), this.onFilterInput(e)
            }, i.prototype.updateSort = function(e, t) {
                var i = e.parent().attr("id");
                if (!t || game.options.keepSortActive) {
                    var a, n = ui.containerSortInfo[i];
                    a = null === n || void 0 === n || null === n.sortType || void 0 === n.sortType ? e === this.elementDialogCraftingContainer ? SortType.Name : SortType.Recent : n.sortType, this.sortItems(e, a, null)
                }
            }, i.prototype.isContainerDialogOver = function(e, t) {
                for (var i = 0; i < this.elementContainerDialogs.length; i++) {
                    var a = this.elementContainerDialogs[i],
                        n = a.parent().offset().left,
                        o = a.parent().offset().top,
                        r = a.parent().width(),
                        s = a.parent().height();
                    if (!(e < n || t < o || e > n + r || t > o + s)) return !0
                }
                return !1
            }, i.prototype.onOpenMessages = function() {
                this.messageLoadIndex = this.messages.length;
                var e = this.getMessagesHtml();
                e.length > 0 && (this.elementDialogMessagesContainer.html(e), this.elementDialogMessagesContainer.scrollTop(this.elementDialogMessagesContainer.prop("scrollHeight")))
            }, i.prototype.getMessagesHtml = function() {
                for (var e = "", t = 0, i = this.messageLoadIndex - 1; i >= 0; i--)
                    if (t++, e = this.messages[i] + e, t > 30) return this.messageLoadIndex = i, e;
                return this.messageLoadIndex = 0, e
            }, i.prototype.onCloseMessages = function() {
                this.elementDialogMessagesContainer.empty()
            }, i
        }(e.BaseScreen);
    e.InGameScreen = i
}(UI || (UI = {}));
var UI;
! function(e) {
    var t = function(e) {
        function t() {
            e.apply(this, arguments), this.visible = !0
        }
        return __extends(t, e), t.prototype.selector = function() {
            return "#screen-loading"
        }, t.prototype.bindElements = function() {
            this.elementNormal = this.element.children(".normal"), this.elementRest = this.element.children(".rest"), this.elementMessage = this.element.children(".message")
        }, t.prototype.onShow = function(e) {
            var t = e;
            switch (t) {
                case LoadingType.Normal:
                    this.elementNormal.quickShow(), this.elementRest.quickHide();
                    break;
                case LoadingType.Rest:
                    this.elementNormal.quickHide(), this.elementRest.quickShow()
            }
            this.setMessage(Message.None), audio.fadeOut()
        }, t.prototype.onHide = function() {
            audio.fadeIn()
        }, t.prototype.setMessage = function(e) {
            this.elementMessage.text(messages[e])
        }, t
    }(e.BaseScreen);
    e.LoadingScreen = t
}(UI || (UI = {}));
var UI;
! function(e) {
    var t = function(e) {
        function t() {
            e.apply(this, arguments), this.bindDefaultWidth = 5
        }
        return __extends(t, e), t.prototype.selector = function() {
            return "#options"
        }, t.prototype.bindElements = function() {
            var e = this;
            this.elementOverlay = this.element.parent(), this.elementTitleScreenOptions = $("#main-menu div[data-mainmenu-id='Options']").find(".container").first(),
                this.elementLanguageSelect = this.element.find(".language-select"), this.elementBindList = this.element.find(".bind-list"), this.elementBindDefault = this.element.find(".bind-default"), this.elementBindDefaultParent = this.elementBindDefault.parent();
            var t = function(t, i) {
                e.onClickCheckbox(t, i)
            };
            this.element.find("div[data-checkbox-id]").click(function() {
                t($(this), $(this).data("checkbox-id"))
            });
            var i = function(t, i) {
                e.onClickButton(t, i)
            };
            this.element.find("div[data-button-id], button[data-button-id]").click(function() {
                i($(this), $(this).data("button-id"))
            });
            var a = function(t, i) {
                e.onClickButtonChoice(t, i)
            };
            this.element.find("div[data-button-choice-id] button").click(function() {
                a($(this), $(this).parent().data("button-choice-id"))
            }), this.element.find(".header .close").click(function() {
                ui.hideOptionsScreen()
            })
        }, t.prototype.onShow = function() {
            var e = this;
            this.elementOverlay.quickShow(), ui.setRangeValue("Music", game.options.music), ui.setRangeValue("Effects", game.options.effects), ui.setRangeValue("DialogOpacity", game.options.dialogOpacity), this.setCheckboxValue("Mute", game.options.mute), this.setCheckboxValue("AutoGather", game.options.autoGather), this.setCheckboxValue("AutoPickup", game.options.autoPickup), this.setCheckboxValue("DropOnGather", game.options.dropOnGather), this.setCheckboxValue("EnableHints", game.options.hints), this.setCheckboxValue("MouseClickMovement", game.options.mouseMovement), this.setCheckboxValue("KeepSortActive", game.options.keepSortActive), this.setCheckboxValue("SkipIntro", game.options.skipIntro), this.setCheckboxValue("ZoomOnScroll", game.options.zoomOnScroll), this.setCheckboxValue("WorldTooltips", game.options.worldTooltips), this.setCheckboxValue("AlternateContextMenu", game.options.alternateContextMenu), this.setButtonChoiceValue("FontStyle", game.options.fontStyle), this.setButtonChoiceValue("DisplayMode", game.options.windowMode), this.setButtonChoiceValue("VisionMode", game.options.visionMode), this.elementBindList.empty();
            for (var t = 0, i = keybindOrder; t < i.length; t++) {
                var a = i[t];
                if (Utilities.Enums.isValid(KeyBind, a)) {
                    var n = $('<li class="clickable"><span class="bind-name">' + KeyBind[a] + '</span><span class="bind-current"><span class="label">' + ui.getStringForKeyBind(a) + "</span>");
                    n.data("key-id", a), this.elementBindList.append(n)
                }
            }
            var o = function(t, i) {
                e.onClickKeybind(t, i)
            };
            this.elementBindList.children("li").click(function() {
                $(this).hasClass("selected") || o($(this), $(this).data("key-id"))
            });
            var r = this.elementBindDefault.outerWidth();
            r > this.bindDefaultWidth && (this.bindDefaultWidth = r), this.elementBindDefault.click(function(t) {
                e.onClickKeyBindDefault(), t.stopPropagation()
            });
            var s = function(t, i, a) {
                e.onRangeChange(t, i, a)
            };
            this.element.find("input[data-range-id]").on("input", function() {
                s($(this), $(this).data("range-id"), $(this).val())
            }), this.elementLanguageSelect.empty(), this.elementLanguageSelect.change(function() {
                var e = $(this).val();
                e && (Languages.saveData.language = e, Languages.load(e))
            });
            for (var l = Languages.getLanguages(), a = 0; a < l.length; a++) {
                var p = l[a],
                    d = p.getName(),
                    u = Languages.getLoaded() === p ? 'selected="selected"' : "";
                this.elementLanguageSelect.append("<option " + u + 'value="' + d + '">' + d + "</option>")
            }
            if (Steamworks.isLinux() || !Steamworks.isElectron()) {
                var g = this.element.find("[data-button-id='OpenLogsFolder']").first();
                g.quickHide()
            }
            Steamworks.isElectron() || this.element.find(".scale-section").first().quickHide(), ui.isInGameScreenShown() || (this.elementTitleScreenOptions.empty(), this.elementTitleScreenOptions.append(this.element.clone(!0)))
        }, t.prototype.onHide = function() {
            this.elementOverlay.quickHide(), this.resetBindState(), this.elementBindDefault.appendTo(this.elementBindDefaultParent)
        }, t.prototype.setCheckboxValue = function(e, t) {
            var i = this.element.find("div[data-checkbox-id='" + e + "']").find(".filledin");
            t ? i.quickShow() : i.quickHide()
        }, t.prototype.setButtonChoiceValue = function(e, t) {
            var i = this.element.find("div[data-button-choice-id='" + e + "']").children("button");
            t ? (i.first().addClass("selected"), i.last().removeClass("selected")) : (i.first().removeClass("selected"), i.last().addClass("selected"))
        }, t.prototype.onClickKeybind = function(e, t) {
            this.resetBindState(), e.addClass("selected");
            var i = e.parent().parent().find(".bind-default");
            i.appendTo(e).css({
                right: "-" + (this.bindDefaultWidth + 5) + "px"
            }).quickShow(), ui.setRebindingKey(t, e)
        }, t.prototype.onClickKeyBindDefault = function() {
            this.resetBindState(!0)
        }, t.prototype.resetBindState = function(e) {
            void 0 === e && (e = !1);
            var t = ui.getRebindingKeyElement();
            if (!t) return null;
            var i = t.data("key-id");
            return e && ui.clearBind(i), ui.setRebindingKey(null, null), this.updateBind(i, t), i
        }, t.prototype.updateBind = function(e, t) {
            t.removeClass("selected"), t.find(".bind-default").quickHide(), t.find(".bind-current .label").text(ui.getStringForKeyBind(e))
        }, t.prototype.onClickCheckbox = function(e, t) {
            var i = e.find(".filledin").first(),
                a = !i.isVisible();
            switch (a ? i.quickShow() : i.quickHide(), t) {
                case "Mute":
                    game.options.mute = a, audio.updateVolume();
                    break;
                case "AutoGather":
                    game.options.autoGather = a;
                    break;
                case "AutoPickup":
                    game.options.autoPickup = a;
                    break;
                case "DropOnGather":
                    game.options.dropOnGather = a;
                    break;
                case "EnableHints":
                    game.options.hints = a;
                    break;
                case "MouseClickMovement":
                    game.options.mouseMovement = a;
                    break;
                case "KeepSortActive":
                    game.options.keepSortActive = a, game.playing && game.options.keepSortActive && ui.updateInventorySort();
                    break;
                case "SkipIntro":
                    game.options.skipIntro = a;
                    break;
                case "ZoomOnScroll":
                    game.options.zoomOnScroll = a;
                    break;
                case "WorldTooltips":
                    game.options.worldTooltips = a;
                    break;
                case "AlternateContextMenu":
                    game.options.alternateContextMenu = a
            }
        }, t.prototype.onClickButton = function(e, t) {
            switch (t) {
                case "NextSong":
                    audio.nextTrack();
                    break;
                case "ZoomIn":
                    game.addZoomLevel(-1);
                    break;
                case "ZoomOut":
                    game.addZoomLevel(1);
                    break;
                case "ScaleDefault":
                    Steamworks.setDefaultZoomFactor();
                    break;
                case "ScaleIn":
                    Steamworks.addZoomFactor(.05);
                    break;
                case "ScaleOut":
                    Steamworks.addZoomFactor(-.05);
                    break;
                case "ClearSaveData":
                    ui.displayConfirmDialog(Message.WantToDeleteAllSavedData, [Message.Yes, Message.No], function(e) {
                        e === Message.Yes && SaveLoad.isEnabled() && SaveLoad.deleteAll(function() {
                            window.setTimeout(function() {
                                game.saveClear = !0, location.reload()
                            }, 10)
                        })
                    });
                    break;
                case "OpenLogsFolder":
                    Steamworks.isElectron() && Steamworks.openLogsFolder();
                    break;
                case "ToggleDeveloperTools":
                    Steamworks.isElectron() && Steamworks.toggleDeveloperTools();
                    break;
                case "ReloadGame":
                    Steamworks.isElectron() ? Steamworks.sendMessage("reload", "") : location.reload()
            }
        }, t.prototype.onClickButtonChoice = function(e, t) {
            var i = e.is(":first-child");
            switch (i ? (e.addClass("selected"), e.next().removeClass("selected")) : (e.prev().removeClass("selected"), e.addClass("selected")), t) {
                case "FontStyle":
                    game.options.fontStyle = i, ui.setFontStyle();
                    break;
                case "DisplayMode":
                    game.options.windowMode = i, ui.onUpdateWindowMode();
                    break;
                case "VisionMode":
                    game.options.visionMode = i, game.updateRender = !0
            }
        }, t.prototype.onRangeChange = function(e, t, i) {
            var a = parseInt(i, 10);
            switch (t) {
                case "Music":
                    game.options.music = a / 100, audio.updateVolume();
                    break;
                case "Effects":
                    game.options.effects = a / 100, audio.updateVolume();
                    break;
                case "DialogOpacity":
                    game.options.dialogOpacity = a / 100, ui.setOpacity()
            }
            ui.setRangeValue(t, a / 100)
        }, t.prototype.addOptionsSection = function(e, t) {
            var i = $('<div id="' + e + '" class="mod-section" data-options-section="' + t + '"><p class="section">' + t + "</p></div>");
            return this.element.children(".content").append(i), i
        }, t.prototype.removeOptionsSection = function(e) {
            this.element.find('.content div[data-options-section="' + e + '"]').remove()
        }, t
    }(e.BaseScreen);
    e.OptionsScreen = t
}(UI || (UI = {}));
var UI;
! function(e) {
    var t = function(e) {
        function t() {
            e.apply(this, arguments)
        }
        return __extends(t, e), t.prototype.selector = function() {
            return "#screen-title"
        }, t.prototype.bindElements = function() {
            var e = this;
            if (this.elementPlayGameContainer = this.element.find("[data-mainmenu-id='PlayGame'] .container"), this.elementNewGame = this.element.find("[data-mainmenu-id='PlayGame'] .new-game").first(), this.elementPlayGameSeparater = this.element.find("[data-mainmenu-id='PlayGame'] .container .separator"), this.elementSavedGameTemplate = this.element.find("[data-mainmenu-id='PlayGame'] .template-saved-game").first(), this.elementSavedGameTemplate.quickHide(), this.elementNoMods = this.element.find("[data-mainmenu-id='ManageMods'] .no-mods").first(), this.elementLocalMods = this.element.find("[data-mainmenu-id='ManageMods'] div[data-mod-type='Local']"), this.elementWorkshopMods = this.element.find("[data-mainmenu-id='ManageMods'] div[data-mod-type='Workshop']"), this.elementInternalMods = this.element.find("[data-mainmenu-id='ManageMods'] div[data-mod-type='Internal']"), this.elementModContainer = this.element.find(".mod-container"), this.elementLocalModsContainer = this.elementLocalMods.last(), this.elementWorkshopModsContainer = this.elementWorkshopMods.last(), this.elementInternalModsContainer = this.elementInternalMods.last(), Steamworks.isLinux() || !Steamworks.isElectron()) {
                var t = this.element.find("[data-mainmenu-action-id='OpenModsFolder']").first();
                t.quickHide(), t.prev().quickHide()
            }
            this.elementModTemplate = this.element.find("[data-mainmenu-id='ManageMods'] .template-mod").first(), this.elementModTemplate.quickHide(), this.elementImportGameInput = this.element.find("#import-game"), this.elementImportGameInput.on("change", function(t) {
                return e.onImportGame(t)
            }), this.elementHighscoresContainer = this.element.find("[data-mainmenu-id='ViewHighscores'] .container"), this.elementHighscoresNoHighscores = this.elementHighscoresContainer.find(".no-highscores"), this.elementHighscoreTemplate = this.element.find("[data-mainmenu-id='ViewHighscores'] .template-highscore").first(), this.elementHighscoreTemplate.quickHide(), this.elementAboutContainer = this.element.find("[data-mainmenu-id='About'] .container"), this.elementEndGameHeaderBottom = this.element.find("[data-mainmenu-id='EndGame'] .header .bottom").first(), this.elementEndGameHighscore = this.element.find("[data-mainmenu-id='EndGame'] .row.highscore").first();
            var i = function(t) {
                e.showMainMenuId(t)
            };
            this.element.find("#main-menu div[data-mainmenu-switch-id]").on("click", function() {
                i($(this).data("mainmenu-switch-id"))
            });
            var a = function(t, i) {
                e.onAction(t, i)
            };
            this.element.on("click", "#main-menu div[data-mainmenu-action-id]", function() {
                a($(this).data("mainmenu-action-id"), $(this))
            });
            var n = this;
            this.element.functionalTooltip({
                selector: ".mod-container .row .left, .row.saved-game .left",
                trackMouse: !1,
                disabled: !0,
                position: {
                    startAtRight: !0,
                    centerY: !0,
                    leftOffset: 140,
                    clampRight: !0
                },
                content: function() {
                    return n.getTooltipHtml($(this))
                }
            }), $(".ui-helper-hidden-accessible").remove()
        }, t.prototype.unbindElements = function() {}, t.prototype.onShow = function(e) {
            SaveLoad.transferSaves(), this.showMainMenuId(TitleScreenId[e].toString())
        }, t.prototype.onHide = function() {}, t.prototype.onKeyDown = function(e, t, i) {
            return !(!i || !$("[data-mainmenu-id='PlayGame'] .container .saved-game input").is(":focus")) || null
        }, t.prototype.showMainMenuId = function(e) {
            var t = this;
            this.openedMenu = e, this.element.functionalTooltip("disable"), this.element.removeClass("win"), this.element.removeClass("lose");
            var i = $("#main-menu div[data-mainmenu-id='" + e + "']");
            i.removeClass("slide-out").addClass("slide-in"), $("#main-menu div[data-mainmenu-id]:not([data-mainmenu-id='" + e + "'])").removeClass("slide-in").addClass("slide-out"), "Options" === e ? ui.showOptionsScreen() : "Default" === e ? ui.hideOptionsScreen() : "ManageMods" === e ? this.refreshMods() : "ViewHighscores" === e ? this.refreshHighscores() : "EndGame" === e && this.refreshEndGame(), "PlayGame" !== e && "ManageMods" !== e || setTimeout(function() {
                t.isVisible() && t.element.functionalTooltip("enable")
            }, 500)
        }, t.prototype.refreshSlots = function() {
            var e = this,
                t = this;
            SaveLoad.getSaveCount(function(i, a) {
                $("[data-mainmenu-id='PlayGame'] .container .saved-game").remove();
                var n, o = !1;
                if (i > 0) {
                    e.elementPlayGameSeparater.quickShow();
                    for (var r = 0; r < a.length; r++) {
                        var s = a[r],
                            l = e.elementSavedGameTemplate.clone().removeClass("template-saved-game").addClass("saved-game").data("slot", s);
                        l.find("[data-mainmenu-action-id]").data("slot", s), l.prependTo(e.elementPlayGameContainer).quickShow(), l.find("input").first().keypress(function(e) {
                            e.which === ui.getKeyBind(KeyBind.Enter) && t.onSlotNameChange($(this).parent().parent().parent().data("slot"), $(this))
                        });
                        var p = function(e) {
                            return function(t, i, a) {
                                if (i) {
                                    var n = {},
                                        o = SaveLoad.loadPartialDataInside(a, "player");
                                    SaveLoad.loadPartialData(a, n, "gameSlotName"), SaveLoad.loadPartialData(a, n, "gameWonGame"), SaveLoad.loadPartialData(a, n, "saveTime"), SaveLoad.loadPartialData(a, n, "modsUnloadable"), e.find("input").val(n.gameSlotName), e.data("won-game", n.gameWonGame), e.data("save-time", n.saveTime), e.data("unloadable", n.modsUnloadable), void 0 !== o.score ? e.data("player-score", o.score) : e.data("player-score", o.talent)
                                }
                            }
                        };
                        SaveLoad.loadPartial(s, p(l)), o || quickLoad !== s || (o = !0, n = setInterval(function() {
                            game.loadedResources && null !== quickLoad && (clearInterval(n), e.actionContinueGame(quickLoad), quickLoad = null)
                        }, 50))
                    }
                } else e.elementPlayGameSeparater.quickHide();
                i >= SaveLoad.maxSlots ? e.elementNewGame.quickHide() : e.elementNewGame.quickShow(), o || null === quickLoad || (quickLoad = null, n = setInterval(function() {
                    game.loadedResources && (clearInterval(n), e.actionNewGame(), quickLoad = null)
                }, 50))
            })
        }, t.prototype.refreshMods = function() {
            var e = Mods.getMods();
            if (0 === e.length) return this.elementNoMods.quickShow(), this.elementLocalMods.quickHide(), this.elementWorkshopMods.quickHide(), void this.elementInternalMods.quickHide();
            this.elementNoMods.quickHide(), this.elementLocalModsContainer.empty(), this.elementWorkshopModsContainer.empty(), this.elementInternalModsContainer.empty();
            for (var t = 0, i = 0, a = 0, n = 0; n < e.length; n++)
                if (Mods.isValid(n)) {
                    var o = Mods.getType(n),
                        r = Mods.getPublishFileId(n),
                        s = r ? Steamworks.getPublishedMod(r) : null,
                        l = null === s && r,
                        p = !Steamworks.isElectron() || o === Mods.Type.Workshop || o === Mods.Type.Internal && Steamworks.isElectron(),
                        d = this.elementModTemplate.clone().removeClass("template-mod").data("mod-id", n);
                    d.find(".text").text(Mods.getName(n));
                    var u = void 0;
                    switch (o) {
                        case Mods.Type.Local:
                            t++, u = this.elementLocalModsContainer, d.find("div[data-mainmenu-action-id='UninstallMod']").quickHide();
                            break;
                        case Mods.Type.Workshop:
                            i++, u = this.elementWorkshopModsContainer;
                            break;
                        default:
                            a++, u = this.elementInternalModsContainer, d.find("div[data-mainmenu-action-id='UninstallMod']").quickHide()
                    }
                    r ? d.find("div[data-mainmenu-action-id='ViewInSteamWorkshop']").quickShow() : d.find("div[data-mainmenu-action-id='ViewInSteamWorkshop']").quickHide(), (l || p) && d.find("div[data-mainmenu-action-id='PublishMod']").quickHide(), this.updateModState(d, n), d.appendTo(u).quickShow()
                }
            this.postUpdateModState(), t > 0 ? this.elementLocalMods.quickShow() : this.elementLocalMods.quickHide(), i > 0 ? this.elementWorkshopMods.quickShow() : this.elementWorkshopMods.quickHide(), a > 0 ? this.elementInternalMods.quickShow() : this.elementInternalMods.quickHide()
        }, t.prototype.refreshHighscores = function() {
            this.elementHighscoresContainer.find(".highscore").remove();
            var e = game.highscores;
            if (e.length > 0) {
                this.elementHighscoresNoHighscores.quickHide();
                for (var t = e.concat().sort().sort(function(e, t) {
                    return t.score - e.score
                }), i = 0; i < t.length; i++) {
                    var a = t[i],
                        n = this.elementHighscoreTemplate.clone().removeClass("template-highscore").addClass("highscore").addClass(a.dailyChallenge ? "daily-challenge" : ""),
                        o = n.find(".text");
                    o.first().text(a.name), o.first().next().text(makeString(Message.Score, a.score)), o.last().text((a.message ? a.message : "") + " (" + new Date(a.date).toLocaleString() + ")"), n.appendTo(this.elementHighscoresContainer).quickShow()
                }
            } else this.elementHighscoresNoHighscores.quickShow()
        }, t.prototype.updateModState = function(e, t) {
            var i = Mods.getState(t),
                a = Mods.canLoad(t, !0),
                n = e.find(".filledin");
            if (e.data("canload-state", a), e.removeClass("unloadable"), e.removeClass("unloadable-localmodprecedence"), i === Mods.State.Error) n.quickHide(), e.addClass("unloadable");
            else if (i === Mods.State.Disabled) n.quickHide();
            else if (i === Mods.State.Enabled && (n.quickShow(), a !== Mods.CanLoadState.Loadable)) switch (a) {
                case Mods.CanLoadState.LocalModPrecedence:
                    e.addClass("unloadable-localmodprecedence");
                    break;
                default:
                    e.addClass("unloadable")
            }
        }, t.prototype.postUpdateModState = function() {
            var e = this;
            this.elementLocalModsContainer.add(this.elementWorkshopModsContainer).add(this.elementInternalModsContainer).children(".row").each(function() {
                e.updateModState($(this), $(this).data("mod-id"))
            })
        }, t.prototype.onAction = function(e, t) {
            var i = this,
                a = t.data("slot"),
                n = t.parent().parent(),
                o = n.data("mod-id");
            switch (e) {
                case "NewGame":
                    this.actionNewGame();
                    break;
                case "ContinueGame":
                    t.find(".text input").attr("disabled") && this.actionContinueGame(a);
                    break;
                case "EditGame":
                    this.actionEditGame(a, n.find(".left .text input"));
                    break;
                case "ExportGame":
                    Steamworks.isGreenworksEnabled() ? ui.displayConfirmDialog(Message.HowDoYouWantToExportSave, [Message.SteamWorkshop, Message.LocalFile, Message.Cancel], function(e) {
                        e === Message.SteamWorkshop ? i.exportToSteamWorkshop(n.find(".left .text input").val(), a) : e === Message.LocalFile && i.exportToFile(a)
                    }) : this.exportToFile(a);
                    break;
                case "DeleteGame":
                    ui.displayConfirmDialog(Message.WantToDeleteThisGame, [Message.Yes, Message.No], function(e) {
                        e === Message.Yes && i.actionDeleteGame(a)
                    });
                    break;
                case "DailyChallenge":
                    this.playSlot(-1);
                    break;
                case "QuitGame":
                    window.close();
                    break;
                case "VisitSteamWorkshop":
                case "VisitSteamWorkshop2":
                    Steamworks.openWorkshop();
                    break;
                case "OpenModsFolder":
                    Steamworks.openModsFolder();
                    break;
                case "ViewInSteamWorkshop":
                    Steamworks.openWorkshop(Mods.getPublishFileId(o));
                    break;
                case "UninstallMod":
                    ui.displayConfirmDialog(Message.WantToUninstallThisMod, [Message.Yes, Message.No], function(e) {
                        if (e === Message.Yes) {
                            ui.showLoadingScreen();
                            var t = Mods.getPublishFileId(o);
                            t && Steamworks.unsubscribe(t, function() {
                                ui.hideLoadingScreen()
                            })
                        }
                    });
                    break;
                case "EnableMod":
                    Mods.setState(o, Mods.getState(o) === Mods.State.Enabled ? Mods.State.Disabled : Mods.State.Enabled), this.postUpdateModState();
                    break;
                case "PublishMod":
                    var r = Mods.getPublishFileId(o);
                    r ? ui.displayConfirmDialog(Message.WantToPublishUpdateToMod, [Message.Yes, Message.No], function(e) {
                        e === Message.Yes && (ui.showLoadingScreen(), ui.setLoadingMessage(Message.UpdatingMod), Steamworks.publishMod(o, function(e, t) {
                            if (ui.hideLoadingScreen(), null !== e) alert("Error publishing mod update: " + e);
                            else {
                                i.refreshMods();
                                var a = Mods.getRequiredMods(o);
                                a && a.length > 0 ? ui.displayConfirmDialog(Message.DoNotForgetToAddRequiredModsOnWorkshop, [Message.Ok], function() {
                                    Steamworks.openWorkshop(t)
                                }) : Steamworks.openWorkshop(t)
                            }
                        }))
                    }) : ui.displayConfirmDialog(Message.WantToPublishThisMod, [Message.Yes, Message.No], function(e) {
                        e === Message.Yes && (ui.showLoadingScreen(), ui.setLoadingMessage(Message.PublishingMod), Steamworks.publishMod(o, function(e, t) {
                            if (ui.hideLoadingScreen(), null !== e) alert("Error publishing mod: " + e);
                            else {
                                i.refreshMods();
                                var a = Mods.getRequiredMods(o);
                                a && a.length > 0 ? ui.displayConfirmDialog(Message.DoNotForgetToAddRequiredModsOnWorkshop, [Message.Ok], function() {
                                    Steamworks.openWorkshop(t)
                                }) : Steamworks.openWorkshop(t)
                            }
                        }))
                    });
                    break;
                case "ShareOnFacebook":
                    Steamworks.openUrl("https://www.facebook.com/sharer/sharer.php?u=http%3A//store.steampowered.com/app/379210/");
                    break;
                case "PostATweet":
                    Steamworks.openUrl("https://twitter.com/home?status=I%20got%20a%20highscore%20of%20" + player.score + "%20in%20Wayward%20http%3A//store.steampowered.com/app/379210/%20%23wayward");
                    break;
                case "ModdingGuide":
                    Steamworks.openUrl("https://github.com/WaywardGame/mod-reference")
            }
        }, t.prototype.actionNewGame = function() {
            var e = this,
                t = !1;
            SaveLoad.getSaveCount(function() {}, function(i, a) {
                t || a || (t = !0, e.playSlot(i))
            })
        }, t.prototype.actionEditGame = function(e, t) {
            "disabled" === t.attr("disabled") ? t.removeAttr("disabled").focus().select() : this.onSlotNameChange(e, t)
        }, t.prototype.actionContinueGame = function(e) {
            var t = this;
            SaveLoad.loadPartial(e, function(e, i, a) {
                var n = !1;
                if (i) {
                    var o = {};
                    SaveLoad.loadPartialData(a, o, "modsUnloadable");
                    for (var r = o.modsUnloadable, s = Object.keys(r), l = 0; l < s.length; l++) {
                        var p = s[l],
                            d = r[p];
                        if (!d.unloadable) {
                            var u = Mods.canLoadFromIdentifier(p);
                            u.loadable || (n = !0)
                        }
                    }
                }
                n ? ui.displayConfirmDialog(Message.RequiredModsMissingWantToContinue, [Message.Yes, Message.No], function(i) {
                    i === Message.Yes && t.playSlot(e)
                }) : t.playSlot(e)
            })
        }, t.prototype.playSlot = function(e) {
            this.element.functionalTooltip("disable"), game.play(e)
        }, t.prototype.actionDeleteGame = function(e) {
            var t = this;
            SaveLoad.deleteSlot(e, function() {
                return t.refreshSlots()
            })
        }, t.prototype.getTooltipHtml = function(e) {
            var t = e.attr("data-tooltip");
            if (void 0 !== t) return t;
            e = e.parent();
            var i, a = e.data("slot"),
                n = "";
            if (void 0 !== a) {
                var o = e.data("won-game"),
                    r = e.data("save-time"),
                    s = e.data("player-score"),
                    l = e.data("unloadable");
                if (void 0 === r || void 0 === s || void 0 === l) return messages[Message.CorruptSaveDetected];
                n = "<p><strong>Save Time: " + new Date(r).toLocaleString() + "</strong></p>", n += "<p><strong>Player Score: " + s + "</strong></p>", o && (n += "<p><strong>" + messages[Message.SailedToCivilization] + "</strong></p>");
                var p = Object.keys(l);
                if (p.length > 0) {
                    n += "<p><strong>Mods: </strong> ";
                    for (var d = 0; d < p.length; d++) {
                        var u = p[d],
                            g = l[u];
                        i = Mods.canLoadFromIdentifier(u);
                        var m = void 0;
                        m = i.loadable ? "mod-loadable" : g.unloadable ? "mod-disabled" : "mod-unloadable", n += '<span class="' + m + '">' + i.name + "</span>, "
                    }
                    n = n.slice(0, -2), n += "</p>"
                }
            } else {
                var y = e.data("mod-id"),
                    c = e.data("canload-state");
                n = "<h3>" + Mods.getName(y) + "</h3>", n += "<p><strong>" + Mods.getDescription(y) + "</strong></p>", n += "<p><strong>" + messages[Message.LabelAuthor] + "</strong> " + Mods.getAuthor(y) + "</p>", n += "<p><strong>" + messages[Message.LabelVersion] + "</strong> " + Mods.getVersion(y) + "</p>";
                var h = Mods.getLastUpdatedDate(y);
                h && (n += "<p><strong>" + messages[Message.LabelLastUpdated] + "</strong> " + h + "</p>");
                var T = Mods.getRequiredMods(y);
                if (T && T.length > 0) {
                    n += "<p><strong>" + messages[Message.LabelRequiredMods] + "</strong> ";
                    for (var d = 0; d < T.length; d++) i = Mods.canLoadFromIdentifier(T[d]), n += '<span class="' + (i.loadable ? "mod-loadable" : "mod-unloadable") + '">' + i.name + "</span>, ";
                    n = n.slice(0, -2), n += "</p>"
                }
                var f = null;
                switch (c) {
                    case Mods.CanLoadState.DependencyIssue:
                        f = Message.DependencyIssue;
                        break;
                    case Mods.CanLoadState.ModRequiresItself:
                        f = Message.ModRequiresItself;
                        break;
                    case Mods.CanLoadState.MissingRequiredMod:
                        f = Message.MissingRequiredMods;
                        break;
                    case Mods.CanLoadState.CannnotLoadRequiredMod:
                        f = Message.UnableToLoadRequiredMods;
                        break;
                    case Mods.CanLoadState.ReqiredModNotLoaded:
                        f = Message.RequiredModsNotLoaded;
                        break;
                    case Mods.CanLoadState.LocalModPrecedence:
                        f = Message.LocalVersionOfModDetected;
                        break;
                    case Mods.CanLoadState.IncompatibleVersion:
                        f = Message.IncompatibleVersion;
                        break;
                    case Mods.CanLoadState.ModLoadError:
                        f = Message.ModLoadError
                }
                null !== f && (n += '<p class="mod-unloadable">' + messages[f])
            }
            return n
        }, t.prototype.onImportGame = function(e) {
            var t = this;
            setTimeout(function() {
                var i = e.target.files;
                i && i[0] && (ui.showLoadingScreen(), setTimeout(function() {
                    var a = new FileReader;
                    a.onload = function(e) {
                        SaveLoad.getFirstFreeSlot(function(i) {
                            SaveLoad.importSave(i, e.target.result, function(e) {
                                ui.hideLoadingScreen(), null === e ? ui.displayConfirmDialog(Message.UnableToImportSave, [Message.Ok], function() {}) : t.refreshSlots()
                            })
                        })
                    }, a.readAsText(i[0], "ascii"), $(e.target).val("")
                }, 0))
            }, 0)
        }, t.prototype.onSlotNameChange = function(e, t) {
            var i = {
                gameSlotName: t.val()
            };
            SaveLoad.savePartialData(e, i, "gameSlotName", "gameSlotName", function() {}), t.attr("disabled", "disabled"), ui.playClickSound()
        }, t.prototype.refreshEndGame = function() {
            var e;
            if (player && player.state === PlayerState.Won) {
                var t = [Message.WinSailBackWithRiches, Message.WinFindWayBackToCivilization, Message.WinTravelledBackToCivilization];
                e = t[Math.floor(Math.random() * t.length)], this.element.addClass("win"), Languages.refreshUiTranslation(Languages.UiTranslation.MenuEndGameWon)
            } else {
                var i = [Message.LoseSadlyNoTrace, Message.LoseBonesLayBleaching, Message.LoseEndIsBeginning];
                e = i[Math.floor(Math.random() * i.length)], this.element.addClass("lose"), Languages.refreshUiTranslation(Languages.UiTranslation.MenuEndGameDead)
            }
            this.elementEndGameHeaderBottom.text(messages[e]);
            var a = game.highscores[game.highscores.length - 1];
            if (a) {
                var n = this.elementEndGameHighscore.children();
                n.first().text(a.name), n.first().next().text(makeString(Message.Score, a.score)), n.last().text((a.message ? a.message : "") + " (" + new Date(a.date).toLocaleString() + ")")
            }
        }, t.prototype.exportToFile = function(e) {
            ui.showLoadingScreen(), setTimeout(function() {
                SaveLoad.exportSave(e, function(e, t, i) {
                    var a = new Date,
                        n = URL.createObjectURL(new Blob([i], {
                            type: "text/json"
                        }));
                    ui.setObjectUrl(n);
                    var o = document.createElement("a");
                    o.href = n, o.download = ["Wayward_save_", a.getFullYear(), "_", (101 + a.getMonth() + "").slice(-2), (100 + a.getDate() + "").slice(-2), "_", (100 + a.getHours() + "").slice(-2), (100 + a.getMinutes() + "").slice(-2), (100 + a.getSeconds() + "").slice(-2), ".json"].join(""), o.click(), o.remove(), ui.hideLoadingScreen()
                })
            }, 100)
        }, t.prototype.exportToSteamWorkshop = function(e, t) {
            ui.showLoadingScreen(), Steamworks.createSaveGameMod(e, t, function(t) {
                t ? Mods.initializeMod(e, Mods.Type.Local, function(t) {
                    ui.setLoadingMessage(Message.PublishingMod), Steamworks.publishMod(t, function(i, a) {
                        ui.hideLoadingScreen(), Mods.removeMod(t), Steamworks.deleteSaveGameMod(e), null !== i ? alert("Error publishing mod: " + i) : Steamworks.openWorkshop(a)
                    })
                }, !0) : ui.hideLoadingScreen()
            })
        }, t
    }(e.BaseScreen);
    e.TitleScreen = t
}(UI || (UI = {}));
//# sourceMappingURL=wayward.min.js.map